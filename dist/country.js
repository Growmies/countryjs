(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.countryjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Åland Islands",
    "official": "Åland Islands",
    "native": {
      "swe": {
        "official": "Landskapet Åland",
        "common": "Åland"
      }
    }
  },
  "tld": [
    ".ax"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "358"
  ],
  "capital": "Mariehamn",
  "altSpellings": [
    "AX",
    "Aaland",
    "Aland",
    "Ahvenanmaa"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "swe": "Swedish"
  },
  "translations": {
    "deu": {
      "official": "Åland-Inseln",
      "common": "Åland"
    },
    "fra": {
      "official": "Ahvenanmaa",
      "common": "Ahvenanmaa"
    },
    "hrv": {
      "official": "Aland Islands",
      "common": "Ålandski otoci"
    },
    "ita": {
      "official": "Isole Åland",
      "common": "Isole Aland"
    },
    "jpn": {
      "official": "オーランド諸島",
      "common": "オーランド諸島"
    },
    "nld": {
      "official": "Åland eilanden",
      "common": "Ålandeilanden"
    },
    "por": {
      "official": "Ilhas Åland",
      "common": "Alândia"
    },
    "rus": {
      "official": "Аландские острова",
      "common": "Аландские острова"
    },
    "spa": {
      "official": "Islas Åland",
      "common": "Alandia"
    },
    "fin": {
      "official": "Ahvenanmaan maakunta",
      "common": "Ahvenanmaa"
    }
  },
  "latlng": [
    60.116667,
    19.9
  ],
  "demonym": "Ålandish",
  "landlocked": false,
  "borders": [],
  "area": 1580,
  "codes": {
    "cca2": "AX",
    "ccn3": "248",
    "cca3": "ALA",
    "cioc": ""
  }
}
},{}],2:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Afghanistan",
    "official": "Islamic Republic of Afghanistan",
    "native": {
      "prs": {
        "official": "جمهوری اسلامی افغانستان",
        "common": "افغانستان"
      },
      "pus": {
        "official": "د افغانستان اسلامي جمهوریت",
        "common": "افغانستان"
      },
      "tuk": {
        "official": "Owganystan Yslam Respublikasy",
        "common": "Owganystan"
      }
    }
  },
  "tld": [
    ".af"
  ],
  "currency": [
    "AFN"
  ],
  "callingCode": [
    "93"
  ],
  "capital": "Kabul",
  "altSpellings": [
    "AF",
    "Afġānistān"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "prs": "Dari",
    "pus": "Pashto",
    "tuk": "Turkmen"
  },
  "translations": {
    "cym": {
      "official": "Islamic Republic of Afghanistan",
      "common": "Affganistan"
    },
    "deu": {
      "official": "Islamische Republik Afghanistan",
      "common": "Afghanistan"
    },
    "fra": {
      "official": "République islamique d'Afghanistan",
      "common": "Afghanistan"
    },
    "hrv": {
      "official": "Islamska Republika Afganistan",
      "common": "Afganistan"
    },
    "ita": {
      "official": "Repubblica islamica dell'Afghanistan",
      "common": "Afghanistan"
    },
    "jpn": {
      "official": "アフガニスタン·イスラム共和国",
      "common": "アフガニスタン"
    },
    "nld": {
      "official": "Islamitische Republiek Afghanistan",
      "common": "Afghanistan"
    },
    "por": {
      "official": "República Islâmica do Afeganistão",
      "common": "Afeganistão"
    },
    "rus": {
      "official": "Исламская Республика Афганистан",
      "common": "Афганистан"
    },
    "spa": {
      "official": "República Islámica de Afganistán",
      "common": "Afganistán"
    },
    "fin": {
      "official": "Afganistanin islamilainen tasavalta",
      "common": "Afganistan"
    }
  },
  "latlng": [
    33,
    65
  ],
  "demonym": "Afghan",
  "landlocked": true,
  "borders": [
    "IRN",
    "PAK",
    "TKM",
    "UZB",
    "TJK",
    "CHN"
  ],
  "area": 652230,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/9/9a/Flag_of_Afghanistan.svg",
  "codes": {
    "cca2": "AF",
    "ccn3": "004",
    "cca3": "AFG",
    "cioc": "AFG"
  },
  "provinces": [
    "Badakhshan",
    "Badghis",
    "Baghlan",
    "Balkh",
    "Bamian",
    "Farah",
    "Faryab",
    "Ghazni",
    "Ghowr",
    "Helmand",
    "Herat",
    "Jowzjan",
    "Kabol",
    "Kandahar",
    "Kapisa",
    "Konar",
    "Kondoz",
    "Laghman",
    "Lowgar",
    "Nangarhar",
    "Nimruz",
    "Oruzgan",
    "Paktia",
    "Paktika",
    "Parvan",
    "Samangan",
    "Sar-e Pol",
    "Takhar",
    "Vardak",
    "Zabol"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "AFG",
        "properties": {
          "name": "Afghanistan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                61.210817,
                35.650072
              ],
              [
                62.230651,
                35.270664
              ],
              [
                62.984662,
                35.404041
              ],
              [
                63.193538,
                35.857166
              ],
              [
                63.982896,
                36.007957
              ],
              [
                64.546479,
                36.312073
              ],
              [
                64.746105,
                37.111818
              ],
              [
                65.588948,
                37.305217
              ],
              [
                65.745631,
                37.661164
              ],
              [
                66.217385,
                37.39379
              ],
              [
                66.518607,
                37.362784
              ],
              [
                67.075782,
                37.356144
              ],
              [
                67.83,
                37.144994
              ],
              [
                68.135562,
                37.023115
              ],
              [
                68.859446,
                37.344336
              ],
              [
                69.196273,
                37.151144
              ],
              [
                69.518785,
                37.608997
              ],
              [
                70.116578,
                37.588223
              ],
              [
                70.270574,
                37.735165
              ],
              [
                70.376304,
                38.138396
              ],
              [
                70.806821,
                38.486282
              ],
              [
                71.348131,
                38.258905
              ],
              [
                71.239404,
                37.953265
              ],
              [
                71.541918,
                37.905774
              ],
              [
                71.448693,
                37.065645
              ],
              [
                71.844638,
                36.738171
              ],
              [
                72.193041,
                36.948288
              ],
              [
                72.63689,
                37.047558
              ],
              [
                73.260056,
                37.495257
              ],
              [
                73.948696,
                37.421566
              ],
              [
                74.980002,
                37.41999
              ],
              [
                75.158028,
                37.133031
              ],
              [
                74.575893,
                37.020841
              ],
              [
                74.067552,
                36.836176
              ],
              [
                72.920025,
                36.720007
              ],
              [
                71.846292,
                36.509942
              ],
              [
                71.262348,
                36.074388
              ],
              [
                71.498768,
                35.650563
              ],
              [
                71.613076,
                35.153203
              ],
              [
                71.115019,
                34.733126
              ],
              [
                71.156773,
                34.348911
              ],
              [
                70.881803,
                33.988856
              ],
              [
                69.930543,
                34.02012
              ],
              [
                70.323594,
                33.358533
              ],
              [
                69.687147,
                33.105499
              ],
              [
                69.262522,
                32.501944
              ],
              [
                69.317764,
                31.901412
              ],
              [
                68.926677,
                31.620189
              ],
              [
                68.556932,
                31.71331
              ],
              [
                67.792689,
                31.58293
              ],
              [
                67.683394,
                31.303154
              ],
              [
                66.938891,
                31.304911
              ],
              [
                66.381458,
                30.738899
              ],
              [
                66.346473,
                29.887943
              ],
              [
                65.046862,
                29.472181
              ],
              [
                64.350419,
                29.560031
              ],
              [
                64.148002,
                29.340819
              ],
              [
                63.550261,
                29.468331
              ],
              [
                62.549857,
                29.318572
              ],
              [
                60.874248,
                29.829239
              ],
              [
                61.781222,
                30.73585
              ],
              [
                61.699314,
                31.379506
              ],
              [
                60.941945,
                31.548075
              ],
              [
                60.863655,
                32.18292
              ],
              [
                60.536078,
                32.981269
              ],
              [
                60.9637,
                33.528832
              ],
              [
                60.52843,
                33.676446
              ],
              [
                60.803193,
                34.404102
              ],
              [
                61.210817,
                35.650072
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],3:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Albania",
    "official": "Republic of Albania",
    "native": {
      "sqi": {
        "official": "Republika e Shqipërisë",
        "common": "Shqipëria"
      }
    }
  },
  "tld": [
    ".al"
  ],
  "currency": [
    "ALL"
  ],
  "callingCode": [
    "355"
  ],
  "capital": "Tirana",
  "altSpellings": [
    "AL",
    "Shqipëri",
    "Shqipëria",
    "Shqipnia"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "sqi": "Albanian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Albania",
      "common": "Albania"
    },
    "deu": {
      "official": "Republik Albanien",
      "common": "Albanien"
    },
    "fra": {
      "official": "République d'Albanie",
      "common": "Albanie"
    },
    "hrv": {
      "official": "Republika Albanija",
      "common": "Albanija"
    },
    "ita": {
      "official": "Repubblica d'Albania",
      "common": "Albania"
    },
    "jpn": {
      "official": "アルバニア共和国",
      "common": "アルバニア"
    },
    "nld": {
      "official": "Republiek Albanië",
      "common": "Albanië"
    },
    "por": {
      "official": "República da Albânia",
      "common": "Albânia"
    },
    "rus": {
      "official": "Республика Албания",
      "common": "Албания"
    },
    "spa": {
      "official": "República de Albania",
      "common": "Albania"
    },
    "fin": {
      "official": "Albanian tasavalta",
      "common": "Albania"
    }
  },
  "latlng": [
    41,
    20
  ],
  "demonym": "Albanian",
  "landlocked": false,
  "borders": [
    "MNE",
    "GRC",
    "MKD",
    "KOS"
  ],
  "area": 28748,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/3/36/Flag_of_Albania.svg",
  "codes": {
    "cca2": "AL",
    "ccn3": "008",
    "cca3": "ALB",
    "cioc": "ALB"
  },
  "provinces": [
    "Berat",
    "Bulqize",
    "Delvine",
    "Devoll (Bilisht)",
    "Diber (Peshkopi)",
    "Durres",
    "Elbasan",
    "Fier",
    "Gjirokaster",
    "Gramsh",
    "Has (Krume)",
    "Kavaje",
    "Kolonje (Erseke)",
    "Korce",
    "Kruje",
    "Kucove",
    "Kukes",
    "Kurbin",
    "Lezhe",
    "Librazhd",
    "Lushnje",
    "Malesi e Madhe (Koplik)",
    "Mallakaster (Ballsh)",
    "Mat (Burrel)",
    "Mirdite (Rreshen)",
    "Peqin",
    "Permet",
    "Pogradec",
    "Puke",
    "Sarande",
    "Shkoder",
    "Skrapar (Corovode)",
    "Tepelene",
    "Tirane (Tirana)",
    "Tirane (Tirana)",
    "Tropoje (Bajram Curri)",
    "Vlore"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ALB",
        "properties": {
          "name": "Albania"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                20.590247,
                41.855404
              ],
              [
                20.463175,
                41.515089
              ],
              [
                20.605182,
                41.086226
              ],
              [
                21.02004,
                40.842727
              ],
              [
                20.99999,
                40.580004
              ],
              [
                20.674997,
                40.435
              ],
              [
                20.615,
                40.110007
              ],
              [
                20.150016,
                39.624998
              ],
              [
                19.98,
                39.694993
              ],
              [
                19.960002,
                39.915006
              ],
              [
                19.406082,
                40.250773
              ],
              [
                19.319059,
                40.72723
              ],
              [
                19.40355,
                41.409566
              ],
              [
                19.540027,
                41.719986
              ],
              [
                19.371769,
                41.877548
              ],
              [
                19.304486,
                42.195745
              ],
              [
                19.738051,
                42.688247
              ],
              [
                19.801613,
                42.500093
              ],
              [
                20.0707,
                42.58863
              ],
              [
                20.283755,
                42.32026
              ],
              [
                20.52295,
                42.21787
              ],
              [
                20.590247,
                41.855404
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],4:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Algeria",
    "official": "People's Democratic Republic of Algeria",
    "native": {
      "ara": {
        "official": "الجمهورية الديمقراطية الشعبية الجزائرية",
        "common": "الجزائر"
      }
    }
  },
  "tld": [
    ".dz",
    "الجزائر."
  ],
  "currency": [
    "DZD"
  ],
  "callingCode": [
    "213"
  ],
  "capital": "Algiers",
  "altSpellings": [
    "DZ",
    "Dzayer",
    "Algérie"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "cym": {
      "official": "People's Democratic Republic of Algeria",
      "common": "Algeria"
    },
    "deu": {
      "official": "Demokratische Volksrepublik Algerien",
      "common": "Algerien"
    },
    "fra": {
      "official": "République démocratique et populaire d'Algérie",
      "common": "Algérie"
    },
    "hrv": {
      "official": "Narodna Demokratska Republika Alžir",
      "common": "Alžir"
    },
    "ita": {
      "official": "Repubblica popolare democratica di Algeria",
      "common": "Algeria"
    },
    "jpn": {
      "official": "アルジェリア人民民主共和国",
      "common": "アルジェリア"
    },
    "nld": {
      "official": "Democratische Volksrepubliek Algerije",
      "common": "Algerije"
    },
    "por": {
      "official": "República Argelina Democrática e Popular",
      "common": "Argélia"
    },
    "rus": {
      "official": "Народно-Демократическая Республика Алжир",
      "common": "Алжир"
    },
    "spa": {
      "official": "República Argelina Democrática y Popular",
      "common": "Argelia"
    },
    "fin": {
      "official": "Algerian demokraattinen kansantasavalta",
      "common": "Algeria"
    }
  },
  "latlng": [
    28,
    3
  ],
  "demonym": "Algerian",
  "landlocked": false,
  "borders": [
    "TUN",
    "LBY",
    "NER",
    "ESH",
    "MRT",
    "MLI",
    "MAR"
  ],
  "area": 2381741,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/7/77/Flag_of_Algeria.svg",
  "codes": {
    "cca2": "DZ",
    "ccn3": "012",
    "cca3": "DZA",
    "cioc": "ALG"
  },
  "provinces": [
    "Adrar",
    "Ain Defla",
    "Ain Temouchent",
    "Alger",
    "Annaba",
    "Batna",
    "Bechar",
    "Bejaia",
    "Biskra",
    "Blida",
    "Bordj Bou Arreridj",
    "Bouira",
    "Boumerdes",
    "Chlef",
    "Constantine",
    "Djelfa",
    "El Bayadh",
    "El Oued",
    "El Tarf",
    "Ghardaia",
    "Guelma",
    "Illizi",
    "Jijel",
    "Khenchela",
    "Laghouat",
    "M'Sila",
    "Mascara",
    "Medea",
    "Mila",
    "Mostaganem",
    "Naama",
    "Oran",
    "Ouargla",
    "Oum el Bouaghi",
    "Relizane",
    "Saida",
    "Setif",
    "Sidi Bel Abbes",
    "Skikda",
    "Souk Ahras",
    "Tamanghasset",
    "Tebessa",
    "Tiaret",
    "Tindouf",
    "Tipaza",
    "Tissemsilt",
    "Tizi Ouzou",
    "Tlemcen"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "DZA",
        "properties": {
          "name": "Algeria"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                11.999506,
                23.471668
              ],
              [
                8.572893,
                21.565661
              ],
              [
                5.677566,
                19.601207
              ],
              [
                4.267419,
                19.155265
              ],
              [
                3.158133,
                19.057364
              ],
              [
                3.146661,
                19.693579
              ],
              [
                2.683588,
                19.85623
              ],
              [
                2.060991,
                20.142233
              ],
              [
                1.823228,
                20.610809
              ],
              [
                -1.550055,
                22.792666
              ],
              [
                -4.923337,
                24.974574
              ],
              [
                -8.6844,
                27.395744
              ],
              [
                -8.665124,
                27.589479
              ],
              [
                -8.66559,
                27.656426
              ],
              [
                -8.674116,
                28.841289
              ],
              [
                -7.059228,
                29.579228
              ],
              [
                -6.060632,
                29.7317
              ],
              [
                -5.242129,
                30.000443
              ],
              [
                -4.859646,
                30.501188
              ],
              [
                -3.690441,
                30.896952
              ],
              [
                -3.647498,
                31.637294
              ],
              [
                -3.06898,
                31.724498
              ],
              [
                -2.616605,
                32.094346
              ],
              [
                -1.307899,
                32.262889
              ],
              [
                -1.124551,
                32.651522
              ],
              [
                -1.388049,
                32.864015
              ],
              [
                -1.733455,
                33.919713
              ],
              [
                -1.792986,
                34.527919
              ],
              [
                -2.169914,
                35.168396
              ],
              [
                -1.208603,
                35.714849
              ],
              [
                -0.127454,
                35.888662
              ],
              [
                0.503877,
                36.301273
              ],
              [
                1.466919,
                36.605647
              ],
              [
                3.161699,
                36.783905
              ],
              [
                4.815758,
                36.865037
              ],
              [
                5.32012,
                36.716519
              ],
              [
                6.26182,
                37.110655
              ],
              [
                7.330385,
                37.118381
              ],
              [
                7.737078,
                36.885708
              ],
              [
                8.420964,
                36.946427
              ],
              [
                8.217824,
                36.433177
              ],
              [
                8.376368,
                35.479876
              ],
              [
                8.140981,
                34.655146
              ],
              [
                7.524482,
                34.097376
              ],
              [
                7.612642,
                33.344115
              ],
              [
                8.430473,
                32.748337
              ],
              [
                8.439103,
                32.506285
              ],
              [
                9.055603,
                32.102692
              ],
              [
                9.48214,
                30.307556
              ],
              [
                9.805634,
                29.424638
              ],
              [
                9.859998,
                28.95999
              ],
              [
                9.683885,
                28.144174
              ],
              [
                9.756128,
                27.688259
              ],
              [
                9.629056,
                27.140953
              ],
              [
                9.716286,
                26.512206
              ],
              [
                9.319411,
                26.094325
              ],
              [
                9.910693,
                25.365455
              ],
              [
                9.948261,
                24.936954
              ],
              [
                10.303847,
                24.379313
              ],
              [
                10.771364,
                24.562532
              ],
              [
                11.560669,
                24.097909
              ],
              [
                11.999506,
                23.471668
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],5:[function(require,module,exports){
module.exports={
  "name": {
    "common": "American Samoa",
    "official": "American Samoa",
    "native": {
      "eng": {
        "official": "American Samoa",
        "common": "American Samoa"
      },
      "smo": {
        "official": "Sāmoa Amelika",
        "common": "Sāmoa Amelika"
      }
    }
  },
  "tld": [
    ".as"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1684"
  ],
  "capital": "Pago Pago",
  "altSpellings": [
    "AS",
    "Amerika Sāmoa",
    "Amelika Sāmoa",
    "Sāmoa Amelika"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "smo": "Samoan"
  },
  "translations": {
    "deu": {
      "official": "Amerikanisch-Samoa",
      "common": "Amerikanisch-Samoa"
    },
    "fra": {
      "official": "Samoa américaines",
      "common": "Samoa américaines"
    },
    "hrv": {
      "official": "američka Samoa",
      "common": "Američka Samoa"
    },
    "ita": {
      "official": "Samoa americane",
      "common": "Samoa Americane"
    },
    "jpn": {
      "official": "米サモア",
      "common": "アメリカ領サモア"
    },
    "nld": {
      "official": "Amerikaans Samoa",
      "common": "Amerikaans Samoa"
    },
    "por": {
      "official": "Samoa americana",
      "common": "Samoa Americana"
    },
    "rus": {
      "official": "американское Самоа",
      "common": "Американское Самоа"
    },
    "spa": {
      "official": "Samoa Americana",
      "common": "Samoa Americana"
    },
    "fin": {
      "official": "Amerikan Samoa",
      "common": "Amerikan Samoa"
    }
  },
  "latlng": [
    -14.33333333,
    -170
  ],
  "demonym": "American Samoan",
  "landlocked": false,
  "borders": [],
  "area": 199,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of American Samoa.svg|125px",
  "codes": {
    "cca2": "AS",
    "ccn3": "016",
    "cca3": "ASM",
    "cioc": "ASA"
  },
  "provinces": [
    "Eastern",
    "Manu'a",
    "Rose Island",
    "Swains Island",
    "Western"
  ],
  "geoJSON": {}
}
},{}],6:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Andorra",
    "official": "Principality of Andorra",
    "native": {
      "cat": {
        "official": "Principat d'Andorra",
        "common": "Andorra"
      }
    }
  },
  "tld": [
    ".ad"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "376"
  ],
  "capital": "Andorra la Vella",
  "altSpellings": [
    "AD",
    "Principality of Andorra",
    "Principat d'Andorra"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "cat": "Catalan"
  },
  "translations": {
    "cym": {
      "official": "Principality of Andorra",
      "common": "Andorra"
    },
    "deu": {
      "official": "Fürstentum Andorra",
      "common": "Andorra"
    },
    "fra": {
      "official": "Principauté d'Andorre",
      "common": "Andorre"
    },
    "hrv": {
      "official": "Kneževina Andora",
      "common": "Andora"
    },
    "ita": {
      "official": "Principato di Andorra",
      "common": "Andorra"
    },
    "jpn": {
      "official": "アンドラ公国",
      "common": "アンドラ"
    },
    "nld": {
      "official": "Prinsdom Andorra",
      "common": "Andorra"
    },
    "por": {
      "official": "Principado de Andorra",
      "common": "Andorra"
    },
    "rus": {
      "official": "Княжество Андорра",
      "common": "Андорра"
    },
    "spa": {
      "official": "Principado de Andorra",
      "common": "Andorra"
    },
    "fin": {
      "official": "Andorran ruhtinaskunta",
      "common": "Andorra"
    }
  },
  "latlng": [
    42.5,
    1.5
  ],
  "demonym": "Andorran",
  "landlocked": true,
  "borders": [
    "FRA",
    "ESP"
  ],
  "area": 468,
  "codes": {
    "cca2": "AD",
    "ccn3": "020",
    "cca3": "AND",
    "cioc": "AND"
  }
}
},{}],7:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Angola",
    "official": "Republic of Angola",
    "native": {
      "por": {
        "official": "República de Angola",
        "common": "Angola"
      }
    }
  },
  "tld": [
    ".ao"
  ],
  "currency": [
    "AOA"
  ],
  "callingCode": [
    "244"
  ],
  "capital": "Luanda",
  "altSpellings": [
    "AO",
    "República de Angola",
    "ʁɛpublika de an'ɡɔla"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "cym": {
      "official": "Republic of Angola",
      "common": "Angola"
    },
    "deu": {
      "official": "Republik Angola",
      "common": "Angola"
    },
    "fra": {
      "official": "République d'Angola",
      "common": "Angola"
    },
    "hrv": {
      "official": "Republika Angola",
      "common": "Angola"
    },
    "ita": {
      "official": "Repubblica dell'Angola",
      "common": "Angola"
    },
    "jpn": {
      "official": "アンゴラ共和国",
      "common": "アンゴラ"
    },
    "nld": {
      "official": "Republiek Angola",
      "common": "Angola"
    },
    "por": {
      "official": "República de Angola",
      "common": "Angola"
    },
    "rus": {
      "official": "Республика Ангола",
      "common": "Ангола"
    },
    "spa": {
      "official": "República de Angola",
      "common": "Angola"
    },
    "fin": {
      "official": "Angolan tasavalta",
      "common": "Angola"
    }
  },
  "latlng": [
    -12.5,
    18.5
  ],
  "demonym": "Angolan",
  "landlocked": false,
  "borders": [
    "COG",
    "COD",
    "ZMB",
    "NAM"
  ],
  "area": 1246700,
  "codes": {
    "cca2": "AO",
    "ccn3": "024",
    "cca3": "AGO",
    "cioc": "ANG"
  },
  "provinces": [
    "Andorra la Vella",
    "Bengo",
    "Benguela",
    "Bie",
    "Cabinda",
    "Canillo",
    "Cuando Cubango",
    "Cuanza Norte",
    "Cuanza Sul",
    "Cunene",
    "Encamp",
    "Escaldes-Engordany",
    "Huambo",
    "Huila",
    "La Massana",
    "Luanda",
    "Lunda Norte",
    "Lunda Sul",
    "Malanje",
    "Moxico",
    "Namibe",
    "Ordino",
    "Sant Julia de Loria",
    "Uige",
    "Zaire"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "AGO",
        "properties": {
          "name": "Angola"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  16.326528,
                  -5.87747
                ],
                [
                  16.57318,
                  -6.622645
                ],
                [
                  16.860191,
                  -7.222298
                ],
                [
                  17.089996,
                  -7.545689
                ],
                [
                  17.47297,
                  -8.068551
                ],
                [
                  18.134222,
                  -7.987678
                ],
                [
                  18.464176,
                  -7.847014
                ],
                [
                  19.016752,
                  -7.988246
                ],
                [
                  19.166613,
                  -7.738184
                ],
                [
                  19.417502,
                  -7.155429
                ],
                [
                  20.037723,
                  -7.116361
                ],
                [
                  20.091622,
                  -6.94309
                ],
                [
                  20.601823,
                  -6.939318
                ],
                [
                  20.514748,
                  -7.299606
                ],
                [
                  21.728111,
                  -7.290872
                ],
                [
                  21.746456,
                  -7.920085
                ],
                [
                  21.949131,
                  -8.305901
                ],
                [
                  21.801801,
                  -8.908707
                ],
                [
                  21.875182,
                  -9.523708
                ],
                [
                  22.208753,
                  -9.894796
                ],
                [
                  22.155268,
                  -11.084801
                ],
                [
                  22.402798,
                  -10.993075
                ],
                [
                  22.837345,
                  -11.017622
                ],
                [
                  23.456791,
                  -10.867863
                ],
                [
                  23.912215,
                  -10.926826
                ],
                [
                  24.017894,
                  -11.237298
                ],
                [
                  23.904154,
                  -11.722282
                ],
                [
                  24.079905,
                  -12.191297
                ],
                [
                  23.930922,
                  -12.565848
                ],
                [
                  24.016137,
                  -12.911046
                ],
                [
                  21.933886,
                  -12.898437
                ],
                [
                  21.887843,
                  -16.08031
                ],
                [
                  22.562478,
                  -16.898451
                ],
                [
                  23.215048,
                  -17.523116
                ],
                [
                  21.377176,
                  -17.930636
                ],
                [
                  18.956187,
                  -17.789095
                ],
                [
                  18.263309,
                  -17.309951
                ],
                [
                  14.209707,
                  -17.353101
                ],
                [
                  14.058501,
                  -17.423381
                ],
                [
                  13.462362,
                  -16.971212
                ],
                [
                  12.814081,
                  -16.941343
                ],
                [
                  12.215461,
                  -17.111668
                ],
                [
                  11.734199,
                  -17.301889
                ],
                [
                  11.640096,
                  -16.673142
                ],
                [
                  11.778537,
                  -15.793816
                ],
                [
                  12.123581,
                  -14.878316
                ],
                [
                  12.175619,
                  -14.449144
                ],
                [
                  12.500095,
                  -13.5477
                ],
                [
                  12.738479,
                  -13.137906
                ],
                [
                  13.312914,
                  -12.48363
                ],
                [
                  13.633721,
                  -12.038645
                ],
                [
                  13.738728,
                  -11.297863
                ],
                [
                  13.686379,
                  -10.731076
                ],
                [
                  13.387328,
                  -10.373578
                ],
                [
                  13.120988,
                  -9.766897
                ],
                [
                  12.87537,
                  -9.166934
                ],
                [
                  12.929061,
                  -8.959091
                ],
                [
                  13.236433,
                  -8.562629
                ],
                [
                  12.93304,
                  -7.596539
                ],
                [
                  12.728298,
                  -6.927122
                ],
                [
                  12.227347,
                  -6.294448
                ],
                [
                  12.322432,
                  -6.100092
                ],
                [
                  12.735171,
                  -5.965682
                ],
                [
                  13.024869,
                  -5.984389
                ],
                [
                  13.375597,
                  -5.864241
                ],
                [
                  16.326528,
                  -5.87747
                ]
              ]
            ],
            [
              [
                [
                  12.436688,
                  -5.684304
                ],
                [
                  12.182337,
                  -5.789931
                ],
                [
                  11.914963,
                  -5.037987
                ],
                [
                  12.318608,
                  -4.60623
                ],
                [
                  12.62076,
                  -4.438023
                ],
                [
                  12.995517,
                  -4.781103
                ],
                [
                  12.631612,
                  -4.991271
                ],
                [
                  12.468004,
                  -5.248362
                ],
                [
                  12.436688,
                  -5.684304
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],8:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Anguilla",
    "official": "Anguilla",
    "native": {
      "eng": {
        "official": "Anguilla",
        "common": "Anguilla"
      }
    }
  },
  "tld": [
    ".ai"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1264"
  ],
  "capital": "The Valley",
  "altSpellings": [
    "AI"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "fra": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "hrv": {
      "official": "Anguilla",
      "common": "Angvila"
    },
    "ita": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "jpn": {
      "official": "アングィラ",
      "common": "アンギラ"
    },
    "nld": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "por": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "rus": {
      "official": "Ангилья",
      "common": "Ангилья"
    },
    "spa": {
      "official": "Anguila",
      "common": "Anguilla"
    },
    "fin": {
      "official": "Anguilla",
      "common": "Anguilla"
    }
  },
  "latlng": [
    18.25,
    -63.16666666
  ],
  "demonym": "Anguillian",
  "landlocked": false,
  "borders": [],
  "area": 91,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/b/b4/Flag_of_Anguilla.svg",
  "codes": {
    "cca2": "AI",
    "ccn3": "660",
    "cca3": "AIA",
    "cioc": ""
  },
  "provinces": [
    "Anguilla"
  ],
  "geoJSON": {}
}
},{}],9:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Antarctica",
    "official": "Antarctica",
    "native": []
  },
  "tld": [
    ".aq"
  ],
  "currency": [],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "AQ"
  ],
  "region": "",
  "subregion": "",
  "languages": {},
  "translations": {
    "cym": {
      "official": "Antarctica",
      "common": "Antarctica"
    },
    "deu": {
      "official": "Antarktika",
      "common": "Antarktis"
    },
    "fra": {
      "official": "Antarctique",
      "common": "Antarctique"
    },
    "hrv": {
      "official": "Antarktika",
      "common": "Antarktika"
    },
    "ita": {
      "official": "Antartide",
      "common": "Antartide"
    },
    "jpn": {
      "official": "南極大陸",
      "common": "南極"
    },
    "nld": {
      "official": "Antarctica",
      "common": "Antarctica"
    },
    "por": {
      "official": "Antártica",
      "common": "Antártida"
    },
    "rus": {
      "official": "Антарктида",
      "common": "Антарктида"
    },
    "spa": {
      "official": "Antártida",
      "common": "Antártida"
    },
    "fin": {
      "official": "Etelämanner",
      "common": "Etelämanner"
    }
  },
  "latlng": [
    -90,
    0
  ],
  "demonym": "Antarctican",
  "landlocked": false,
  "borders": [],
  "area": 14000000,
  "codes": {
    "cca2": "AQ",
    "ccn3": "010",
    "cca3": "ATA",
    "cioc": ""
  },
  "provinces": [
    "British Antarctic Territory",
    "Ross Dependency",
    "Adélie Land",
    "Peter I Island",
    "Australian Antarctic Territory",
    "Queen Maud Land",
    "Antártica",
    "Argentine Antarctica",
    "Marie Byrd Land"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ATA",
        "properties": {
          "name": "Antarctica"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -59.572095,
                  -80.040179
                ],
                [
                  -59.865849,
                  -80.549657
                ],
                [
                  -60.159656,
                  -81.000327
                ],
                [
                  -62.255393,
                  -80.863178
                ],
                [
                  -64.488125,
                  -80.921934
                ],
                [
                  -65.741666,
                  -80.588827
                ],
                [
                  -65.741666,
                  -80.549657
                ],
                [
                  -66.290031,
                  -80.255773
                ],
                [
                  -64.037688,
                  -80.294944
                ],
                [
                  -61.883246,
                  -80.39287
                ],
                [
                  -61.138976,
                  -79.981371
                ],
                [
                  -60.610119,
                  -79.628679
                ],
                [
                  -59.572095,
                  -80.040179
                ]
              ]
            ],
            [
              [
                [
                  -159.208184,
                  -79.497059
                ],
                [
                  -161.127601,
                  -79.634209
                ],
                [
                  -162.439847,
                  -79.281465
                ],
                [
                  -163.027408,
                  -78.928774
                ],
                [
                  -163.066604,
                  -78.869966
                ],
                [
                  -163.712896,
                  -78.595667
                ],
                [
                  -163.105801,
                  -78.223338
                ],
                [
                  -161.245113,
                  -78.380176
                ],
                [
                  -160.246208,
                  -78.693645
                ],
                [
                  -159.482405,
                  -79.046338
                ],
                [
                  -159.208184,
                  -79.497059
                ]
              ]
            ],
            [
              [
                [
                  -45.154758,
                  -78.04707
                ],
                [
                  -43.920828,
                  -78.478103
                ],
                [
                  -43.48995,
                  -79.08556
                ],
                [
                  -43.372438,
                  -79.516645
                ],
                [
                  -43.333267,
                  -80.026123
                ],
                [
                  -44.880537,
                  -80.339644
                ],
                [
                  -46.506174,
                  -80.594357
                ],
                [
                  -48.386421,
                  -80.829485
                ],
                [
                  -50.482107,
                  -81.025442
                ],
                [
                  -52.851988,
                  -80.966685
                ],
                [
                  -54.164259,
                  -80.633528
                ],
                [
                  -53.987991,
                  -80.222028
                ],
                [
                  -51.853134,
                  -79.94773
                ],
                [
                  -50.991326,
                  -79.614623
                ],
                [
                  -50.364595,
                  -79.183487
                ],
                [
                  -49.914131,
                  -78.811209
                ],
                [
                  -49.306959,
                  -78.458569
                ],
                [
                  -48.660616,
                  -78.047018
                ],
                [
                  -48.660616,
                  -78.047019
                ],
                [
                  -48.151396,
                  -78.04707
                ],
                [
                  -46.662857,
                  -77.831476
                ],
                [
                  -45.154758,
                  -78.04707
                ]
              ]
            ],
            [
              [
                [
                  -121.211511,
                  -73.50099
                ],
                [
                  -119.918851,
                  -73.657725
                ],
                [
                  -118.724143,
                  -73.481353
                ],
                [
                  -119.292119,
                  -73.834097
                ],
                [
                  -120.232217,
                  -74.08881
                ],
                [
                  -121.62283,
                  -74.010468
                ],
                [
                  -122.621735,
                  -73.657778
                ],
                [
                  -122.621735,
                  -73.657777
                ],
                [
                  -122.406245,
                  -73.324619
                ],
                [
                  -121.211511,
                  -73.50099
                ]
              ]
            ],
            [
              [
                [
                  -125.559566,
                  -73.481353
                ],
                [
                  -124.031882,
                  -73.873268
                ],
                [
                  -124.619469,
                  -73.834097
                ],
                [
                  -125.912181,
                  -73.736118
                ],
                [
                  -127.28313,
                  -73.461769
                ],
                [
                  -127.28313,
                  -73.461768
                ],
                [
                  -126.558472,
                  -73.246226
                ],
                [
                  -125.559566,
                  -73.481353
                ]
              ]
            ],
            [
              [
                [
                  -98.98155,
                  -71.933334
                ],
                [
                  -97.884743,
                  -72.070535
                ],
                [
                  -96.787937,
                  -71.952971
                ],
                [
                  -96.20035,
                  -72.521205
                ],
                [
                  -96.983765,
                  -72.442864
                ],
                [
                  -98.198083,
                  -72.482035
                ],
                [
                  -99.432013,
                  -72.442864
                ],
                [
                  -100.783455,
                  -72.50162
                ],
                [
                  -101.801868,
                  -72.305663
                ],
                [
                  -102.330725,
                  -71.894164
                ],
                [
                  -101.703967,
                  -71.717792
                ],
                [
                  -100.430919,
                  -71.854993
                ],
                [
                  -98.98155,
                  -71.933334
                ]
              ]
            ],
            [
              [
                [
                  -68.451346,
                  -70.955823
                ],
                [
                  -68.333834,
                  -71.406493
                ],
                [
                  -68.510128,
                  -71.798407
                ],
                [
                  -68.784297,
                  -72.170736
                ],
                [
                  -69.959471,
                  -72.307885
                ],
                [
                  -71.075889,
                  -72.503842
                ],
                [
                  -72.388134,
                  -72.484257
                ],
                [
                  -71.8985,
                  -72.092343
                ],
                [
                  -73.073622,
                  -72.229492
                ],
                [
                  -74.19004,
                  -72.366693
                ],
                [
                  -74.953895,
                  -72.072757
                ],
                [
                  -75.012625,
                  -71.661258
                ],
                [
                  -73.915819,
                  -71.269345
                ],
                [
                  -73.915819,
                  -71.269344
                ],
                [
                  -73.230331,
                  -71.15178
                ],
                [
                  -72.074717,
                  -71.190951
                ],
                [
                  -71.780962,
                  -70.681473
                ],
                [
                  -71.72218,
                  -70.309196
                ],
                [
                  -71.741791,
                  -69.505782
                ],
                [
                  -71.173815,
                  -69.035475
                ],
                [
                  -70.253252,
                  -68.87874
                ],
                [
                  -69.724447,
                  -69.251017
                ],
                [
                  -69.489422,
                  -69.623346
                ],
                [
                  -69.058518,
                  -70.074016
                ],
                [
                  -68.725541,
                  -70.505153
                ],
                [
                  -68.451346,
                  -70.955823
                ]
              ]
            ],
            [
              [
                [
                  -58.614143,
                  -64.152467
                ],
                [
                  -59.045073,
                  -64.36801
                ],
                [
                  -59.789342,
                  -64.211223
                ],
                [
                  -60.611928,
                  -64.309202
                ],
                [
                  -61.297416,
                  -64.54433
                ],
                [
                  -62.0221,
                  -64.799094
                ],
                [
                  -62.51176,
                  -65.09303
                ],
                [
                  -62.648858,
                  -65.484942
                ],
                [
                  -62.590128,
                  -65.857219
                ],
                [
                  -62.120079,
                  -66.190326
                ],
                [
                  -62.805567,
                  -66.425505
                ],
                [
                  -63.74569,
                  -66.503847
                ],
                [
                  -64.294106,
                  -66.837004
                ],
                [
                  -64.881693,
                  -67.150474
                ],
                [
                  -65.508425,
                  -67.58161
                ],
                [
                  -65.665082,
                  -67.953887
                ],
                [
                  -65.312545,
                  -68.365335
                ],
                [
                  -64.783715,
                  -68.678908
                ],
                [
                  -63.961103,
                  -68.913984
                ],
                [
                  -63.1973,
                  -69.227556
                ],
                [
                  -62.785955,
                  -69.619419
                ],
                [
                  -62.570516,
                  -69.991747
                ],
                [
                  -62.276736,
                  -70.383661
                ],
                [
                  -61.806661,
                  -70.716768
                ],
                [
                  -61.512906,
                  -71.089045
                ],
                [
                  -61.375809,
                  -72.010074
                ],
                [
                  -61.081977,
                  -72.382351
                ],
                [
                  -61.003661,
                  -72.774265
                ],
                [
                  -60.690269,
                  -73.166179
                ],
                [
                  -60.827367,
                  -73.695242
                ],
                [
                  -61.375809,
                  -74.106742
                ],
                [
                  -61.96337,
                  -74.439848
                ],
                [
                  -63.295201,
                  -74.576997
                ],
                [
                  -63.74569,
                  -74.92974
                ],
                [
                  -64.352836,
                  -75.262847
                ],
                [
                  -65.860987,
                  -75.635124
                ],
                [
                  -67.192818,
                  -75.79191
                ],
                [
                  -68.446282,
                  -76.007452
                ],
                [
                  -69.797724,
                  -76.222995
                ],
                [
                  -70.600724,
                  -76.634494
                ],
                [
                  -72.206776,
                  -76.673665
                ],
                [
                  -73.969536,
                  -76.634494
                ],
                [
                  -75.555977,
                  -76.712887
                ],
                [
                  -77.24037,
                  -76.712887
                ],
                [
                  -76.926979,
                  -77.104802
                ],
                [
                  -75.399294,
                  -77.28107
                ],
                [
                  -74.282876,
                  -77.55542
                ],
                [
                  -73.656119,
                  -77.908112
                ],
                [
                  -74.772536,
                  -78.221633
                ],
                [
                  -76.4961,
                  -78.123654
                ],
                [
                  -77.925858,
                  -78.378419
                ],
                [
                  -77.984666,
                  -78.789918
                ],
                [
                  -78.023785,
                  -79.181833
                ],
                [
                  -76.848637,
                  -79.514939
                ],
                [
                  -76.633224,
                  -79.887216
                ],
                [
                  -75.360097,
                  -80.259545
                ],
                [
                  -73.244852,
                  -80.416331
                ],
                [
                  -71.442946,
                  -80.69063
                ],
                [
                  -70.013163,
                  -81.004151
                ],
                [
                  -68.191646,
                  -81.317672
                ],
                [
                  -65.704279,
                  -81.474458
                ],
                [
                  -63.25603,
                  -81.748757
                ],
                [
                  -61.552026,
                  -82.042692
                ],
                [
                  -59.691416,
                  -82.37585
                ],
                [
                  -58.712121,
                  -82.846106
                ],
                [
                  -58.222487,
                  -83.218434
                ],
                [
                  -57.008117,
                  -82.865691
                ],
                [
                  -55.362894,
                  -82.571755
                ],
                [
                  -53.619771,
                  -82.258235
                ],
                [
                  -51.543644,
                  -82.003521
                ],
                [
                  -49.76135,
                  -81.729171
                ],
                [
                  -47.273931,
                  -81.709586
                ],
                [
                  -44.825708,
                  -81.846735
                ],
                [
                  -42.808363,
                  -82.081915
                ],
                [
                  -42.16202,
                  -81.65083
                ],
                [
                  -40.771433,
                  -81.356894
                ],
                [
                  -38.244818,
                  -81.337309
                ],
                [
                  -36.26667,
                  -81.121715
                ],
                [
                  -34.386397,
                  -80.906172
                ],
                [
                  -32.310296,
                  -80.769023
                ],
                [
                  -30.097098,
                  -80.592651
                ],
                [
                  -28.549802,
                  -80.337938
                ],
                [
                  -29.254901,
                  -79.985195
                ],
                [
                  -29.685805,
                  -79.632503
                ],
                [
                  -29.685805,
                  -79.260226
                ],
                [
                  -31.624808,
                  -79.299397
                ],
                [
                  -33.681324,
                  -79.456132
                ],
                [
                  -35.639912,
                  -79.456132
                ],
                [
                  -35.914107,
                  -79.083855
                ],
                [
                  -35.77701,
                  -78.339248
                ],
                [
                  -35.326546,
                  -78.123654
                ],
                [
                  -33.896763,
                  -77.888526
                ],
                [
                  -32.212369,
                  -77.65345
                ],
                [
                  -30.998051,
                  -77.359515
                ],
                [
                  -29.783732,
                  -77.065579
                ],
                [
                  -28.882779,
                  -76.673665
                ],
                [
                  -27.511752,
                  -76.497345
                ],
                [
                  -26.160336,
                  -76.360144
                ],
                [
                  -25.474822,
                  -76.281803
                ],
                [
                  -23.927552,
                  -76.24258
                ],
                [
                  -22.458598,
                  -76.105431
                ],
                [
                  -21.224694,
                  -75.909474
                ],
                [
                  -20.010375,
                  -75.674346
                ],
                [
                  -18.913543,
                  -75.439218
                ],
                [
                  -17.522982,
                  -75.125698
                ],
                [
                  -16.641589,
                  -74.79254
                ],
                [
                  -15.701491,
                  -74.498604
                ],
                [
                  -15.40771,
                  -74.106742
                ],
                [
                  -16.46532,
                  -73.871614
                ],
                [
                  -16.112784,
                  -73.460114
                ],
                [
                  -15.446855,
                  -73.146542
                ],
                [
                  -14.408805,
                  -72.950585
                ],
                [
                  -13.311973,
                  -72.715457
                ],
                [
                  -12.293508,
                  -72.401936
                ],
                [
                  -11.510067,
                  -72.010074
                ],
                [
                  -11.020433,
                  -71.539767
                ],
                [
                  -10.295774,
                  -71.265416
                ],
                [
                  -9.101015,
                  -71.324224
                ],
                [
                  -8.611381,
                  -71.65733
                ],
                [
                  -7.416622,
                  -71.696501
                ],
                [
                  -7.377451,
                  -71.324224
                ],
                [
                  -6.868232,
                  -70.93231
                ],
                [
                  -5.790985,
                  -71.030289
                ],
                [
                  -5.536375,
                  -71.402617
                ],
                [
                  -4.341667,
                  -71.461373
                ],
                [
                  -3.048981,
                  -71.285053
                ],
                [
                  -1.795492,
                  -71.167438
                ],
                [
                  -0.659489,
                  -71.226246
                ],
                [
                  -0.228637,
                  -71.637745
                ],
                [
                  0.868195,
                  -71.304639
                ],
                [
                  1.886686,
                  -71.128267
                ],
                [
                  3.022638,
                  -70.991118
                ],
                [
                  4.139055,
                  -70.853917
                ],
                [
                  5.157546,
                  -70.618789
                ],
                [
                  6.273912,
                  -70.462055
                ],
                [
                  7.13572,
                  -70.246512
                ],
                [
                  7.742866,
                  -69.893769
                ],
                [
                  8.48711,
                  -70.148534
                ],
                [
                  9.525135,
                  -70.011333
                ],
                [
                  10.249845,
                  -70.48164
                ],
                [
                  10.817821,
                  -70.834332
                ],
                [
                  11.953824,
                  -70.638375
                ],
                [
                  12.404287,
                  -70.246512
                ],
                [
                  13.422778,
                  -69.972162
                ],
                [
                  14.734998,
                  -70.030918
                ],
                [
                  15.126757,
                  -70.403247
                ],
                [
                  15.949342,
                  -70.030918
                ],
                [
                  17.026589,
                  -69.913354
                ],
                [
                  18.201711,
                  -69.874183
                ],
                [
                  19.259373,
                  -69.893769
                ],
                [
                  20.375739,
                  -70.011333
                ],
                [
                  21.452985,
                  -70.07014
                ],
                [
                  21.923034,
                  -70.403247
                ],
                [
                  22.569403,
                  -70.697182
                ],
                [
                  23.666184,
                  -70.520811
                ],
                [
                  24.841357,
                  -70.48164
                ],
                [
                  25.977309,
                  -70.48164
                ],
                [
                  27.093726,
                  -70.462055
                ],
                [
                  28.09258,
                  -70.324854
                ],
                [
                  29.150242,
                  -70.20729
                ],
                [
                  30.031583,
                  -69.93294
                ],
                [
                  30.971733,
                  -69.75662
                ],
                [
                  31.990172,
                  -69.658641
                ],
                [
                  32.754053,
                  -69.384291
                ],
                [
                  33.302443,
                  -68.835642
                ],
                [
                  33.870419,
                  -68.502588
                ],
                [
                  34.908495,
                  -68.659271
                ],
                [
                  35.300202,
                  -69.012014
                ],
                [
                  36.16201,
                  -69.247142
                ],
                [
                  37.200035,
                  -69.168748
                ],
                [
                  37.905108,
                  -69.52144
                ],
                [
                  38.649404,
                  -69.776205
                ],
                [
                  39.667894,
                  -69.541077
                ],
                [
                  40.020431,
                  -69.109941
                ],
                [
                  40.921358,
                  -68.933621
                ],
                [
                  41.959434,
                  -68.600514
                ],
                [
                  42.938702,
                  -68.463313
                ],
                [
                  44.113876,
                  -68.267408
                ],
                [
                  44.897291,
                  -68.051866
                ],
                [
                  45.719928,
                  -67.816738
                ],
                [
                  46.503343,
                  -67.601196
                ],
                [
                  47.44344,
                  -67.718759
                ],
                [
                  48.344419,
                  -67.366068
                ],
                [
                  48.990736,
                  -67.091718
                ],
                [
                  49.930885,
                  -67.111303
                ],
                [
                  50.753471,
                  -66.876175
                ],
                [
                  50.949325,
                  -66.523484
                ],
                [
                  51.791547,
                  -66.249133
                ],
                [
                  52.614133,
                  -66.053176
                ],
                [
                  53.613038,
                  -65.89639
                ],
                [
                  54.53355,
                  -65.818049
                ],
                [
                  55.414943,
                  -65.876805
                ],
                [
                  56.355041,
                  -65.974783
                ],
                [
                  57.158093,
                  -66.249133
                ],
                [
                  57.255968,
                  -66.680218
                ],
                [
                  58.137361,
                  -67.013324
                ],
                [
                  58.744508,
                  -67.287675
                ],
                [
                  59.939318,
                  -67.405239
                ],
                [
                  60.605221,
                  -67.679589
                ],
                [
                  61.427806,
                  -67.953887
                ],
                [
                  62.387489,
                  -68.012695
                ],
                [
                  63.19049,
                  -67.816738
                ],
                [
                  64.052349,
                  -67.405239
                ],
                [
                  64.992447,
                  -67.620729
                ],
                [
                  65.971715,
                  -67.738345
                ],
                [
                  66.911864,
                  -67.855909
                ],
                [
                  67.891133,
                  -67.934302
                ],
                [
                  68.890038,
                  -67.934302
                ],
                [
                  69.712624,
                  -68.972791
                ],
                [
                  69.673453,
                  -69.227556
                ],
                [
                  69.555941,
                  -69.678226
                ],
                [
                  68.596258,
                  -69.93294
                ],
                [
                  67.81274,
                  -70.305268
                ],
                [
                  67.949889,
                  -70.697182
                ],
                [
                  69.066307,
                  -70.677545
                ],
                [
                  68.929157,
                  -71.069459
                ],
                [
                  68.419989,
                  -71.441788
                ],
                [
                  67.949889,
                  -71.853287
                ],
                [
                  68.71377,
                  -72.166808
                ],
                [
                  69.869307,
                  -72.264787
                ],
                [
                  71.024895,
                  -72.088415
                ],
                [
                  71.573285,
                  -71.696501
                ],
                [
                  71.906288,
                  -71.324224
                ],
                [
                  72.454627,
                  -71.010703
                ],
                [
                  73.08141,
                  -70.716768
                ],
                [
                  73.33602,
                  -70.364024
                ],
                [
                  73.864877,
                  -69.874183
                ],
                [
                  74.491557,
                  -69.776205
                ],
                [
                  75.62756,
                  -69.737034
                ],
                [
                  76.626465,
                  -69.619419
                ],
                [
                  77.644904,
                  -69.462684
                ],
                [
                  78.134539,
                  -69.07077
                ],
                [
                  78.428371,
                  -68.698441
                ],
                [
                  79.113859,
                  -68.326216
                ],
                [
                  80.093127,
                  -68.071503
                ],
                [
                  80.93535,
                  -67.875546
                ],
                [
                  81.483792,
                  -67.542388
                ],
                [
                  82.051767,
                  -67.366068
                ],
                [
                  82.776426,
                  -67.209282
                ],
                [
                  83.775331,
                  -67.30726
                ],
                [
                  84.676206,
                  -67.209282
                ],
                [
                  85.655527,
                  -67.091718
                ],
                [
                  86.752359,
                  -67.150474
                ],
                [
                  87.477017,
                  -66.876175
                ],
                [
                  87.986289,
                  -66.209911
                ],
                [
                  88.358411,
                  -66.484261
                ],
                [
                  88.828408,
                  -66.954568
                ],
                [
                  89.67063,
                  -67.150474
                ],
                [
                  90.630365,
                  -67.228867
                ],
                [
                  91.5901,
                  -67.111303
                ],
                [
                  92.608539,
                  -67.189696
                ],
                [
                  93.548637,
                  -67.209282
                ],
                [
                  94.17542,
                  -67.111303
                ],
                [
                  95.017591,
                  -67.170111
                ],
                [
                  95.781472,
                  -67.385653
                ],
                [
                  96.682399,
                  -67.248504
                ],
                [
                  97.759646,
                  -67.248504
                ],
                [
                  98.68021,
                  -67.111303
                ],
                [
                  99.718182,
                  -67.248504
                ],
                [
                  100.384188,
                  -66.915346
                ],
                [
                  100.893356,
                  -66.58224
                ],
                [
                  101.578896,
                  -66.30789
                ],
                [
                  102.832411,
                  -65.563284
                ],
                [
                  103.478676,
                  -65.700485
                ],
                [
                  104.242557,
                  -65.974783
                ],
                [
                  104.90846,
                  -66.327527
                ],
                [
                  106.181561,
                  -66.934931
                ],
                [
                  107.160881,
                  -66.954568
                ],
                [
                  108.081393,
                  -66.954568
                ],
                [
                  109.15864,
                  -66.837004
                ],
                [
                  110.235835,
                  -66.699804
                ],
                [
                  111.058472,
                  -66.425505
                ],
                [
                  111.74396,
                  -66.13157
                ],
                [
                  112.860378,
                  -66.092347
                ],
                [
                  113.604673,
                  -65.876805
                ],
                [
                  114.388088,
                  -66.072762
                ],
                [
                  114.897308,
                  -66.386283
                ],
                [
                  115.602381,
                  -66.699804
                ],
                [
                  116.699161,
                  -66.660633
                ],
                [
                  117.384701,
                  -66.915346
                ],
                [
                  118.57946,
                  -67.170111
                ],
                [
                  119.832924,
                  -67.268089
                ],
                [
                  120.871,
                  -67.189696
                ],
                [
                  121.654415,
                  -66.876175
                ],
                [
                  122.320369,
                  -66.562654
                ],
                [
                  123.221296,
                  -66.484261
                ],
                [
                  124.122274,
                  -66.621462
                ],
                [
                  125.160247,
                  -66.719389
                ],
                [
                  126.100396,
                  -66.562654
                ],
                [
                  127.001427,
                  -66.562654
                ],
                [
                  127.882768,
                  -66.660633
                ],
                [
                  128.80328,
                  -66.758611
                ],
                [
                  129.704259,
                  -66.58224
                ],
                [
                  130.781454,
                  -66.425505
                ],
                [
                  131.799945,
                  -66.386283
                ],
                [
                  132.935896,
                  -66.386283
                ],
                [
                  133.85646,
                  -66.288304
                ],
                [
                  134.757387,
                  -66.209963
                ],
                [
                  135.031582,
                  -65.72007
                ],
                [
                  135.070753,
                  -65.308571
                ],
                [
                  135.697485,
                  -65.582869
                ],
                [
                  135.873805,
                  -66.033591
                ],
                [
                  136.206705,
                  -66.44509
                ],
                [
                  136.618049,
                  -66.778197
                ],
                [
                  137.460271,
                  -66.954568
                ],
                [
                  138.596223,
                  -66.895761
                ],
                [
                  139.908442,
                  -66.876175
                ],
                [
                  140.809421,
                  -66.817367
                ],
                [
                  142.121692,
                  -66.817367
                ],
                [
                  143.061842,
                  -66.797782
                ],
                [
                  144.374061,
                  -66.837004
                ],
                [
                  145.490427,
                  -66.915346
                ],
                [
                  146.195552,
                  -67.228867
                ],
                [
                  145.999699,
                  -67.601196
                ],
                [
                  146.646067,
                  -67.895131
                ],
                [
                  147.723263,
                  -68.130259
                ],
                [
                  148.839629,
                  -68.385024
                ],
                [
                  150.132314,
                  -68.561292
                ],
                [
                  151.483705,
                  -68.71813
                ],
                [
                  152.502247,
                  -68.874813
                ],
                [
                  153.638199,
                  -68.894502
                ],
                [
                  154.284567,
                  -68.561292
                ],
                [
                  155.165857,
                  -68.835642
                ],
                [
                  155.92979,
                  -69.149215
                ],
                [
                  156.811132,
                  -69.384291
                ],
                [
                  158.025528,
                  -69.482269
                ],
                [
                  159.181013,
                  -69.599833
                ],
                [
                  159.670699,
                  -69.991747
                ],
                [
                  160.80665,
                  -70.226875
                ],
                [
                  161.570479,
                  -70.579618
                ],
                [
                  162.686897,
                  -70.736353
                ],
                [
                  163.842434,
                  -70.716768
                ],
                [
                  164.919681,
                  -70.775524
                ],
                [
                  166.11444,
                  -70.755938
                ],
                [
                  167.309095,
                  -70.834332
                ],
                [
                  168.425616,
                  -70.971481
                ],
                [
                  169.463589,
                  -71.20666
                ],
                [
                  170.501665,
                  -71.402617
                ],
                [
                  171.20679,
                  -71.696501
                ],
                [
                  171.089227,
                  -72.088415
                ],
                [
                  170.560422,
                  -72.441159
                ],
                [
                  170.109958,
                  -72.891829
                ],
                [
                  169.75737,
                  -73.24452
                ],
                [
                  169.287321,
                  -73.65602
                ],
                [
                  167.975101,
                  -73.812806
                ],
                [
                  167.387489,
                  -74.165498
                ],
                [
                  166.094803,
                  -74.38104
                ],
                [
                  165.644391,
                  -74.772954
                ],
                [
                  164.958851,
                  -75.145283
                ],
                [
                  164.234193,
                  -75.458804
                ],
                [
                  163.822797,
                  -75.870303
                ],
                [
                  163.568239,
                  -76.24258
                ],
                [
                  163.47026,
                  -76.693302
                ],
                [
                  163.489897,
                  -77.065579
                ],
                [
                  164.057873,
                  -77.457442
                ],
                [
                  164.273363,
                  -77.82977
                ],
                [
                  164.743464,
                  -78.182514
                ],
                [
                  166.604126,
                  -78.319611
                ],
                [
                  166.995781,
                  -78.750748
                ],
                [
                  165.193876,
                  -78.907483
                ],
                [
                  163.666217,
                  -79.123025
                ],
                [
                  161.766385,
                  -79.162248
                ],
                [
                  160.924162,
                  -79.730482
                ],
                [
                  160.747894,
                  -80.200737
                ],
                [
                  160.316964,
                  -80.573066
                ],
                [
                  159.788211,
                  -80.945395
                ],
                [
                  161.120016,
                  -81.278501
                ],
                [
                  161.629287,
                  -81.690001
                ],
                [
                  162.490992,
                  -82.062278
                ],
                [
                  163.705336,
                  -82.395435
                ],
                [
                  165.095949,
                  -82.708956
                ],
                [
                  166.604126,
                  -83.022477
                ],
                [
                  168.895665,
                  -83.335998
                ],
                [
                  169.404782,
                  -83.825891
                ],
                [
                  172.283934,
                  -84.041433
                ],
                [
                  172.477049,
                  -84.117914
                ],
                [
                  173.224083,
                  -84.41371
                ],
                [
                  175.985672,
                  -84.158997
                ],
                [
                  178.277212,
                  -84.472518
                ],
                [
                  180,
                  -84.71338
                ],
                [
                  -179.942499,
                  -84.721443
                ],
                [
                  -179.058677,
                  -84.139412
                ],
                [
                  -177.256772,
                  -84.452933
                ],
                [
                  -177.140807,
                  -84.417941
                ],
                [
                  -176.084673,
                  -84.099259
                ],
                [
                  -175.947235,
                  -84.110449
                ],
                [
                  -175.829882,
                  -84.117914
                ],
                [
                  -174.382503,
                  -84.534323
                ],
                [
                  -173.116559,
                  -84.117914
                ],
                [
                  -172.889106,
                  -84.061019
                ],
                [
                  -169.951223,
                  -83.884647
                ],
                [
                  -168.999989,
                  -84.117914
                ],
                [
                  -168.530199,
                  -84.23739
                ],
                [
                  -167.022099,
                  -84.570497
                ],
                [
                  -164.182144,
                  -84.82521
                ],
                [
                  -161.929775,
                  -85.138731
                ],
                [
                  -158.07138,
                  -85.37391
                ],
                [
                  -155.192253,
                  -85.09956
                ],
                [
                  -150.942099,
                  -85.295517
                ],
                [
                  -148.533073,
                  -85.609038
                ],
                [
                  -145.888918,
                  -85.315102
                ],
                [
                  -143.107718,
                  -85.040752
                ],
                [
                  -142.892279,
                  -84.570497
                ],
                [
                  -146.829068,
                  -84.531274
                ],
                [
                  -150.060732,
                  -84.296146
                ],
                [
                  -150.902928,
                  -83.904232
                ],
                [
                  -153.586201,
                  -83.68869
                ],
                [
                  -153.409907,
                  -83.23802
                ],
                [
                  -153.037759,
                  -82.82652
                ],
                [
                  -152.665637,
                  -82.454192
                ],
                [
                  -152.861517,
                  -82.042692
                ],
                [
                  -154.526299,
                  -81.768394
                ],
                [
                  -155.29018,
                  -81.41565
                ],
                [
                  -156.83745,
                  -81.102129
                ],
                [
                  -154.408787,
                  -81.160937
                ],
                [
                  -152.097662,
                  -81.004151
                ],
                [
                  -150.648293,
                  -81.337309
                ],
                [
                  -148.865998,
                  -81.043373
                ],
                [
                  -147.22075,
                  -80.671045
                ],
                [
                  -146.417749,
                  -80.337938
                ],
                [
                  -146.770286,
                  -79.926439
                ],
                [
                  -148.062947,
                  -79.652089
                ],
                [
                  -149.531901,
                  -79.358205
                ],
                [
                  -151.588416,
                  -79.299397
                ],
                [
                  -153.390322,
                  -79.162248
                ],
                [
                  -155.329376,
                  -79.064269
                ],
                [
                  -155.975668,
                  -78.69194
                ],
                [
                  -157.268302,
                  -78.378419
                ],
                [
                  -158.051768,
                  -78.025676
                ],
                [
                  -158.365134,
                  -76.889207
                ],
                [
                  -157.875474,
                  -76.987238
                ],
                [
                  -156.974573,
                  -77.300759
                ],
                [
                  -155.329376,
                  -77.202728
                ],
                [
                  -153.742832,
                  -77.065579
                ],
                [
                  -152.920247,
                  -77.496664
                ],
                [
                  -151.33378,
                  -77.398737
                ],
                [
                  -150.00195,
                  -77.183143
                ],
                [
                  -148.748486,
                  -76.908845
                ],
                [
                  -147.612483,
                  -76.575738
                ],
                [
                  -146.104409,
                  -76.47776
                ],
                [
                  -146.143528,
                  -76.105431
                ],
                [
                  -146.496091,
                  -75.733154
                ],
                [
                  -146.20231,
                  -75.380411
                ],
                [
                  -144.909624,
                  -75.204039
                ],
                [
                  -144.322037,
                  -75.537197
                ],
                [
                  -142.794353,
                  -75.34124
                ],
                [
                  -141.638764,
                  -75.086475
                ],
                [
                  -140.209007,
                  -75.06689
                ],
                [
                  -138.85759,
                  -74.968911
                ],
                [
                  -137.5062,
                  -74.733783
                ],
                [
                  -136.428901,
                  -74.518241
                ],
                [
                  -135.214583,
                  -74.302699
                ],
                [
                  -134.431194,
                  -74.361455
                ],
                [
                  -133.745654,
                  -74.439848
                ],
                [
                  -132.257168,
                  -74.302699
                ],
                [
                  -130.925311,
                  -74.479019
                ],
                [
                  -129.554284,
                  -74.459433
                ],
                [
                  -128.242038,
                  -74.322284
                ],
                [
                  -126.890622,
                  -74.420263
                ],
                [
                  -125.402082,
                  -74.518241
                ],
                [
                  -124.011496,
                  -74.479019
                ],
                [
                  -122.562152,
                  -74.498604
                ],
                [
                  -121.073613,
                  -74.518241
                ],
                [
                  -119.70256,
                  -74.479019
                ],
                [
                  -118.684145,
                  -74.185083
                ],
                [
                  -117.469801,
                  -74.028348
                ],
                [
                  -116.216312,
                  -74.243891
                ],
                [
                  -115.021552,
                  -74.067519
                ],
                [
                  -113.944331,
                  -73.714828
                ],
                [
                  -113.297988,
                  -74.028348
                ],
                [
                  -112.945452,
                  -74.38104
                ],
                [
                  -112.299083,
                  -74.714198
                ],
                [
                  -111.261059,
                  -74.420263
                ],
                [
                  -110.066325,
                  -74.79254
                ],
                [
                  -108.714909,
                  -74.910103
                ],
                [
                  -107.559346,
                  -75.184454
                ],
                [
                  -106.149148,
                  -75.125698
                ],
                [
                  -104.876074,
                  -74.949326
                ],
                [
                  -103.367949,
                  -74.988497
                ],
                [
                  -102.016507,
                  -75.125698
                ],
                [
                  -100.645531,
                  -75.302018
                ],
                [
                  -100.1167,
                  -74.870933
                ],
                [
                  -100.763043,
                  -74.537826
                ],
                [
                  -101.252703,
                  -74.185083
                ],
                [
                  -102.545337,
                  -74.106742
                ],
                [
                  -103.113313,
                  -73.734413
                ],
                [
                  -103.328752,
                  -73.362084
                ],
                [
                  -103.681289,
                  -72.61753
                ],
                [
                  -102.917485,
                  -72.754679
                ],
                [
                  -101.60524,
                  -72.813436
                ],
                [
                  -100.312528,
                  -72.754679
                ],
                [
                  -99.13738,
                  -72.911414
                ],
                [
                  -98.118889,
                  -73.20535
                ],
                [
                  -97.688037,
                  -73.558041
                ],
                [
                  -96.336595,
                  -73.616849
                ],
                [
                  -95.043961,
                  -73.4797
                ],
                [
                  -93.672907,
                  -73.283743
                ],
                [
                  -92.439003,
                  -73.166179
                ],
                [
                  -91.420564,
                  -73.401307
                ],
                [
                  -90.088733,
                  -73.322914
                ],
                [
                  -89.226951,
                  -72.558722
                ],
                [
                  -88.423951,
                  -73.009393
                ],
                [
                  -87.268337,
                  -73.185764
                ],
                [
                  -86.014822,
                  -73.087786
                ],
                [
                  -85.192236,
                  -73.4797
                ],
                [
                  -83.879991,
                  -73.518871
                ],
                [
                  -82.665646,
                  -73.636434
                ],
                [
                  -81.470913,
                  -73.851977
                ],
                [
                  -80.687447,
                  -73.4797
                ],
                [
                  -80.295791,
                  -73.126956
                ],
                [
                  -79.296886,
                  -73.518871
                ],
                [
                  -77.925858,
                  -73.420892
                ],
                [
                  -76.907367,
                  -73.636434
                ],
                [
                  -76.221879,
                  -73.969541
                ],
                [
                  -74.890049,
                  -73.871614
                ],
                [
                  -73.852024,
                  -73.65602
                ],
                [
                  -72.833533,
                  -73.401307
                ],
                [
                  -71.619215,
                  -73.264157
                ],
                [
                  -70.209042,
                  -73.146542
                ],
                [
                  -68.935916,
                  -73.009393
                ],
                [
                  -67.956622,
                  -72.79385
                ],
                [
                  -67.369061,
                  -72.480329
                ],
                [
                  -67.134036,
                  -72.049244
                ],
                [
                  -67.251548,
                  -71.637745
                ],
                [
                  -67.56494,
                  -71.245831
                ],
                [
                  -67.917477,
                  -70.853917
                ],
                [
                  -68.230843,
                  -70.462055
                ],
                [
                  -68.485452,
                  -70.109311
                ],
                [
                  -68.544209,
                  -69.717397
                ],
                [
                  -68.446282,
                  -69.325535
                ],
                [
                  -67.976233,
                  -68.953206
                ],
                [
                  -67.5845,
                  -68.541707
                ],
                [
                  -67.427843,
                  -68.149844
                ],
                [
                  -67.62367,
                  -67.718759
                ],
                [
                  -67.741183,
                  -67.326845
                ],
                [
                  -67.251548,
                  -66.876175
                ],
                [
                  -66.703184,
                  -66.58224
                ],
                [
                  -66.056815,
                  -66.209963
                ],
                [
                  -65.371327,
                  -65.89639
                ],
                [
                  -64.568276,
                  -65.602506
                ],
                [
                  -64.176542,
                  -65.171423
                ],
                [
                  -63.628152,
                  -64.897073
                ],
                [
                  -63.001394,
                  -64.642308
                ],
                [
                  -62.041686,
                  -64.583552
                ],
                [
                  -61.414928,
                  -64.270031
                ],
                [
                  -60.709855,
                  -64.074074
                ],
                [
                  -59.887269,
                  -63.95651
                ],
                [
                  -59.162585,
                  -63.701745
                ],
                [
                  -58.594557,
                  -63.388224
                ],
                [
                  -57.811143,
                  -63.27066
                ],
                [
                  -57.223582,
                  -63.525425
                ],
                [
                  -57.59573,
                  -63.858532
                ],
                [
                  -58.614143,
                  -64.152467
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],10:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Antigua and Barbuda",
    "official": "Antigua and Barbuda",
    "native": {
      "eng": {
        "official": "Antigua and Barbuda",
        "common": "Antigua and Barbuda"
      }
    }
  },
  "tld": [
    ".ag"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1268"
  ],
  "capital": "Saint John's",
  "altSpellings": [
    "AG"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Antigua and Barbuda",
      "common": "Antigwa a Barbiwda"
    },
    "deu": {
      "official": "Antigua und Barbuda",
      "common": "Antigua und Barbuda"
    },
    "fra": {
      "official": "Antigua -et-Barbuda",
      "common": "Antigua-et-Barbuda"
    },
    "hrv": {
      "official": "Antigva i Barbuda",
      "common": "Antigva i Barbuda"
    },
    "ita": {
      "official": "Antigua e Barbuda",
      "common": "Antigua e Barbuda"
    },
    "jpn": {
      "official": "アンチグアバーブーダ",
      "common": "アンティグア・バーブーダ"
    },
    "nld": {
      "official": "Antigua en Barbuda",
      "common": "Antigua en Barbuda"
    },
    "por": {
      "official": "Antigua e Barbuda",
      "common": "Antígua e Barbuda"
    },
    "rus": {
      "official": "Антигуа и Барбуда",
      "common": "Антигуа и Барбуда"
    },
    "spa": {
      "official": "Antigua y Barbuda",
      "common": "Antigua y Barbuda"
    },
    "fin": {
      "official": "Antigua ja Barbuda",
      "common": "Antigua ja Barbuda"
    }
  },
  "latlng": [
    17.05,
    -61.8
  ],
  "demonym": "Antiguan, Barbudan",
  "landlocked": false,
  "borders": [],
  "area": 442,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/8/89/Flag_of_Antigua_and_Barbuda.svg",
  "codes": {
    "cca2": "AG",
    "ccn3": "028",
    "cca3": "ATG",
    "cioc": "ANT"
  },
  "provinces": [
    "Barbuda",
    "Redonda",
    "Saint George",
    "Saint John",
    "Saint Mary",
    "Saint Paul",
    "Saint Peter",
    "Saint Philip"
  ],
  "geoJSON": {}
}
},{}],11:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Argentina",
    "official": "Argentine Republic",
    "native": {
      "grn": {
        "official": "Argentine Republic",
        "common": "Argentina"
      },
      "spa": {
        "official": "República Argentina",
        "common": "Argentina"
      }
    }
  },
  "tld": [
    ".ar"
  ],
  "currency": [
    "ARS"
  ],
  "callingCode": [
    "54"
  ],
  "capital": "Buenos Aires",
  "altSpellings": [
    "AR",
    "Argentine Republic",
    "República Argentina"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "grn": "Guaraní",
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Argentine Republic",
      "common": "Ariannin"
    },
    "deu": {
      "official": "Argentinische Republik",
      "common": "Argentinien"
    },
    "fra": {
      "official": "République argentine",
      "common": "Argentine"
    },
    "hrv": {
      "official": "Argentinski Republika",
      "common": "Argentina"
    },
    "ita": {
      "official": "Repubblica Argentina",
      "common": "Argentina"
    },
    "jpn": {
      "official": "アルゼンチン共和国",
      "common": "アルゼンチン"
    },
    "nld": {
      "official": "Argentijnse Republiek",
      "common": "Argentinië"
    },
    "por": {
      "official": "República Argentina",
      "common": "Argentina"
    },
    "rus": {
      "official": "Аргентинская Республика",
      "common": "Аргентина"
    },
    "spa": {
      "official": "República Argentina",
      "common": "Argentina"
    },
    "fin": {
      "official": "Argentiinan tasavalta",
      "common": "Argentiina"
    }
  },
  "latlng": [
    -34,
    -64
  ],
  "demonym": "Argentinean",
  "landlocked": false,
  "borders": [
    "BOL",
    "BRA",
    "CHL",
    "PRY",
    "URY"
  ],
  "area": 2780400,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/1/1a/Flag_of_Argentina.svg",
  "codes": {
    "cca2": "AR",
    "ccn3": "032",
    "cca3": "ARG",
    "cioc": "ARG"
  },
  "provinces": [
    "Antartica e Islas del Atlantico Sur",
    "Buenos Aires",
    "Buenos Aires Capital Federal",
    "Catamarca",
    "Chaco",
    "Chubut",
    "Cordoba",
    "Corrientes",
    "Entre Rios",
    "Formosa",
    "Jujuy",
    "La Pampa",
    "La Rioja",
    "Mendoza",
    "Misiones",
    "Neuquen",
    "Rio Negro",
    "Salta",
    "San Juan",
    "San Luis",
    "Santa Cruz",
    "Santa Fe",
    "Santiago del Estero",
    "Tierra del Fuego",
    "Tucuman"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ARG",
        "properties": {
          "name": "Argentina"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -65.5,
                  -55.2
                ],
                [
                  -66.45,
                  -55.25
                ],
                [
                  -66.95992,
                  -54.89681
                ],
                [
                  -67.56244,
                  -54.87001
                ],
                [
                  -68.63335,
                  -54.8695
                ],
                [
                  -68.63401,
                  -52.63637
                ],
                [
                  -68.25,
                  -53.1
                ],
                [
                  -67.75,
                  -53.85
                ],
                [
                  -66.45,
                  -54.45
                ],
                [
                  -65.05,
                  -54.7
                ],
                [
                  -65.5,
                  -55.2
                ]
              ]
            ],
            [
              [
                [
                  -64.964892,
                  -22.075862
                ],
                [
                  -64.377021,
                  -22.798091
                ],
                [
                  -63.986838,
                  -21.993644
                ],
                [
                  -62.846468,
                  -22.034985
                ],
                [
                  -62.685057,
                  -22.249029
                ],
                [
                  -60.846565,
                  -23.880713
                ],
                [
                  -60.028966,
                  -24.032796
                ],
                [
                  -58.807128,
                  -24.771459
                ],
                [
                  -57.777217,
                  -25.16234
                ],
                [
                  -57.63366,
                  -25.603657
                ],
                [
                  -58.618174,
                  -27.123719
                ],
                [
                  -57.60976,
                  -27.395899
                ],
                [
                  -56.486702,
                  -27.548499
                ],
                [
                  -55.695846,
                  -27.387837
                ],
                [
                  -54.788795,
                  -26.621786
                ],
                [
                  -54.625291,
                  -25.739255
                ],
                [
                  -54.13005,
                  -25.547639
                ],
                [
                  -53.628349,
                  -26.124865
                ],
                [
                  -53.648735,
                  -26.923473
                ],
                [
                  -54.490725,
                  -27.474757
                ],
                [
                  -55.162286,
                  -27.881915
                ],
                [
                  -56.2909,
                  -28.852761
                ],
                [
                  -57.625133,
                  -30.216295
                ],
                [
                  -57.874937,
                  -31.016556
                ],
                [
                  -58.14244,
                  -32.044504
                ],
                [
                  -58.132648,
                  -33.040567
                ],
                [
                  -58.349611,
                  -33.263189
                ],
                [
                  -58.427074,
                  -33.909454
                ],
                [
                  -58.495442,
                  -34.43149
                ],
                [
                  -57.22583,
                  -35.288027
                ],
                [
                  -57.362359,
                  -35.97739
                ],
                [
                  -56.737487,
                  -36.413126
                ],
                [
                  -56.788285,
                  -36.901572
                ],
                [
                  -57.749157,
                  -38.183871
                ],
                [
                  -59.231857,
                  -38.72022
                ],
                [
                  -61.237445,
                  -38.928425
                ],
                [
                  -62.335957,
                  -38.827707
                ],
                [
                  -62.125763,
                  -39.424105
                ],
                [
                  -62.330531,
                  -40.172586
                ],
                [
                  -62.145994,
                  -40.676897
                ],
                [
                  -62.745803,
                  -41.028761
                ],
                [
                  -63.770495,
                  -41.166789
                ],
                [
                  -64.73209,
                  -40.802677
                ],
                [
                  -65.118035,
                  -41.064315
                ],
                [
                  -64.978561,
                  -42.058001
                ],
                [
                  -64.303408,
                  -42.359016
                ],
                [
                  -63.755948,
                  -42.043687
                ],
                [
                  -63.458059,
                  -42.563138
                ],
                [
                  -64.378804,
                  -42.873558
                ],
                [
                  -65.181804,
                  -43.495381
                ],
                [
                  -65.328823,
                  -44.501366
                ],
                [
                  -65.565269,
                  -45.036786
                ],
                [
                  -66.509966,
                  -45.039628
                ],
                [
                  -67.293794,
                  -45.551896
                ],
                [
                  -67.580546,
                  -46.301773
                ],
                [
                  -66.597066,
                  -47.033925
                ],
                [
                  -65.641027,
                  -47.236135
                ],
                [
                  -65.985088,
                  -48.133289
                ],
                [
                  -67.166179,
                  -48.697337
                ],
                [
                  -67.816088,
                  -49.869669
                ],
                [
                  -68.728745,
                  -50.264218
                ],
                [
                  -69.138539,
                  -50.73251
                ],
                [
                  -68.815561,
                  -51.771104
                ],
                [
                  -68.149995,
                  -52.349983
                ],
                [
                  -68.571545,
                  -52.299444
                ],
                [
                  -69.498362,
                  -52.142761
                ],
                [
                  -71.914804,
                  -52.009022
                ],
                [
                  -72.329404,
                  -51.425956
                ],
                [
                  -72.309974,
                  -50.67701
                ],
                [
                  -72.975747,
                  -50.74145
                ],
                [
                  -73.328051,
                  -50.378785
                ],
                [
                  -73.415436,
                  -49.318436
                ],
                [
                  -72.648247,
                  -48.878618
                ],
                [
                  -72.331161,
                  -48.244238
                ],
                [
                  -72.447355,
                  -47.738533
                ],
                [
                  -71.917258,
                  -46.884838
                ],
                [
                  -71.552009,
                  -45.560733
                ],
                [
                  -71.659316,
                  -44.973689
                ],
                [
                  -71.222779,
                  -44.784243
                ],
                [
                  -71.329801,
                  -44.407522
                ],
                [
                  -71.793623,
                  -44.207172
                ],
                [
                  -71.464056,
                  -43.787611
                ],
                [
                  -71.915424,
                  -43.408565
                ],
                [
                  -72.148898,
                  -42.254888
                ],
                [
                  -71.746804,
                  -42.051386
                ],
                [
                  -71.915734,
                  -40.832339
                ],
                [
                  -71.680761,
                  -39.808164
                ],
                [
                  -71.413517,
                  -38.916022
                ],
                [
                  -70.814664,
                  -38.552995
                ],
                [
                  -71.118625,
                  -37.576827
                ],
                [
                  -71.121881,
                  -36.658124
                ],
                [
                  -70.364769,
                  -36.005089
                ],
                [
                  -70.388049,
                  -35.169688
                ],
                [
                  -69.817309,
                  -34.193571
                ],
                [
                  -69.814777,
                  -33.273886
                ],
                [
                  -70.074399,
                  -33.09121
                ],
                [
                  -70.535069,
                  -31.36501
                ],
                [
                  -69.919008,
                  -30.336339
                ],
                [
                  -70.01355,
                  -29.367923
                ],
                [
                  -69.65613,
                  -28.459141
                ],
                [
                  -69.001235,
                  -27.521214
                ],
                [
                  -68.295542,
                  -26.89934
                ],
                [
                  -68.5948,
                  -26.506909
                ],
                [
                  -68.386001,
                  -26.185016
                ],
                [
                  -68.417653,
                  -24.518555
                ],
                [
                  -67.328443,
                  -24.025303
                ],
                [
                  -66.985234,
                  -22.986349
                ],
                [
                  -67.106674,
                  -22.735925
                ],
                [
                  -66.273339,
                  -21.83231
                ],
                [
                  -64.964892,
                  -22.075862
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],12:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Armenia",
    "official": "Republic of Armenia",
    "native": {
      "hye": {
        "official": "Հայաստանի Հանրապետություն",
        "common": "Հայաստան"
      },
      "rus": {
        "official": "Республика Армения",
        "common": "Армения"
      }
    }
  },
  "tld": [
    ".am"
  ],
  "currency": [
    "AMD"
  ],
  "callingCode": [
    "374"
  ],
  "capital": "Yerevan",
  "altSpellings": [
    "AM",
    "Hayastan",
    "Republic of Armenia",
    "Հայաստանի Հանրապետություն"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "hye": "Armenian",
    "rus": "Russian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Armenia",
      "common": "Armenia"
    },
    "deu": {
      "official": "Republik Armenien",
      "common": "Armenien"
    },
    "fra": {
      "official": "République d'Arménie",
      "common": "Arménie"
    },
    "hrv": {
      "official": "Republika Armenija",
      "common": "Armenija"
    },
    "ita": {
      "official": "Repubblica di Armenia",
      "common": "Armenia"
    },
    "jpn": {
      "official": "アルメニア共和国",
      "common": "アルメニア"
    },
    "nld": {
      "official": "Republiek Armenië",
      "common": "Armenië"
    },
    "por": {
      "official": "República da Arménia",
      "common": "Arménia"
    },
    "rus": {
      "official": "Республика Армения",
      "common": "Армения"
    },
    "spa": {
      "official": "República de Armenia",
      "common": "Armenia"
    },
    "fin": {
      "official": "Armenian tasavalta",
      "common": "Armenia"
    }
  },
  "latlng": [
    40,
    45
  ],
  "demonym": "Armenian",
  "landlocked": true,
  "borders": [
    "AZE",
    "GEO",
    "IRN",
    "TUR"
  ],
  "area": 29743,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/2/2f/Flag_of_Armenia.svg",
  "codes": {
    "cca2": "AM",
    "ccn3": "051",
    "cca3": "ARM",
    "cioc": "ARM"
  },
  "provinces": [
    "Aragatsotn",
    "Ararat",
    "Armavir",
    "Geghark'unik'",
    "Kotayk'",
    "Lorri",
    "Shirak",
    "Syunik'",
    "Tavush",
    "Vayots' Dzor",
    "Yerevan"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ARM",
        "properties": {
          "name": "Armenia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                43.582746,
                41.092143
              ],
              [
                44.97248,
                41.248129
              ],
              [
                45.179496,
                40.985354
              ],
              [
                45.560351,
                40.81229
              ],
              [
                45.359175,
                40.561504
              ],
              [
                45.891907,
                40.218476
              ],
              [
                45.610012,
                39.899994
              ],
              [
                46.034534,
                39.628021
              ],
              [
                46.483499,
                39.464155
              ],
              [
                46.50572,
                38.770605
              ],
              [
                46.143623,
                38.741201
              ],
              [
                45.735379,
                39.319719
              ],
              [
                45.739978,
                39.473999
              ],
              [
                45.298145,
                39.471751
              ],
              [
                45.001987,
                39.740004
              ],
              [
                44.79399,
                39.713003
              ],
              [
                44.400009,
                40.005
              ],
              [
                43.656436,
                40.253564
              ],
              [
                43.752658,
                40.740201
              ],
              [
                43.582746,
                41.092143
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],13:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Aruba",
    "official": "Aruba",
    "native": {
      "nld": {
        "official": "Aruba",
        "common": "Aruba"
      },
      "pap": {
        "official": "Aruba",
        "common": "Aruba"
      }
    }
  },
  "tld": [
    ".aw"
  ],
  "currency": [
    "AWG"
  ],
  "callingCode": [
    "297"
  ],
  "capital": "Oranjestad",
  "altSpellings": [
    "AW"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "nld": "Dutch",
    "pap": "Papiamento"
  },
  "translations": {
    "deu": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "fra": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "hrv": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "ita": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "jpn": {
      "official": "アルバ",
      "common": "アルバ"
    },
    "nld": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "por": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "rus": {
      "official": "Аруба",
      "common": "Аруба"
    },
    "spa": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "fin": {
      "official": "Aruba",
      "common": "Aruba"
    }
  },
  "latlng": [
    12.5,
    -69.96666666
  ],
  "demonym": "Aruban",
  "landlocked": false,
  "borders": [],
  "area": 180,
  "codes": {
    "cca2": "AW",
    "ccn3": "533",
    "cca3": "ABW",
    "cioc": "ARU"
  },
  "provinces": [
    "Aruba"
  ],
  "geoJSON": {},
  "flag": "http://upload.wikimedia.org/wikipedia/commons/f/f6/Flag_of_Aruba.svg"
}
},{}],14:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Australia",
    "official": "Commonwealth of Australia",
    "native": {
      "eng": {
        "official": "Commonwealth of Australia",
        "common": "Australia"
      }
    }
  },
  "tld": [
    ".au"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "61"
  ],
  "capital": "Canberra",
  "altSpellings": [
    "AU"
  ],
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Commonwealth of Australia",
      "common": "Awstralia"
    },
    "deu": {
      "official": "Commonwealth Australien",
      "common": "Australien"
    },
    "fra": {
      "official": "Australie",
      "common": "Australie"
    },
    "hrv": {
      "official": "Commonwealth of Australia",
      "common": "Australija"
    },
    "ita": {
      "official": "Commonwealth dell'Australia",
      "common": "Australia"
    },
    "jpn": {
      "official": "オーストラリア連邦",
      "common": "オーストラリア"
    },
    "nld": {
      "official": "Gemenebest van Australië",
      "common": "Australië"
    },
    "por": {
      "official": "Comunidade da Austrália",
      "common": "Austrália"
    },
    "rus": {
      "official": "Содружество Австралии",
      "common": "Австралия"
    },
    "spa": {
      "official": "Mancomunidad de Australia",
      "common": "Australia"
    },
    "fin": {
      "official": "Australian liittovaltio",
      "common": "Australia"
    }
  },
  "latlng": [
    -27,
    133
  ],
  "demonym": "Australian",
  "landlocked": false,
  "borders": [],
  "area": 7692024,
  "codes": {
    "cca2": "AU",
    "ccn3": "036",
    "cca3": "AUS",
    "cioc": "AUS"
  },
  "provinces": [
    "Australian Capital Territory",
    "New South Wales",
    "Northern Territory",
    "Queensland",
    "South Australia",
    "Tasmania",
    "Victoria",
    "Western Australia"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "AUS",
        "properties": {
          "name": "Australia"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  145.397978,
                  -40.792549
                ],
                [
                  146.364121,
                  -41.137695
                ],
                [
                  146.908584,
                  -41.000546
                ],
                [
                  147.689259,
                  -40.808258
                ],
                [
                  148.289068,
                  -40.875438
                ],
                [
                  148.359865,
                  -42.062445
                ],
                [
                  148.017301,
                  -42.407024
                ],
                [
                  147.914052,
                  -43.211522
                ],
                [
                  147.564564,
                  -42.937689
                ],
                [
                  146.870343,
                  -43.634597
                ],
                [
                  146.663327,
                  -43.580854
                ],
                [
                  146.048378,
                  -43.549745
                ],
                [
                  145.43193,
                  -42.693776
                ],
                [
                  145.29509,
                  -42.03361
                ],
                [
                  144.718071,
                  -41.162552
                ],
                [
                  144.743755,
                  -40.703975
                ],
                [
                  145.397978,
                  -40.792549
                ]
              ]
            ],
            [
              [
                [
                  143.561811,
                  -13.763656
                ],
                [
                  143.922099,
                  -14.548311
                ],
                [
                  144.563714,
                  -14.171176
                ],
                [
                  144.894908,
                  -14.594458
                ],
                [
                  145.374724,
                  -14.984976
                ],
                [
                  145.271991,
                  -15.428205
                ],
                [
                  145.48526,
                  -16.285672
                ],
                [
                  145.637033,
                  -16.784918
                ],
                [
                  145.888904,
                  -16.906926
                ],
                [
                  146.160309,
                  -17.761655
                ],
                [
                  146.063674,
                  -18.280073
                ],
                [
                  146.387478,
                  -18.958274
                ],
                [
                  147.471082,
                  -19.480723
                ],
                [
                  148.177602,
                  -19.955939
                ],
                [
                  148.848414,
                  -20.39121
                ],
                [
                  148.717465,
                  -20.633469
                ],
                [
                  149.28942,
                  -21.260511
                ],
                [
                  149.678337,
                  -22.342512
                ],
                [
                  150.077382,
                  -22.122784
                ],
                [
                  150.482939,
                  -22.556142
                ],
                [
                  150.727265,
                  -22.402405
                ],
                [
                  150.899554,
                  -23.462237
                ],
                [
                  151.609175,
                  -24.076256
                ],
                [
                  152.07354,
                  -24.457887
                ],
                [
                  152.855197,
                  -25.267501
                ],
                [
                  153.136162,
                  -26.071173
                ],
                [
                  153.161949,
                  -26.641319
                ],
                [
                  153.092909,
                  -27.2603
                ],
                [
                  153.569469,
                  -28.110067
                ],
                [
                  153.512108,
                  -28.995077
                ],
                [
                  153.339095,
                  -29.458202
                ],
                [
                  153.069241,
                  -30.35024
                ],
                [
                  153.089602,
                  -30.923642
                ],
                [
                  152.891578,
                  -31.640446
                ],
                [
                  152.450002,
                  -32.550003
                ],
                [
                  151.709117,
                  -33.041342
                ],
                [
                  151.343972,
                  -33.816023
                ],
                [
                  151.010555,
                  -34.31036
                ],
                [
                  150.714139,
                  -35.17346
                ],
                [
                  150.32822,
                  -35.671879
                ],
                [
                  150.075212,
                  -36.420206
                ],
                [
                  149.946124,
                  -37.109052
                ],
                [
                  149.997284,
                  -37.425261
                ],
                [
                  149.423882,
                  -37.772681
                ],
                [
                  148.304622,
                  -37.809061
                ],
                [
                  147.381733,
                  -38.219217
                ],
                [
                  146.922123,
                  -38.606532
                ],
                [
                  146.317922,
                  -39.035757
                ],
                [
                  145.489652,
                  -38.593768
                ],
                [
                  144.876976,
                  -38.417448
                ],
                [
                  145.032212,
                  -37.896188
                ],
                [
                  144.485682,
                  -38.085324
                ],
                [
                  143.609974,
                  -38.809465
                ],
                [
                  142.745427,
                  -38.538268
                ],
                [
                  142.17833,
                  -38.380034
                ],
                [
                  141.606582,
                  -38.308514
                ],
                [
                  140.638579,
                  -38.019333
                ],
                [
                  139.992158,
                  -37.402936
                ],
                [
                  139.806588,
                  -36.643603
                ],
                [
                  139.574148,
                  -36.138362
                ],
                [
                  139.082808,
                  -35.732754
                ],
                [
                  138.120748,
                  -35.612296
                ],
                [
                  138.449462,
                  -35.127261
                ],
                [
                  138.207564,
                  -34.384723
                ],
                [
                  137.71917,
                  -35.076825
                ],
                [
                  136.829406,
                  -35.260535
                ],
                [
                  137.352371,
                  -34.707339
                ],
                [
                  137.503886,
                  -34.130268
                ],
                [
                  137.890116,
                  -33.640479
                ],
                [
                  137.810328,
                  -32.900007
                ],
                [
                  136.996837,
                  -33.752771
                ],
                [
                  136.372069,
                  -34.094766
                ],
                [
                  135.989043,
                  -34.890118
                ],
                [
                  135.208213,
                  -34.47867
                ],
                [
                  135.239218,
                  -33.947953
                ],
                [
                  134.613417,
                  -33.222778
                ],
                [
                  134.085904,
                  -32.848072
                ],
                [
                  134.273903,
                  -32.617234
                ],
                [
                  132.990777,
                  -32.011224
                ],
                [
                  132.288081,
                  -31.982647
                ],
                [
                  131.326331,
                  -31.495803
                ],
                [
                  129.535794,
                  -31.590423
                ],
                [
                  128.240938,
                  -31.948489
                ],
                [
                  127.102867,
                  -32.282267
                ],
                [
                  126.148714,
                  -32.215966
                ],
                [
                  125.088623,
                  -32.728751
                ],
                [
                  124.221648,
                  -32.959487
                ],
                [
                  124.028947,
                  -33.483847
                ],
                [
                  123.659667,
                  -33.890179
                ],
                [
                  122.811036,
                  -33.914467
                ],
                [
                  122.183064,
                  -34.003402
                ],
                [
                  121.299191,
                  -33.821036
                ],
                [
                  120.580268,
                  -33.930177
                ],
                [
                  119.893695,
                  -33.976065
                ],
                [
                  119.298899,
                  -34.509366
                ],
                [
                  119.007341,
                  -34.464149
                ],
                [
                  118.505718,
                  -34.746819
                ],
                [
                  118.024972,
                  -35.064733
                ],
                [
                  117.295507,
                  -35.025459
                ],
                [
                  116.625109,
                  -35.025097
                ],
                [
                  115.564347,
                  -34.386428
                ],
                [
                  115.026809,
                  -34.196517
                ],
                [
                  115.048616,
                  -33.623425
                ],
                [
                  115.545123,
                  -33.487258
                ],
                [
                  115.714674,
                  -33.259572
                ],
                [
                  115.679379,
                  -32.900369
                ],
                [
                  115.801645,
                  -32.205062
                ],
                [
                  115.689611,
                  -31.612437
                ],
                [
                  115.160909,
                  -30.601594
                ],
                [
                  114.997043,
                  -30.030725
                ],
                [
                  115.040038,
                  -29.461095
                ],
                [
                  114.641974,
                  -28.810231
                ],
                [
                  114.616498,
                  -28.516399
                ],
                [
                  114.173579,
                  -28.118077
                ],
                [
                  114.048884,
                  -27.334765
                ],
                [
                  113.477498,
                  -26.543134
                ],
                [
                  113.338953,
                  -26.116545
                ],
                [
                  113.778358,
                  -26.549025
                ],
                [
                  113.440962,
                  -25.621278
                ],
                [
                  113.936901,
                  -25.911235
                ],
                [
                  114.232852,
                  -26.298446
                ],
                [
                  114.216161,
                  -25.786281
                ],
                [
                  113.721255,
                  -24.998939
                ],
                [
                  113.625344,
                  -24.683971
                ],
                [
                  113.393523,
                  -24.384764
                ],
                [
                  113.502044,
                  -23.80635
                ],
                [
                  113.706993,
                  -23.560215
                ],
                [
                  113.843418,
                  -23.059987
                ],
                [
                  113.736552,
                  -22.475475
                ],
                [
                  114.149756,
                  -21.755881
                ],
                [
                  114.225307,
                  -22.517488
                ],
                [
                  114.647762,
                  -21.82952
                ],
                [
                  115.460167,
                  -21.495173
                ],
                [
                  115.947373,
                  -21.068688
                ],
                [
                  116.711615,
                  -20.701682
                ],
                [
                  117.166316,
                  -20.623599
                ],
                [
                  117.441545,
                  -20.746899
                ],
                [
                  118.229559,
                  -20.374208
                ],
                [
                  118.836085,
                  -20.263311
                ],
                [
                  118.987807,
                  -20.044203
                ],
                [
                  119.252494,
                  -19.952942
                ],
                [
                  119.805225,
                  -19.976506
                ],
                [
                  120.85622,
                  -19.683708
                ],
                [
                  121.399856,
                  -19.239756
                ],
                [
                  121.655138,
                  -18.705318
                ],
                [
                  122.241665,
                  -18.197649
                ],
                [
                  122.286624,
                  -17.798603
                ],
                [
                  122.312772,
                  -17.254967
                ],
                [
                  123.012574,
                  -16.4052
                ],
                [
                  123.433789,
                  -17.268558
                ],
                [
                  123.859345,
                  -17.069035
                ],
                [
                  123.503242,
                  -16.596506
                ],
                [
                  123.817073,
                  -16.111316
                ],
                [
                  124.258287,
                  -16.327944
                ],
                [
                  124.379726,
                  -15.56706
                ],
                [
                  124.926153,
                  -15.0751
                ],
                [
                  125.167275,
                  -14.680396
                ],
                [
                  125.670087,
                  -14.51007
                ],
                [
                  125.685796,
                  -14.230656
                ],
                [
                  126.125149,
                  -14.347341
                ],
                [
                  126.142823,
                  -14.095987
                ],
                [
                  126.582589,
                  -13.952791
                ],
                [
                  127.065867,
                  -13.817968
                ],
                [
                  127.804633,
                  -14.276906
                ],
                [
                  128.35969,
                  -14.86917
                ],
                [
                  128.985543,
                  -14.875991
                ],
                [
                  129.621473,
                  -14.969784
                ],
                [
                  129.4096,
                  -14.42067
                ],
                [
                  129.888641,
                  -13.618703
                ],
                [
                  130.339466,
                  -13.357376
                ],
                [
                  130.183506,
                  -13.10752
                ],
                [
                  130.617795,
                  -12.536392
                ],
                [
                  131.223495,
                  -12.183649
                ],
                [
                  131.735091,
                  -12.302453
                ],
                [
                  132.575298,
                  -12.114041
                ],
                [
                  132.557212,
                  -11.603012
                ],
                [
                  131.824698,
                  -11.273782
                ],
                [
                  132.357224,
                  -11.128519
                ],
                [
                  133.019561,
                  -11.376411
                ],
                [
                  133.550846,
                  -11.786515
                ],
                [
                  134.393068,
                  -12.042365
                ],
                [
                  134.678632,
                  -11.941183
                ],
                [
                  135.298491,
                  -12.248606
                ],
                [
                  135.882693,
                  -11.962267
                ],
                [
                  136.258381,
                  -12.049342
                ],
                [
                  136.492475,
                  -11.857209
                ],
                [
                  136.95162,
                  -12.351959
                ],
                [
                  136.685125,
                  -12.887223
                ],
                [
                  136.305407,
                  -13.29123
                ],
                [
                  135.961758,
                  -13.324509
                ],
                [
                  136.077617,
                  -13.724278
                ],
                [
                  135.783836,
                  -14.223989
                ],
                [
                  135.428664,
                  -14.715432
                ],
                [
                  135.500184,
                  -14.997741
                ],
                [
                  136.295175,
                  -15.550265
                ],
                [
                  137.06536,
                  -15.870762
                ],
                [
                  137.580471,
                  -16.215082
                ],
                [
                  138.303217,
                  -16.807604
                ],
                [
                  138.585164,
                  -16.806622
                ],
                [
                  139.108543,
                  -17.062679
                ],
                [
                  139.260575,
                  -17.371601
                ],
                [
                  140.215245,
                  -17.710805
                ],
                [
                  140.875463,
                  -17.369069
                ],
                [
                  141.07111,
                  -16.832047
                ],
                [
                  141.274095,
                  -16.38887
                ],
                [
                  141.398222,
                  -15.840532
                ],
                [
                  141.702183,
                  -15.044921
                ],
                [
                  141.56338,
                  -14.561333
                ],
                [
                  141.63552,
                  -14.270395
                ],
                [
                  141.519869,
                  -13.698078
                ],
                [
                  141.65092,
                  -12.944688
                ],
                [
                  141.842691,
                  -12.741548
                ],
                [
                  141.68699,
                  -12.407614
                ],
                [
                  141.928629,
                  -11.877466
                ],
                [
                  142.118488,
                  -11.328042
                ],
                [
                  142.143706,
                  -11.042737
                ],
                [
                  142.51526,
                  -10.668186
                ],
                [
                  142.79731,
                  -11.157355
                ],
                [
                  142.866763,
                  -11.784707
                ],
                [
                  143.115947,
                  -11.90563
                ],
                [
                  143.158632,
                  -12.325656
                ],
                [
                  143.522124,
                  -12.834358
                ],
                [
                  143.597158,
                  -13.400422
                ],
                [
                  143.561811,
                  -13.763656
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": "http://upload.wikimedia.org/wikipedia/commons/8/88/Flag_of_Australia_%28converted%29.svg"
}
},{}],15:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Austria",
    "official": "Republic of Austria",
    "native": {
      "bar": {
        "official": "Republik Österreich",
        "common": "Österreich"
      }
    }
  },
  "tld": [
    ".at"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "43"
  ],
  "capital": "Vienna",
  "altSpellings": [
    "AT",
    "Osterreich",
    "Oesterreich"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "bar": "Austro-Bavarian German"
  },
  "translations": {
    "cym": {
      "official": "Republic of Austria",
      "common": "Awstria"
    },
    "deu": {
      "official": "Republik Österreich",
      "common": "Österreich"
    },
    "fra": {
      "official": "République d'Autriche",
      "common": "Autriche"
    },
    "hrv": {
      "official": "Republika Austrija",
      "common": "Austrija"
    },
    "ita": {
      "official": "Repubblica d'Austria",
      "common": "Austria"
    },
    "jpn": {
      "official": "オーストリア共和国",
      "common": "オーストリア"
    },
    "nld": {
      "official": "Republiek Oostenrijk",
      "common": "Oostenrijk"
    },
    "por": {
      "official": "República da Áustria",
      "common": "Áustria"
    },
    "rus": {
      "official": "Австрийская Республика",
      "common": "Австрия"
    },
    "spa": {
      "official": "República de Austria",
      "common": "Austria"
    },
    "fin": {
      "official": "Itävallan tasavalta",
      "common": "Itävalta"
    }
  },
  "latlng": [
    47.33333333,
    13.33333333
  ],
  "demonym": "Austrian",
  "landlocked": true,
  "borders": [
    "CZE",
    "DEU",
    "HUN",
    "ITA",
    "LIE",
    "SVK",
    "SVN",
    "CHE"
  ],
  "area": 83871,
  "codes": {
    "cca2": "AT",
    "ccn3": "040",
    "cca3": "AUT",
    "cioc": "AUT"
  },
  "provinces": [
    "Burgenland",
    "Kaernten",
    "Niederoesterreich",
    "Oberoesterreich",
    "Salzburg",
    "Steiermark",
    "Tirol",
    "Vorarlberg",
    "Wien"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "AUT",
        "properties": {
          "name": "Austria"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                16.979667,
                48.123497
              ],
              [
                16.903754,
                47.714866
              ],
              [
                16.340584,
                47.712902
              ],
              [
                16.534268,
                47.496171
              ],
              [
                16.202298,
                46.852386
              ],
              [
                16.011664,
                46.683611
              ],
              [
                15.137092,
                46.658703
              ],
              [
                14.632472,
                46.431817
              ],
              [
                13.806475,
                46.509306
              ],
              [
                12.376485,
                46.767559
              ],
              [
                12.153088,
                47.115393
              ],
              [
                11.164828,
                46.941579
              ],
              [
                11.048556,
                46.751359
              ],
              [
                10.442701,
                46.893546
              ],
              [
                9.932448,
                46.920728
              ],
              [
                9.47997,
                47.10281
              ],
              [
                9.632932,
                47.347601
              ],
              [
                9.594226,
                47.525058
              ],
              [
                9.896068,
                47.580197
              ],
              [
                10.402084,
                47.302488
              ],
              [
                10.544504,
                47.566399
              ],
              [
                11.426414,
                47.523766
              ],
              [
                12.141357,
                47.703083
              ],
              [
                12.62076,
                47.672388
              ],
              [
                12.932627,
                47.467646
              ],
              [
                13.025851,
                47.637584
              ],
              [
                12.884103,
                48.289146
              ],
              [
                13.243357,
                48.416115
              ],
              [
                13.595946,
                48.877172
              ],
              [
                14.338898,
                48.555305
              ],
              [
                14.901447,
                48.964402
              ],
              [
                15.253416,
                49.039074
              ],
              [
                16.029647,
                48.733899
              ],
              [
                16.499283,
                48.785808
              ],
              [
                16.960288,
                48.596982
              ],
              [
                16.879983,
                48.470013
              ],
              [
                16.979667,
                48.123497
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": "http://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg"
}
},{}],16:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Azerbaijan",
    "official": "Republic of Azerbaijan",
    "native": {
      "aze": {
        "official": "Azərbaycan Respublikası",
        "common": "Azərbaycan"
      },
      "rus": {
        "official": "Азербайджанская Республика",
        "common": "Азербайджан"
      }
    }
  },
  "tld": [
    ".az"
  ],
  "currency": [
    "AZN"
  ],
  "callingCode": [
    "994"
  ],
  "capital": "Baku",
  "altSpellings": [
    "AZ",
    "Republic of Azerbaijan",
    "Azərbaycan Respublikası"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "aze": "Azerbaijani",
    "rus": "Russian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Azerbaijan",
      "common": "Aserbaijan"
    },
    "deu": {
      "official": "Republik Aserbaidschan",
      "common": "Aserbaidschan"
    },
    "fra": {
      "official": "République d'Azerbaïdjan",
      "common": "Azerbaïdjan"
    },
    "hrv": {
      "official": "Republika Azerbajdžan",
      "common": "Azerbajdžan"
    },
    "ita": {
      "official": "Repubblica dell'Azerbaigian",
      "common": "Azerbaijan"
    },
    "jpn": {
      "official": "アゼルバイジャン共和国",
      "common": "アゼルバイジャン"
    },
    "nld": {
      "official": "Republiek Azerbeidzjan",
      "common": "Azerbeidzjan"
    },
    "por": {
      "official": "República do Azerbaijão",
      "common": "Azerbeijão"
    },
    "rus": {
      "official": "Азербайджанская Республика",
      "common": "Азербайджан"
    },
    "spa": {
      "official": "República de Azerbaiyán",
      "common": "Azerbaiyán"
    },
    "fin": {
      "official": "Azerbaidzanin tasavalta",
      "common": "Azerbaidzan"
    }
  },
  "latlng": [
    40.5,
    47.5
  ],
  "demonym": "Azerbaijani",
  "landlocked": true,
  "borders": [
    "ARM",
    "GEO",
    "IRN",
    "RUS",
    "TUR"
  ],
  "area": 86600,
  "flag": "http://upload.wikimedia.org/wikipedia/commons/d/dd/Flag_of_Azerbaijan.svg",
  "codes": {
    "cca2": "AZ",
    "ccn3": "031",
    "cca3": "AZE",
    "cioc": "AZE"
  },
  "provinces": [
    "Abseron Rayonu",
    "Agcabadi Rayonu",
    "Agdam Rayonu",
    "Agdas Rayonu",
    "Agstafa Rayonu",
    "Agsu Rayonu",
    "Ali Bayramli Sahari",
    "Astara Rayonu",
    "Baki Sahari",
    "Balakan Rayonu",
    "Barda Rayonu",
    "Beylaqan Rayonu",
    "Bilasuvar Rayonu",
    "Cabrayil Rayonu",
    "Calilabad Rayonu",
    "Daskasan Rayonu",
    "Davaci Rayonu",
    "Fuzuli Rayonu",
    "Gadabay Rayonu",
    "Ganca Sahari",
    "Goranboy Rayonu",
    "Goycay Rayonu",
    "Haciqabul Rayonu",
    "Imisli Rayonu",
    "Ismayilli Rayonu",
    "Kalbacar Rayonu",
    "Kurdamir Rayonu",
    "Lacin Rayonu",
    "Lankaran Rayonu",
    "Lankaran Sahari",
    "Lerik Rayonu",
    "Masalli Rayonu",
    "Mingacevir Sahari",
    "Naftalan Sahari",
    "Naxcivan Muxtar Respublikasi",
    "Neftcala Rayonu",
    "Oguz Rayonu",
    "Qabala Rayonu",
    "Qax Rayonu",
    "Qazax Rayonu",
    "Qobustan Rayonu",
    "Quba Rayonu",
    "Qubadli Rayonu",
    "Qusar Rayonu",
    "Saatli Rayonu",
    "Sabirabad Rayonu",
    "Saki Rayonu",
    "Saki Sahari",
    "Salyan Rayonu",
    "Samaxi Rayonu",
    "Samkir Rayonu",
    "Samux Rayonu",
    "Siyazan Rayonu",
    "Sumqayit Sahari",
    "Susa Rayonu",
    "Susa Sahari",
    "Tartar Rayonu",
    "Tovuz Rayonu",
    "Ucar Rayonu",
    "Xacmaz Rayonu",
    "Xankandi Sahari",
    "Xanlar Rayonu",
    "Xizi Rayonu",
    "Xocali Rayonu",
    "Xocavand Rayonu",
    "Yardimli Rayonu",
    "Yevlax Rayonu",
    "Yevlax Sahari",
    "Zangilan Rayonu",
    "Zaqatala Rayonu",
    "Zardab Rayonu"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "AZE",
        "properties": {
          "name": "Azerbaijan"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  45.001987,
                  39.740004
                ],
                [
                  45.298145,
                  39.471751
                ],
                [
                  45.739978,
                  39.473999
                ],
                [
                  45.735379,
                  39.319719
                ],
                [
                  46.143623,
                  38.741201
                ],
                [
                  45.457722,
                  38.874139
                ],
                [
                  44.952688,
                  39.335765
                ],
                [
                  44.79399,
                  39.713003
                ],
                [
                  45.001987,
                  39.740004
                ]
              ]
            ],
            [
              [
                [
                  47.373315,
                  41.219732
                ],
                [
                  47.815666,
                  41.151416
                ],
                [
                  47.987283,
                  41.405819
                ],
                [
                  48.584353,
                  41.80887
                ],
                [
                  49.110264,
                  41.282287
                ],
                [
                  49.618915,
                  40.572924
                ],
                [
                  50.08483,
                  40.526157
                ],
                [
                  50.392821,
                  40.256561
                ],
                [
                  49.569202,
                  40.176101
                ],
                [
                  49.395259,
                  39.399482
                ],
                [
                  49.223228,
                  39.049219
                ],
                [
                  48.856532,
                  38.815486
                ],
                [
                  48.883249,
                  38.320245
                ],
                [
                  48.634375,
                  38.270378
                ],
                [
                  48.010744,
                  38.794015
                ],
                [
                  48.355529,
                  39.288765
                ],
                [
                  48.060095,
                  39.582235
                ],
                [
                  47.685079,
                  39.508364
                ],
                [
                  46.50572,
                  38.770605
                ],
                [
                  46.483499,
                  39.464155
                ],
                [
                  46.034534,
                  39.628021
                ],
                [
                  45.610012,
                  39.899994
                ],
                [
                  45.891907,
                  40.218476
                ],
                [
                  45.359175,
                  40.561504
                ],
                [
                  45.560351,
                  40.81229
                ],
                [
                  45.179496,
                  40.985354
                ],
                [
                  44.97248,
                  41.248129
                ],
                [
                  45.217426,
                  41.411452
                ],
                [
                  45.962601,
                  41.123873
                ],
                [
                  46.501637,
                  41.064445
                ],
                [
                  46.637908,
                  41.181673
                ],
                [
                  46.145432,
                  41.722802
                ],
                [
                  46.404951,
                  41.860675
                ],
                [
                  46.686071,
                  41.827137
                ],
                [
                  47.373315,
                  41.219732
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],17:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bahamas",
    "official": "Commonwealth of the Bahamas",
    "native": {
      "eng": {
        "official": "Commonwealth of the Bahamas",
        "common": "Bahamas"
      }
    }
  },
  "tld": [
    ".bs"
  ],
  "currency": [
    "BSD"
  ],
  "callingCode": [
    "1242"
  ],
  "capital": "Nassau",
  "altSpellings": [
    "BS",
    "Commonwealth of the Bahamas"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Commonwealth of the Bahamas",
      "common": "Bahamas"
    },
    "deu": {
      "official": "Commonwealth der Bahamas",
      "common": "Bahamas"
    },
    "fra": {
      "official": "Commonwealth des Bahamas",
      "common": "Bahamas"
    },
    "hrv": {
      "official": "Zajednica Bahama",
      "common": "Bahami"
    },
    "ita": {
      "official": "Commonwealth delle Bahamas",
      "common": "Bahamas"
    },
    "jpn": {
      "official": "バハマ",
      "common": "バハマ"
    },
    "nld": {
      "official": "Gemenebest van de Bahama's",
      "common": "Bahama’s"
    },
    "por": {
      "official": "Comunidade das Bahamas",
      "common": "Bahamas"
    },
    "rus": {
      "official": "Содружество Багамских Островов",
      "common": "Багамские Острова"
    },
    "spa": {
      "official": "Commonwealth de las Bahamas",
      "common": "Bahamas"
    },
    "fin": {
      "official": "Bahaman liittovaltio",
      "common": "Bahamasaaret"
    }
  },
  "latlng": [
    24.25,
    -76
  ],
  "demonym": "Bahamian",
  "landlocked": false,
  "borders": [],
  "area": 13943,
  "codes": {
    "cca2": "BS",
    "ccn3": "044",
    "cca3": "BHS",
    "cioc": "BAH"
  },
  "provinces": [
    "Acklins and Crooked Islands",
    "Bimini",
    "Cat Island",
    "Exuma",
    "Freeport",
    "Fresh Creek",
    "Governor's Harbour",
    "Green Turtle Cay",
    "Harbour Island",
    "High Rock",
    "Inagua",
    "Kemps Bay",
    "Long Island",
    "Marsh Harbour",
    "Mayaguana",
    "New Providence",
    "Nicholls Town and Berry Islands",
    "Ragged Island",
    "Rock Sound",
    "San Salvador and Rum Cay",
    "Sandy Point"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BHS",
        "properties": {
          "name": "The Bahamas"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -77.53466,
                  23.75975
                ],
                [
                  -77.78,
                  23.71
                ],
                [
                  -78.03405,
                  24.28615
                ],
                [
                  -78.40848,
                  24.57564
                ],
                [
                  -78.19087,
                  25.2103
                ],
                [
                  -77.89,
                  25.17
                ],
                [
                  -77.54,
                  24.34
                ],
                [
                  -77.53466,
                  23.75975
                ]
              ]
            ],
            [
              [
                [
                  -77.82,
                  26.58
                ],
                [
                  -78.91,
                  26.42
                ],
                [
                  -78.98,
                  26.79
                ],
                [
                  -78.51,
                  26.87
                ],
                [
                  -77.85,
                  26.84
                ],
                [
                  -77.82,
                  26.58
                ]
              ]
            ],
            [
              [
                [
                  -77,
                  26.59
                ],
                [
                  -77.17255,
                  25.87918
                ],
                [
                  -77.35641,
                  26.00735
                ],
                [
                  -77.34,
                  26.53
                ],
                [
                  -77.78802,
                  26.92516
                ],
                [
                  -77.79,
                  27.04
                ],
                [
                  -77,
                  26.59
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],18:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bahrain",
    "official": "Kingdom of Bahrain",
    "native": {
      "ara": {
        "official": "مملكة البحرين",
        "common": "‏البحرين"
      }
    }
  },
  "tld": [
    ".bh"
  ],
  "currency": [
    "BHD"
  ],
  "callingCode": [
    "973"
  ],
  "capital": "Manama",
  "altSpellings": [
    "BH",
    "Kingdom of Bahrain",
    "Mamlakat al-Baḥrayn"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "cym": {
      "official": "Kingdom of Bahrain",
      "common": "Bahrain"
    },
    "deu": {
      "official": "Königreich Bahrain",
      "common": "Bahrain"
    },
    "fra": {
      "official": "Royaume de Bahreïn",
      "common": "Bahreïn"
    },
    "hrv": {
      "official": "Kraljevina Bahrein",
      "common": "Bahrein"
    },
    "ita": {
      "official": "Regno del Bahrain",
      "common": "Bahrein"
    },
    "jpn": {
      "official": "バーレーン王国",
      "common": "バーレーン"
    },
    "nld": {
      "official": "Koninkrijk Bahrein",
      "common": "Bahrein"
    },
    "por": {
      "official": "Reino do Bahrein",
      "common": "Bahrein"
    },
    "rus": {
      "official": "Королевство Бахрейн",
      "common": "Бахрейн"
    },
    "spa": {
      "official": "Reino de Bahrein",
      "common": "Bahrein"
    },
    "fin": {
      "official": "Bahrainin kuningaskunta",
      "common": "Bahrain"
    }
  },
  "latlng": [
    26,
    50.55
  ],
  "demonym": "Bahraini",
  "landlocked": false,
  "borders": [],
  "area": 765,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bahrain.svg",
  "codes": {
    "cca2": "BH",
    "ccn3": "048",
    "cca3": "BHR",
    "cioc": "BRN"
  },
  "provinces": [
    "Al Hadd",
    "Al Manamah",
    "Al Mintaqah al Gharbiyah",
    "Al Mintaqah al Wusta",
    "Al Mintaqah ash Shamaliyah",
    "Al Muharraq",
    "Ar Rifa' wa al Mintaqah al Janubiyah",
    "Jidd Hafs",
    "Juzur Hawar",
    "Madinat 'Isa",
    "Madinat Hamad",
    "Sitrah"
  ],
  "geoJSON": {}
}
},{}],19:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bangladesh",
    "official": "People's Republic of Bangladesh",
    "native": {
      "ben": {
        "official": "বাংলাদেশ গণপ্রজাতন্ত্রী",
        "common": "বাংলাদেশ"
      }
    }
  },
  "tld": [
    ".bd"
  ],
  "currency": [
    "BDT"
  ],
  "callingCode": [
    "880"
  ],
  "capital": "Dhaka",
  "altSpellings": [
    "BD",
    "People's Republic of Bangladesh",
    "Gônôprôjatôntri Bangladesh"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "ben": "Bengali"
  },
  "translations": {
    "cym": {
      "official": "People's Republic of Bangladesh",
      "common": "Bangladesh"
    },
    "deu": {
      "official": "Volksrepublik Bangladesch",
      "common": "Bangladesch"
    },
    "fra": {
      "official": "La République populaire du Bangladesh",
      "common": "Bangladesh"
    },
    "hrv": {
      "official": "Narodna Republika Bangladeš",
      "common": "Bangladeš"
    },
    "ita": {
      "official": "Repubblica popolare del Bangladesh",
      "common": "Bangladesh"
    },
    "jpn": {
      "official": "バングラデシュ人民共和国",
      "common": "バングラデシュ"
    },
    "nld": {
      "official": "Volksrepubliek Bangladesh",
      "common": "Bangladesh"
    },
    "por": {
      "official": "República Popular do Bangladesh",
      "common": "Bangladesh"
    },
    "rus": {
      "official": "Народная Республика Бангладеш",
      "common": "Бангладеш"
    },
    "spa": {
      "official": "República Popular de Bangladesh",
      "common": "Bangladesh"
    },
    "fin": {
      "official": "Bangladeshin kansantasavalta",
      "common": "Bangladesh"
    }
  },
  "latlng": [
    24,
    90
  ],
  "demonym": "Bangladeshi",
  "landlocked": false,
  "borders": [
    "MMR",
    "IND"
  ],
  "area": 147570,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bangladesh.svg",
  "codes": {
    "cca2": "BD",
    "ccn3": "050",
    "cca3": "BGD",
    "cioc": "BAN"
  },
  "provinces": [
    "Barguna",
    "Barisal",
    "Bhola",
    "Jhalokati",
    "Patuakhali",
    "Pirojpur",
    "Bandarban",
    "Brahmanbaria",
    "Chandpur",
    "Chittagong",
    "Comilla",
    "Cox's Bazar",
    "Feni",
    "Khagrachari",
    "Lakshmipur",
    "Noakhali",
    "Rangamati",
    "Dhaka",
    "Faridpur",
    "Gazipur",
    "Gopalganj",
    "Jamalpur",
    "Kishoreganj",
    "Madaripur",
    "Manikganj",
    "Munshiganj",
    "Mymensingh",
    "Narayanganj",
    "Narsingdi",
    "Netrokona",
    "Rajbari",
    "Shariatpur",
    "Sherpur",
    "Tangail",
    "Bagerhat",
    "Chuadanga",
    "Jessore",
    "Jhenaidah",
    "Khulna",
    "Kushtia",
    "Magura",
    "Meherpur",
    "Narail",
    "Satkhira",
    "Bogra",
    "Dinajpur",
    "Gaibandha",
    "Jaipurhat",
    "Kurigram",
    "Lalmonirhat",
    "Naogaon",
    "Natore",
    "Nawabganj",
    "Nilphamari",
    "Pabna",
    "Panchagarh",
    "Rajshahi",
    "Rangpur",
    "Sirajganj",
    "Thakurgaon",
    "Habiganj",
    "Maulvi bazar",
    "Sunamganj",
    "Sylhet"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BGD",
        "properties": {
          "name": "Bangladesh"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                92.672721,
                22.041239
              ],
              [
                92.652257,
                21.324048
              ],
              [
                92.303234,
                21.475485
              ],
              [
                92.368554,
                20.670883
              ],
              [
                92.082886,
                21.192195
              ],
              [
                92.025215,
                21.70157
              ],
              [
                91.834891,
                22.182936
              ],
              [
                91.417087,
                22.765019
              ],
              [
                90.496006,
                22.805017
              ],
              [
                90.586957,
                22.392794
              ],
              [
                90.272971,
                21.836368
              ],
              [
                89.847467,
                22.039146
              ],
              [
                89.70205,
                21.857116
              ],
              [
                89.418863,
                21.966179
              ],
              [
                89.031961,
                22.055708
              ],
              [
                88.876312,
                22.879146
              ],
              [
                88.52977,
                23.631142
              ],
              [
                88.69994,
                24.233715
              ],
              [
                88.084422,
                24.501657
              ],
              [
                88.306373,
                24.866079
              ],
              [
                88.931554,
                25.238692
              ],
              [
                88.209789,
                25.768066
              ],
              [
                88.563049,
                26.446526
              ],
              [
                89.355094,
                26.014407
              ],
              [
                89.832481,
                25.965082
              ],
              [
                89.920693,
                25.26975
              ],
              [
                90.872211,
                25.132601
              ],
              [
                91.799596,
                25.147432
              ],
              [
                92.376202,
                24.976693
              ],
              [
                91.915093,
                24.130414
              ],
              [
                91.46773,
                24.072639
              ],
              [
                91.158963,
                23.503527
              ],
              [
                91.706475,
                22.985264
              ],
              [
                91.869928,
                23.624346
              ],
              [
                92.146035,
                23.627499
              ],
              [
                92.672721,
                22.041239
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],20:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Barbados",
    "official": "Barbados",
    "native": {
      "eng": {
        "official": "Barbados",
        "common": "Barbados"
      }
    }
  },
  "tld": [
    ".bb"
  ],
  "currency": [
    "BBD"
  ],
  "callingCode": [
    "1246"
  ],
  "capital": "Bridgetown",
  "altSpellings": [
    "BB"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "deu": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "fra": {
      "official": "Barbade",
      "common": "Barbade"
    },
    "hrv": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "ita": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "jpn": {
      "official": "バルバドス",
      "common": "バルバドス"
    },
    "nld": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "por": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "rus": {
      "official": "Барбадос",
      "common": "Барбадос"
    },
    "spa": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "fin": {
      "official": "Barbados",
      "common": "Barbados"
    }
  },
  "latlng": [
    13.16666666,
    -59.53333333
  ],
  "demonym": "Barbadian",
  "landlocked": false,
  "borders": [],
  "area": 430,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Barbados.svg",
  "codes": {
    "cca2": "BB",
    "ccn3": "052",
    "cca3": "BRB",
    "cioc": "BAR"
  },
  "provinces": [
    "Bridgetown",
    "Christ Church",
    "Saint Andrew",
    "Saint George",
    "Saint James",
    "Saint John",
    "Saint Joseph",
    "Saint Lucy",
    "Saint Michael",
    "Saint Peter",
    "Saint Philip",
    "Saint Thomas"
  ],
  "geoJSON": {}
}
},{}],21:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Belarus",
    "official": "Republic of Belarus",
    "native": {
      "bel": {
        "official": "Рэспубліка Беларусь",
        "common": "Белару́сь"
      },
      "rus": {
        "official": "Республика Беларусь",
        "common": "Белоруссия"
      }
    }
  },
  "tld": [
    ".by"
  ],
  "currency": [
    "BYR"
  ],
  "callingCode": [
    "375"
  ],
  "capital": "Minsk",
  "altSpellings": [
    "BY",
    "Bielaruś",
    "Republic of Belarus",
    "Белоруссия",
    "Республика Беларусь",
    "Belorussiya",
    "Respublika Belarus’"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "bel": "Belarusian",
    "rus": "Russian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Belarus",
      "common": "Belarws"
    },
    "deu": {
      "official": "Republik Belarus",
      "common": "Weißrussland"
    },
    "fra": {
      "official": "République de Biélorussie",
      "common": "Biélorussie"
    },
    "hrv": {
      "official": "Republika Bjelorusija",
      "common": "Bjelorusija"
    },
    "ita": {
      "official": "Repubblica di Belarus",
      "common": "Bielorussia"
    },
    "jpn": {
      "official": "ベラルーシ共和国",
      "common": "ベラルーシ"
    },
    "nld": {
      "official": "Republiek Belarus",
      "common": "Wit-Rusland"
    },
    "por": {
      "official": "República da Bielorrússia",
      "common": "Bielorússia"
    },
    "rus": {
      "official": "Республика Беларусь",
      "common": "Белоруссия"
    },
    "spa": {
      "official": "República de Belarús",
      "common": "Bielorrusia"
    },
    "fin": {
      "official": "Valko-Venäjän tasavalta",
      "common": "Valko-Venäjä"
    }
  },
  "latlng": [
    53,
    28
  ],
  "demonym": "Belarusian",
  "landlocked": true,
  "borders": [
    "LVA",
    "LTU",
    "POL",
    "RUS",
    "UKR"
  ],
  "area": 207600,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Belarus.svg",
  "codes": {
    "cca2": "BY",
    "ccn3": "112",
    "cca3": "BLR",
    "cioc": "BLR"
  },
  "provinces": [
    "Brestskaya (Brest)",
    "Homyel'skaya (Homyel')",
    "Horad Minsk",
    "Hrodzyenskaya (Hrodna)",
    "Mahilyowskaya (Mahilyow)",
    "Minskaya",
    "Vitsyebskaya (Vitsyebsk)"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BLR",
        "properties": {
          "name": "Belarus"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                23.484128,
                53.912498
              ],
              [
                24.450684,
                53.905702
              ],
              [
                25.536354,
                54.282423
              ],
              [
                25.768433,
                54.846963
              ],
              [
                26.588279,
                55.167176
              ],
              [
                26.494331,
                55.615107
              ],
              [
                27.10246,
                55.783314
              ],
              [
                28.176709,
                56.16913
              ],
              [
                29.229513,
                55.918344
              ],
              [
                29.371572,
                55.670091
              ],
              [
                29.896294,
                55.789463
              ],
              [
                30.873909,
                55.550976
              ],
              [
                30.971836,
                55.081548
              ],
              [
                30.757534,
                54.811771
              ],
              [
                31.384472,
                54.157056
              ],
              [
                31.791424,
                53.974639
              ],
              [
                31.731273,
                53.794029
              ],
              [
                32.405599,
                53.618045
              ],
              [
                32.693643,
                53.351421
              ],
              [
                32.304519,
                53.132726
              ],
              [
                31.497644,
                53.167427
              ],
              [
                31.305201,
                53.073996
              ],
              [
                31.540018,
                52.742052
              ],
              [
                31.785998,
                52.101678
              ],
              [
                30.927549,
                52.042353
              ],
              [
                30.619454,
                51.822806
              ],
              [
                30.555117,
                51.319503
              ],
              [
                30.157364,
                51.416138
              ],
              [
                29.254938,
                51.368234
              ],
              [
                28.992835,
                51.602044
              ],
              [
                28.617613,
                51.427714
              ],
              [
                28.241615,
                51.572227
              ],
              [
                27.454066,
                51.592303
              ],
              [
                26.337959,
                51.832289
              ],
              [
                25.327788,
                51.910656
              ],
              [
                24.553106,
                51.888461
              ],
              [
                24.005078,
                51.617444
              ],
              [
                23.527071,
                51.578454
              ],
              [
                23.508002,
                52.023647
              ],
              [
                23.199494,
                52.486977
              ],
              [
                23.799199,
                52.691099
              ],
              [
                23.804935,
                53.089731
              ],
              [
                23.527536,
                53.470122
              ],
              [
                23.484128,
                53.912498
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],22:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Belgium",
    "official": "Kingdom of Belgium",
    "native": {
      "deu": {
        "official": "Königreich Belgien",
        "common": "Belgien"
      },
      "fra": {
        "official": "Royaume de Belgique",
        "common": "Belgique"
      },
      "nld": {
        "official": "Koninkrijk België",
        "common": "België"
      }
    }
  },
  "tld": [
    ".be"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "32"
  ],
  "capital": "Brussels",
  "altSpellings": [
    "BE",
    "België",
    "Belgie",
    "Belgien",
    "Belgique",
    "Kingdom of Belgium",
    "Koninkrijk België",
    "Royaume de Belgique",
    "Königreich Belgien"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "deu": "German",
    "fra": "French",
    "nld": "Dutch"
  },
  "translations": {
    "cym": {
      "official": "Kingdom of Belgium",
      "common": "Gwlad Belg"
    },
    "deu": {
      "official": "Königreich Belgien",
      "common": "Belgien"
    },
    "fra": {
      "official": "Royaume de Belgique",
      "common": "Belgique"
    },
    "hrv": {
      "official": "Kraljevina Belgija",
      "common": "Belgija"
    },
    "ita": {
      "official": "Regno del Belgio",
      "common": "Belgio"
    },
    "jpn": {
      "official": "ベルギー王国",
      "common": "ベルギー"
    },
    "nld": {
      "official": "Koninkrijk België",
      "common": "België"
    },
    "por": {
      "official": "Reino da Bélgica",
      "common": "Bélgica"
    },
    "rus": {
      "official": "Королевство Бельгия",
      "common": "Бельгия"
    },
    "spa": {
      "official": "Reino de Bélgica",
      "common": "Bélgica"
    },
    "fin": {
      "official": "Belgian kuningaskunta",
      "common": "Belgia"
    }
  },
  "latlng": [
    50.83333333,
    4
  ],
  "demonym": "Belgian",
  "landlocked": false,
  "borders": [
    "FRA",
    "DEU",
    "LUX",
    "NLD"
  ],
  "area": 30528,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Belgium.svg",
  "codes": {
    "cca2": "BE",
    "ccn3": "056",
    "cca3": "BEL",
    "cioc": "BEL"
  },
  "provinces": [
    "Antwerpen",
    "Brabant Wallon",
    "Brussels Capitol Region",
    "Hainaut",
    "Liege",
    "Limburg",
    "Luxembourg",
    "Namur",
    "Oost-Vlaanderen",
    "Vlaams Brabant",
    "West-Vlaanderen"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BEL",
        "properties": {
          "name": "Belgium"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                3.314971,
                51.345781
              ],
              [
                4.047071,
                51.267259
              ],
              [
                4.973991,
                51.475024
              ],
              [
                5.606976,
                51.037298
              ],
              [
                6.156658,
                50.803721
              ],
              [
                6.043073,
                50.128052
              ],
              [
                5.782417,
                50.090328
              ],
              [
                5.674052,
                49.529484
              ],
              [
                4.799222,
                49.985373
              ],
              [
                4.286023,
                49.907497
              ],
              [
                3.588184,
                50.378992
              ],
              [
                3.123252,
                50.780363
              ],
              [
                2.658422,
                50.796848
              ],
              [
                2.513573,
                51.148506
              ],
              [
                3.314971,
                51.345781
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],23:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Belize",
    "official": "Belize",
    "native": {
      "bjz": {
        "official": "Belize",
        "common": "Belize"
      },
      "eng": {
        "official": "Belize",
        "common": "Belize"
      },
      "spa": {
        "official": "Belice",
        "common": "Belice"
      }
    }
  },
  "tld": [
    ".bz"
  ],
  "currency": [
    "BZD"
  ],
  "callingCode": [
    "501"
  ],
  "capital": "Belmopan",
  "altSpellings": [
    "BZ"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "bjz": "Belizean Creole",
    "eng": "English",
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Belize",
      "common": "Belize"
    },
    "deu": {
      "official": "Belize",
      "common": "Belize"
    },
    "fra": {
      "official": "Belize",
      "common": "Belize"
    },
    "hrv": {
      "official": "Belize",
      "common": "Belize"
    },
    "ita": {
      "official": "Belize",
      "common": "Belize"
    },
    "jpn": {
      "official": "ベリーズ",
      "common": "ベリーズ"
    },
    "nld": {
      "official": "Belize",
      "common": "Belize"
    },
    "por": {
      "official": "Belize",
      "common": "Belize"
    },
    "rus": {
      "official": "Белиз",
      "common": "Белиз"
    },
    "spa": {
      "official": "Belice",
      "common": "Belice"
    },
    "fin": {
      "official": "Belize",
      "common": "Belize"
    }
  },
  "latlng": [
    17.25,
    -88.75
  ],
  "demonym": "Belizean",
  "landlocked": false,
  "borders": [
    "GTM",
    "MEX"
  ],
  "area": 22966,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Belize.svg",
  "codes": {
    "cca2": "BZ",
    "ccn3": "084",
    "cca3": "BLZ",
    "cioc": "BIZ"
  },
  "provinces": [
    "Belize",
    "Cayo",
    "Corozal",
    "Orange Walk",
    "Stann Creek",
    "Toledo"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BLZ",
        "properties": {
          "name": "Belize"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -89.14308,
                17.808319
              ],
              [
                -89.150909,
                17.955468
              ],
              [
                -89.029857,
                18.001511
              ],
              [
                -88.848344,
                17.883198
              ],
              [
                -88.490123,
                18.486831
              ],
              [
                -88.300031,
                18.499982
              ],
              [
                -88.296336,
                18.353273
              ],
              [
                -88.106813,
                18.348674
              ],
              [
                -88.123479,
                18.076675
              ],
              [
                -88.285355,
                17.644143
              ],
              [
                -88.197867,
                17.489475
              ],
              [
                -88.302641,
                17.131694
              ],
              [
                -88.239518,
                17.036066
              ],
              [
                -88.355428,
                16.530774
              ],
              [
                -88.551825,
                16.265467
              ],
              [
                -88.732434,
                16.233635
              ],
              [
                -88.930613,
                15.887273
              ],
              [
                -89.229122,
                15.886938
              ],
              [
                -89.150806,
                17.015577
              ],
              [
                -89.14308,
                17.808319
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],24:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Benin",
    "official": "Republic of Benin",
    "native": {
      "fra": {
        "official": "République du Bénin",
        "common": "Bénin"
      }
    }
  },
  "tld": [
    ".bj"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "229"
  ],
  "capital": "Porto-Novo",
  "altSpellings": [
    "BJ",
    "Republic of Benin",
    "République du Bénin"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "cym": {
      "official": "Republic of Benin",
      "common": "Benin"
    },
    "deu": {
      "official": "Republik Benin",
      "common": "Benin"
    },
    "fra": {
      "official": "République du Bénin",
      "common": "Bénin"
    },
    "hrv": {
      "official": "Republika Benin",
      "common": "Benin"
    },
    "ita": {
      "official": "Repubblica del Benin",
      "common": "Benin"
    },
    "jpn": {
      "official": "ベナン共和国",
      "common": "ベナン"
    },
    "nld": {
      "official": "Republiek Benin",
      "common": "Benin"
    },
    "por": {
      "official": "República do Benin",
      "common": "Benin"
    },
    "rus": {
      "official": "Республика Бенин",
      "common": "Бенин"
    },
    "spa": {
      "official": "República de Benin",
      "common": "Benín"
    },
    "fin": {
      "official": "Beninin tasavalta",
      "common": "Benin"
    }
  },
  "latlng": [
    9.5,
    2.25
  ],
  "demonym": "Beninese",
  "landlocked": false,
  "borders": [
    "BFA",
    "NER",
    "NGA",
    "TGO"
  ],
  "area": 112622,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Benin.svg",
  "codes": {
    "cca2": "BJ",
    "ccn3": "204",
    "cca3": "BEN",
    "cioc": "BEN"
  },
  "provinces": [
    "Alibori",
    "Atakora",
    "Atlantique",
    "Borgou",
    "Collines",
    "Couffo",
    "Donga",
    "Littoral",
    "Mono",
    "Oueme",
    "Plateau",
    "Zou"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BEN",
        "properties": {
          "name": "Benin"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                2.691702,
                6.258817
              ],
              [
                1.865241,
                6.142158
              ],
              [
                1.618951,
                6.832038
              ],
              [
                1.664478,
                9.12859
              ],
              [
                1.463043,
                9.334624
              ],
              [
                1.425061,
                9.825395
              ],
              [
                1.077795,
                10.175607
              ],
              [
                0.772336,
                10.470808
              ],
              [
                0.899563,
                10.997339
              ],
              [
                1.24347,
                11.110511
              ],
              [
                1.447178,
                11.547719
              ],
              [
                1.935986,
                11.64115
              ],
              [
                2.154474,
                11.94015
              ],
              [
                2.490164,
                12.233052
              ],
              [
                2.848643,
                12.235636
              ],
              [
                3.61118,
                11.660167
              ],
              [
                3.572216,
                11.327939
              ],
              [
                3.797112,
                10.734746
              ],
              [
                3.60007,
                10.332186
              ],
              [
                3.705438,
                10.06321
              ],
              [
                3.220352,
                9.444153
              ],
              [
                2.912308,
                9.137608
              ],
              [
                2.723793,
                8.506845
              ],
              [
                2.749063,
                7.870734
              ],
              [
                2.691702,
                6.258817
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],25:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bermuda",
    "official": "Bermuda",
    "native": {
      "eng": {
        "official": "Bermuda",
        "common": "Bermuda"
      }
    }
  },
  "tld": [
    ".bm"
  ],
  "currency": [
    "BMD"
  ],
  "callingCode": [
    "1441"
  ],
  "capital": "Hamilton",
  "altSpellings": [
    "BM",
    "The Islands of Bermuda",
    "The Bermudas",
    "Somers Isles"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Bermuda",
      "common": "Bermiwda"
    },
    "deu": {
      "official": "Bermuda",
      "common": "Bermuda"
    },
    "fra": {
      "official": "Bermudes",
      "common": "Bermudes"
    },
    "hrv": {
      "official": "Bermuda",
      "common": "Bermudi"
    },
    "ita": {
      "official": "Bermuda",
      "common": "Bermuda"
    },
    "jpn": {
      "official": "バミューダ",
      "common": "バミューダ"
    },
    "nld": {
      "official": "Bermuda",
      "common": "Bermuda"
    },
    "por": {
      "official": "Bermudas",
      "common": "Bermudas"
    },
    "rus": {
      "official": "Бермудские острова",
      "common": "Бермудские Острова"
    },
    "spa": {
      "official": "Bermuda",
      "common": "Bermudas"
    },
    "fin": {
      "official": "Bermuda",
      "common": "Bermuda"
    }
  },
  "latlng": [
    32.33333333,
    -64.75
  ],
  "demonym": "Bermudian",
  "landlocked": false,
  "borders": [],
  "area": 54,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bermuda.svg",
  "codes": {
    "cca2": "BM",
    "ccn3": "060",
    "cca3": "BMU",
    "cioc": "BER"
  },
  "provinces": [
    "Devonshire",
    "Hamilton",
    "Hamilton",
    "Paget",
    "Pembroke",
    "Saint George",
    "Saint Georges",
    "Sandys",
    "Smiths",
    "Southampton",
    "Warwick"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BMU",
        "properties": {
          "name": "Bermuda"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -64.7799734332998,
                32.3072000581802
              ],
              [
                -64.7873319183061,
                32.3039237143428
              ],
              [
                -64.7946942710173,
                32.3032682700388
              ],
              [
                -64.8094297981283,
                32.3098175728414
              ],
              [
                -64.8167896352437,
                32.3058845718466
              ],
              [
                -64.8101968029642,
                32.3022833180511
              ],
              [
                -64.7962291465484,
                32.2934409732427
              ],
              [
                -64.7815086336978,
                32.2868973114514
              ],
              [
                -64.7997025513437,
                32.2796896417328
              ],
              [
                -64.8066707691087,
                32.2747767569465
              ],
              [
                -64.8225587873683,
                32.2669111289395
              ],
              [
                -64.8287548840306,
                32.2669075473817
              ],
              [
                -64.8306732143498,
                32.2583944840235
              ],
              [
                -64.8399924854972,
                32.254782282336
              ],
              [
                -64.8566090462354,
                32.2547740387514
              ],
              [
                -64.8682296789446,
                32.2616393614322
              ],
              [
                -64.8628241459563,
                32.2724481933959
              ],
              [
                -64.8748651338951,
                32.2757120264753
              ],
              [
                -64.8717752856644,
                32.2819371582026
              ],
              [
                -64.8671422127295,
                32.2930760547989
              ],
              [
                -64.8559068764437,
                32.2960321186471
              ],
              [
                -64.8597429072279,
                32.3015842021933
              ],
              [
                -64.8439233486717,
                32.3140553852543
              ],
              [
                -64.8350242329311,
                32.3242161760006
              ],
              [
                -64.8338690593672,
                32.3294587561557
              ],
              [
                -64.8520298651164,
                32.3110911879954
              ],
              [
                -64.8635922932573,
                32.3048469433363
              ],
              [
                -64.8686668994079,
                32.30910745083
              ],
              [
                -64.8721354593415,
                32.3041908606301
              ],
              [
                -64.8779667328485,
                32.3038632800462
              ],
              [
                -64.8780046844321,
                32.2907757831692
              ],
              [
                -64.8849776658292,
                32.2819261366004
              ],
              [
                -64.8783230004629,
                32.2613001418681
              ],
              [
                -64.863194968877,
                32.2465799485801
              ],
              [
                -64.8519819555722,
                32.2485519134663
              ],
              [
                -64.842311980074,
                32.2492123317296
              ],
              [
                -64.8388242605209,
                32.2475773472534
              ],
              [
                -64.8334002575532,
                32.2462714714698
              ],
              [
                -64.8256389530584,
                32.2472637398594
              ],
              [
                -64.8205697556026,
                32.2531698880328
              ],
              [
                -64.8105087275579,
                32.2561208974156
              ],
              [
                -64.7900177727338,
                32.2659446936992
              ],
              [
                -64.7745415970416,
                32.2718413023427
              ],
              [
                -64.7644742436426,
                32.2855931353214
              ],
              [
                -64.7551803442276,
                32.2908326702531
              ],
              [
                -64.7423982971436,
                32.2996734994024
              ],
              [
                -64.7206991797682,
                32.3137542201258
              ],
              [
                -64.7117851247134,
                32.3176823360806
              ],
              [
                -64.6962778813133,
                32.3275029115532
              ],
              [
                -64.6768921127452,
                32.3324095397555
              ],
              [
                -64.6567136927777,
                32.3451776458469
              ],
              [
                -64.6532168823499,
                32.3494356627941
              ],
              [
                -64.6605720384429,
                32.3589423487763
              ],
              [
                -64.65125819471,
                32.3615600906466
              ],
              [
                -64.6462011670816,
                32.36975169749
              ],
              [
                -64.6613227512832,
                32.3763135008721
              ],
              [
                -64.6690666074397,
                32.388444543924
              ],
              [
                -64.6834270548595,
                32.3854968316788
              ],
              [
                -64.6954617672714,
                32.3763221285869
              ],
              [
                -64.70438689565,
                32.3704254760469
              ],
              [
                -64.7117569982798,
                32.368132600249
              ],
              [
                -64.7061764744404,
                32.3600110593559
              ],
              [
                -64.700531552697,
                32.3590601356818
              ],
              [
                -64.6940348033967,
                32.3640708659835
              ],
              [
                -64.6895164826082,
                32.3633598579866
              ],
              [
                -64.6864150099255,
                32.3547797587266
              ],
              [
                -64.6824635995504,
                32.3540628176846
              ],
              [
                -64.6835876652835,
                32.3626447677968
              ],
              [
                -64.6801998697415,
                32.3631199096979
              ],
              [
                -64.6672170444687,
                32.3597751617473
              ],
              [
                -64.6598811264978,
                32.3497625771755
              ],
              [
                -64.6737331235384,
                32.3390281851635
              ],
              [
                -64.6887090648183,
                32.3342439408053
              ],
              [
                -64.706732854446,
                32.3429010723036
              ],
              [
                -64.7149301576112,
                32.3552188753513
              ],
              [
                -64.7185967666669,
                32.3552239212394
              ],
              [
                -64.7214189847314,
                32.3518830231342
              ],
              [
                -64.7270616067222,
                32.3466461715475
              ],
              [
                -64.734962460882,
                32.3442819830499
              ],
              [
                -64.7383521549094,
                32.3407216514918
              ],
              [
                -64.7411729976333,
                32.3311790864627
              ],
              [
                -64.7423019216485,
                32.323311561213
              ],
              [
                -64.7462482354281,
                32.318538611581
              ],
              [
                -64.7566773739613,
                32.3130509130175
              ],
              [
                -64.768738200563,
                32.3088369816572
              ],
              [
                -64.7799734332998,
                32.3072000581802
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],26:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bhutan",
    "official": "Kingdom of Bhutan",
    "native": {
      "dzo": {
        "official": "འབྲུག་རྒྱལ་ཁབ་",
        "common": "འབྲུག་ཡུལ་"
      }
    }
  },
  "tld": [
    ".bt"
  ],
  "currency": [
    "BTN",
    "INR"
  ],
  "callingCode": [
    "975"
  ],
  "capital": "Thimphu",
  "altSpellings": [
    "BT",
    "Kingdom of Bhutan"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "dzo": "Dzongkha"
  },
  "translations": {
    "cym": {
      "official": "Kingdom of Bhutan",
      "common": "Bhwtan"
    },
    "deu": {
      "official": "Königreich Bhutan",
      "common": "Bhutan"
    },
    "fra": {
      "official": "Royaume du Bhoutan",
      "common": "Bhoutan"
    },
    "hrv": {
      "official": "Kraljevina Butan",
      "common": "Butan"
    },
    "ita": {
      "official": "Regno del Bhutan",
      "common": "Bhutan"
    },
    "jpn": {
      "official": "ブータン王国",
      "common": "ブータン"
    },
    "nld": {
      "official": "Koninkrijk Bhutan",
      "common": "Bhutan"
    },
    "por": {
      "official": "Reino do Butão",
      "common": "Butão"
    },
    "rus": {
      "official": "Королевство Бутан",
      "common": "Бутан"
    },
    "spa": {
      "official": "Reino de Bután",
      "common": "Bután"
    },
    "fin": {
      "official": "Bhutanin kuningaskunta",
      "common": "Bhutan"
    }
  },
  "latlng": [
    27.5,
    90.5
  ],
  "demonym": "Bhutanese",
  "landlocked": true,
  "borders": [
    "CHN",
    "IND"
  ],
  "area": 38394,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bhutan.svg",
  "codes": {
    "cca2": "BT",
    "ccn3": "064",
    "cca3": "BTN",
    "cioc": "BHU"
  },
  "provinces": [
    "Bumthang",
    "Chhukha",
    "Chirang",
    "Daga",
    "Geylegphug",
    "Ha",
    "Lhuntshi",
    "Mongar",
    "Paro",
    "Pemagatsel",
    "Punakha",
    "Samchi",
    "Samdrup Jongkhar",
    "Shemgang",
    "Tashigang",
    "Thimphu",
    "Tongsa",
    "Wangdi Phodrang"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BTN",
        "properties": {
          "name": "Bhutan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                91.696657,
                27.771742
              ],
              [
                92.103712,
                27.452614
              ],
              [
                92.033484,
                26.83831
              ],
              [
                91.217513,
                26.808648
              ],
              [
                90.373275,
                26.875724
              ],
              [
                89.744528,
                26.719403
              ],
              [
                88.835643,
                27.098966
              ],
              [
                88.814248,
                27.299316
              ],
              [
                89.47581,
                28.042759
              ],
              [
                90.015829,
                28.296439
              ],
              [
                90.730514,
                28.064954
              ],
              [
                91.258854,
                28.040614
              ],
              [
                91.696657,
                27.771742
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],27:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bolivia",
    "official": "Plurinational State of Bolivia",
    "native": {
      "aym": {
        "official": "Wuliwya Suyu",
        "common": "Wuliwya"
      },
      "grn": {
        "official": "Tetã Volívia",
        "common": "Volívia"
      },
      "que": {
        "official": "Buliwya Mamallaqta",
        "common": "Buliwya"
      },
      "spa": {
        "official": "Estado Plurinacional de Bolivia",
        "common": "Bolivia"
      }
    }
  },
  "tld": [
    ".bo"
  ],
  "currency": [
    "BOB",
    "BOV"
  ],
  "callingCode": [
    "591"
  ],
  "capital": "Sucre",
  "altSpellings": [
    "BO",
    "Buliwya",
    "Wuliwya",
    "Bolivia, Plurinational State of",
    "Plurinational State of Bolivia",
    "Estado Plurinacional de Bolivia",
    "Buliwya Mamallaqta",
    "Wuliwya Suyu",
    "Tetã Volívia"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "aym": "Aymara",
    "grn": "Guaraní",
    "que": "Quechua",
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Plurinational State of Bolivia",
      "common": "Bolifia"
    },
    "deu": {
      "official": "Multinationaler Staat von Bolivien",
      "common": "Bolivien"
    },
    "fra": {
      "official": "État plurinational de Bolivie",
      "common": "Bolivie"
    },
    "hrv": {
      "official": "Plurinational State of Bolivia",
      "common": "Bolivija"
    },
    "ita": {
      "official": "Stato Plurinazionale della Bolivia",
      "common": "Bolivia"
    },
    "jpn": {
      "official": "ボリビアの多民族国",
      "common": "ボリビア多民族国"
    },
    "nld": {
      "official": "Plurinationale Staat van Bolivia",
      "common": "Bolivia"
    },
    "por": {
      "official": "Estado Plurinacional da Bolívia",
      "common": "Bolívia"
    },
    "rus": {
      "official": "Многонациональное Государство Боливия",
      "common": "Боливия"
    },
    "spa": {
      "official": "Estado Plurinacional de Bolivia",
      "common": "Bolivia"
    },
    "fin": {
      "official": "Bolivian monikansainen valtio",
      "common": "Bolivia"
    }
  },
  "latlng": [
    -17,
    -65
  ],
  "demonym": "Bolivian",
  "landlocked": true,
  "borders": [
    "ARG",
    "BRA",
    "CHL",
    "PRY",
    "PER"
  ],
  "area": 1098581,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bolivia (state).svg",
  "codes": {
    "cca2": "BO",
    "ccn3": "068",
    "cca3": "BOL",
    "cioc": "BOL"
  },
  "provinces": [
    "Beni",
    "Chuquisaca",
    "Cochabamba",
    "La Paz",
    "Oruro",
    "Pando",
    "Potosi",
    "Santa Cruz",
    "Tarija"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BOL",
        "properties": {
          "name": "Bolivia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.846468,
                -22.034985
              ],
              [
                -63.986838,
                -21.993644
              ],
              [
                -64.377021,
                -22.798091
              ],
              [
                -64.964892,
                -22.075862
              ],
              [
                -66.273339,
                -21.83231
              ],
              [
                -67.106674,
                -22.735925
              ],
              [
                -67.82818,
                -22.872919
              ],
              [
                -68.219913,
                -21.494347
              ],
              [
                -68.757167,
                -20.372658
              ],
              [
                -68.442225,
                -19.405068
              ],
              [
                -68.966818,
                -18.981683
              ],
              [
                -69.100247,
                -18.260125
              ],
              [
                -69.590424,
                -17.580012
              ],
              [
                -68.959635,
                -16.500698
              ],
              [
                -69.389764,
                -15.660129
              ],
              [
                -69.160347,
                -15.323974
              ],
              [
                -69.339535,
                -14.953195
              ],
              [
                -68.948887,
                -14.453639
              ],
              [
                -68.929224,
                -13.602684
              ],
              [
                -68.88008,
                -12.899729
              ],
              [
                -68.66508,
                -12.5613
              ],
              [
                -69.529678,
                -10.951734
              ],
              [
                -68.786158,
                -11.03638
              ],
              [
                -68.271254,
                -11.014521
              ],
              [
                -68.048192,
                -10.712059
              ],
              [
                -67.173801,
                -10.306812
              ],
              [
                -66.646908,
                -9.931331
              ],
              [
                -65.338435,
                -9.761988
              ],
              [
                -65.444837,
                -10.511451
              ],
              [
                -65.321899,
                -10.895872
              ],
              [
                -65.402281,
                -11.56627
              ],
              [
                -64.316353,
                -12.461978
              ],
              [
                -63.196499,
                -12.627033
              ],
              [
                -62.80306,
                -13.000653
              ],
              [
                -62.127081,
                -13.198781
              ],
              [
                -61.713204,
                -13.489202
              ],
              [
                -61.084121,
                -13.479384
              ],
              [
                -60.503304,
                -13.775955
              ],
              [
                -60.459198,
                -14.354007
              ],
              [
                -60.264326,
                -14.645979
              ],
              [
                -60.251149,
                -15.077219
              ],
              [
                -60.542966,
                -15.09391
              ],
              [
                -60.15839,
                -16.258284
              ],
              [
                -58.24122,
                -16.299573
              ],
              [
                -58.388058,
                -16.877109
              ],
              [
                -58.280804,
                -17.27171
              ],
              [
                -57.734558,
                -17.552468
              ],
              [
                -57.498371,
                -18.174188
              ],
              [
                -57.676009,
                -18.96184
              ],
              [
                -57.949997,
                -19.400004
              ],
              [
                -57.853802,
                -19.969995
              ],
              [
                -58.166392,
                -20.176701
              ],
              [
                -58.183471,
                -19.868399
              ],
              [
                -59.115042,
                -19.356906
              ],
              [
                -60.043565,
                -19.342747
              ],
              [
                -61.786326,
                -19.633737
              ],
              [
                -62.265961,
                -20.513735
              ],
              [
                -62.291179,
                -21.051635
              ],
              [
                -62.685057,
                -22.249029
              ],
              [
                -62.846468,
                -22.034985
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],28:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bosnia and Herzegovina",
    "official": "Bosnia and Herzegovina",
    "native": {
      "bos": {
        "official": "Bosna i Hercegovina",
        "common": "Bosna i Hercegovina"
      },
      "hrv": {
        "official": "Bosna i Hercegovina",
        "common": "Bosna i Hercegovina"
      },
      "srp": {
        "official": "Боснa и Херцеговина",
        "common": "Боснa и Херцеговина"
      }
    }
  },
  "tld": [
    ".ba"
  ],
  "currency": [
    "BAM"
  ],
  "callingCode": [
    "387"
  ],
  "capital": "Sarajevo",
  "altSpellings": [
    "BA",
    "Bosnia-Herzegovina",
    "Босна и Херцеговина"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "bos": "Bosnian",
    "hrv": "Croatian",
    "srp": "Serbian"
  },
  "translations": {
    "cym": {
      "official": "Bosnia and Herzegovina",
      "common": "Bosnia a Hercegovina"
    },
    "deu": {
      "official": "Bosnien und Herzegowina",
      "common": "Bosnien und Herzegowina"
    },
    "fra": {
      "official": "Bosnie-et-Herzégovine",
      "common": "Bosnie-Herzégovine"
    },
    "hrv": {
      "official": "Bosna i Hercegovina",
      "common": "Bosna i Hercegovina"
    },
    "ita": {
      "official": "Bosnia-Erzegovina",
      "common": "Bosnia ed Erzegovina"
    },
    "jpn": {
      "official": "ボスニア·ヘルツェゴビナ",
      "common": "ボスニア・ヘルツェゴビナ"
    },
    "nld": {
      "official": "Bosnië-Herzegovina",
      "common": "Bosnië en Herzegovina"
    },
    "por": {
      "official": "Bósnia e Herzegovina",
      "common": "Bósnia e Herzegovina"
    },
    "rus": {
      "official": "Босния и Герцеговина",
      "common": "Босния и Герцеговина"
    },
    "spa": {
      "official": "Bosnia y Herzegovina",
      "common": "Bosnia y Herzegovina"
    },
    "fin": {
      "official": "Bosnia ja Hertsegovina",
      "common": "Bosnia ja Hertsegovina"
    }
  },
  "latlng": [
    44,
    18
  ],
  "demonym": "Bosnian, Herzegovinian",
  "landlocked": false,
  "borders": [
    "HRV",
    "MNE",
    "SRB"
  ],
  "area": 51209,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bosnia and Herzegovina.svg",
  "codes": {
    "cca2": "BA",
    "ccn3": "070",
    "cca3": "BIH",
    "cioc": "BIH"
  },
  "provinces": [
    "Federation of Bosnia and Herzegovina",
    "Republika Srpska"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BIH",
        "properties": {
          "name": "Bosnia and Herzegovina"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                19.005486,
                44.860234
              ],
              [
                19.36803,
                44.863
              ],
              [
                19.11761,
                44.42307
              ],
              [
                19.59976,
                44.03847
              ],
              [
                19.454,
                43.5681
              ],
              [
                19.21852,
                43.52384
              ],
              [
                19.03165,
                43.43253
              ],
              [
                18.70648,
                43.20011
              ],
              [
                18.56,
                42.65
              ],
              [
                17.674922,
                43.028563
              ],
              [
                17.297373,
                43.446341
              ],
              [
                16.916156,
                43.667722
              ],
              [
                16.456443,
                44.04124
              ],
              [
                16.23966,
                44.351143
              ],
              [
                15.750026,
                44.818712
              ],
              [
                15.959367,
                45.233777
              ],
              [
                16.318157,
                45.004127
              ],
              [
                16.534939,
                45.211608
              ],
              [
                17.002146,
                45.233777
              ],
              [
                17.861783,
                45.06774
              ],
              [
                18.553214,
                45.08159
              ],
              [
                19.005486,
                44.860234
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],29:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Botswana",
    "official": "Republic of Botswana",
    "native": {
      "eng": {
        "official": "Republic of Botswana",
        "common": "Botswana"
      },
      "tsn": {
        "official": "Lefatshe la Botswana",
        "common": "Botswana"
      }
    }
  },
  "tld": [
    ".bw"
  ],
  "currency": [
    "BWP"
  ],
  "callingCode": [
    "267"
  ],
  "capital": "Gaborone",
  "altSpellings": [
    "BW",
    "Republic of Botswana",
    "Lefatshe la Botswana"
  ],
  "region": "Africa",
  "subregion": "Southern Africa",
  "languages": {
    "eng": "English",
    "tsn": "Tswana"
  },
  "translations": {
    "deu": {
      "official": "Republik Botsuana",
      "common": "Botswana"
    },
    "fra": {
      "official": "République du Botswana",
      "common": "Botswana"
    },
    "hrv": {
      "official": "Republika Bocvana",
      "common": "Bocvana"
    },
    "ita": {
      "official": "Repubblica del Botswana",
      "common": "Botswana"
    },
    "jpn": {
      "official": "ボツワナ共和国",
      "common": "ボツワナ"
    },
    "nld": {
      "official": "Republiek Botswana",
      "common": "Botswana"
    },
    "por": {
      "official": "República do Botswana",
      "common": "Botswana"
    },
    "rus": {
      "official": "Республика Ботсвана",
      "common": "Ботсвана"
    },
    "spa": {
      "official": "República de Botswana",
      "common": "Botswana"
    },
    "fin": {
      "official": "Botswanan tasavalta",
      "common": "Botswana"
    }
  },
  "latlng": [
    -22,
    24
  ],
  "demonym": "Motswana",
  "landlocked": true,
  "borders": [
    "NAM",
    "ZAF",
    "ZMB",
    "ZWE"
  ],
  "area": 582000,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Botswana.svg",
  "codes": {
    "cca2": "BW",
    "ccn3": "072",
    "cca3": "BWA",
    "cioc": "BOT"
  },
  "provinces": [
    "Central",
    "Chobe",
    "Francistown",
    "Gaborone",
    "Ghanzi",
    "Kgalagadi",
    "Kgatleng",
    "Kweneng",
    "Lobatse",
    "Ngamiland",
    "North-East",
    "Selebi-Pikwe",
    "South-East",
    "Southern"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BWA",
        "properties": {
          "name": "Botswana"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                25.649163,
                -18.536026
              ],
              [
                25.850391,
                -18.714413
              ],
              [
                26.164791,
                -19.293086
              ],
              [
                27.296505,
                -20.39152
              ],
              [
                27.724747,
                -20.499059
              ],
              [
                27.727228,
                -20.851802
              ],
              [
                28.02137,
                -21.485975
              ],
              [
                28.794656,
                -21.639454
              ],
              [
                29.432188,
                -22.091313
              ],
              [
                28.017236,
                -22.827754
              ],
              [
                27.11941,
                -23.574323
              ],
              [
                26.786407,
                -24.240691
              ],
              [
                26.485753,
                -24.616327
              ],
              [
                25.941652,
                -24.696373
              ],
              [
                25.765849,
                -25.174845
              ],
              [
                25.664666,
                -25.486816
              ],
              [
                25.025171,
                -25.71967
              ],
              [
                24.211267,
                -25.670216
              ],
              [
                23.73357,
                -25.390129
              ],
              [
                23.312097,
                -25.26869
              ],
              [
                22.824271,
                -25.500459
              ],
              [
                22.579532,
                -25.979448
              ],
              [
                22.105969,
                -26.280256
              ],
              [
                21.605896,
                -26.726534
              ],
              [
                20.889609,
                -26.828543
              ],
              [
                20.66647,
                -26.477453
              ],
              [
                20.758609,
                -25.868136
              ],
              [
                20.165726,
                -24.917962
              ],
              [
                19.895768,
                -24.76779
              ],
              [
                19.895458,
                -21.849157
              ],
              [
                20.881134,
                -21.814327
              ],
              [
                20.910641,
                -18.252219
              ],
              [
                21.65504,
                -18.219146
              ],
              [
                23.196858,
                -17.869038
              ],
              [
                23.579006,
                -18.281261
              ],
              [
                24.217365,
                -17.889347
              ],
              [
                24.520705,
                -17.887125
              ],
              [
                25.084443,
                -17.661816
              ],
              [
                25.264226,
                -17.73654
              ],
              [
                25.649163,
                -18.536026
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],30:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bouvet Island",
    "official": "Bouvet Island",
    "native": {
      "nor": {
        "official": "Bouvetøya",
        "common": "Bouvetøya"
      }
    }
  },
  "tld": [
    ".bv"
  ],
  "currency": [
    "NOK"
  ],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "BV",
    "Bouvetøya",
    "Bouvet-øya"
  ],
  "region": "",
  "subregion": "",
  "languages": {
    "nor": "Norwegian"
  },
  "translations": {
    "deu": {
      "official": "Bouvet-Insel",
      "common": "Bouvetinsel"
    },
    "fra": {
      "official": "Île Bouvet",
      "common": "Île Bouvet"
    },
    "hrv": {
      "official": "Bouvet Island",
      "common": "Otok Bouvet"
    },
    "ita": {
      "official": "Isola Bouvet",
      "common": "Isola Bouvet"
    },
    "jpn": {
      "official": "ブーヴェ島",
      "common": "ブーベ島"
    },
    "nld": {
      "official": "Bouvet Island",
      "common": "Bouveteiland"
    },
    "por": {
      "official": "Ilha Bouvet",
      "common": "Ilha Bouvet"
    },
    "rus": {
      "official": "Остров Буве",
      "common": "Остров Буве"
    },
    "spa": {
      "official": "Isla Bouvet",
      "common": "Isla Bouvet"
    },
    "fin": {
      "official": "Bouvet'nsaari",
      "common": "Bouvet'nsaari"
    }
  },
  "latlng": [
    -54.43333333,
    3.4
  ],
  "demonym": "",
  "landlocked": false,
  "borders": [],
  "area": 49,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Norway.svg",
  "codes": {
    "cca2": "BV",
    "ccn3": "074",
    "cca3": "BVT",
    "cioc": ""
  }
}
},{}],31:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Brazil",
    "official": "Federative Republic of Brazil",
    "native": {
      "por": {
        "official": "República Federativa do Brasil",
        "common": "Brasil"
      }
    }
  },
  "tld": [
    ".br"
  ],
  "currency": [
    "BRL"
  ],
  "callingCode": [
    "55"
  ],
  "capital": "Brasília",
  "altSpellings": [
    "BR",
    "Brasil",
    "Federative Republic of Brazil",
    "República Federativa do Brasil"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "cym": {
      "official": "Federative Republic of Brazil",
      "common": "Brasil"
    },
    "deu": {
      "official": "Föderative Republik Brasilien",
      "common": "Brasilien"
    },
    "fra": {
      "official": "République fédérative du Brésil",
      "common": "Brésil"
    },
    "hrv": {
      "official": "Savezne Republike Brazil",
      "common": "Brazil"
    },
    "ita": {
      "official": "Repubblica federativa del Brasile",
      "common": "Brasile"
    },
    "jpn": {
      "official": "ブラジル連邦共和国",
      "common": "ブラジル"
    },
    "nld": {
      "official": "Federale Republiek Brazilië",
      "common": "Brazilië"
    },
    "por": {
      "official": "República Federativa do Brasil",
      "common": "Brasil"
    },
    "rus": {
      "official": "Федеративная Республика Бразилия",
      "common": "Бразилия"
    },
    "spa": {
      "official": "República Federativa del Brasil",
      "common": "Brasil"
    },
    "fin": {
      "official": "Brasilian liittotasavalta",
      "common": "Brasilia"
    }
  },
  "latlng": [
    -10,
    -55
  ],
  "demonym": "Brazilian",
  "landlocked": false,
  "borders": [
    "ARG",
    "BOL",
    "COL",
    "GUF",
    "GUY",
    "PRY",
    "PER",
    "SUR",
    "URY",
    "VEN"
  ],
  "area": 8515767,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Brazil.svg",
  "codes": {
    "cca2": "BR",
    "ccn3": "076",
    "cca3": "BRA",
    "cioc": "BRA"
  },
  "provinces": [
    "Acre",
    "Alagoas",
    "Amapa",
    "Amazonas",
    "Bahia",
    "Ceara",
    "Distrito Federal",
    "Espirito Santo",
    "Goias",
    "Maranhao",
    "Mato Grosso",
    "Mato Grosso do Sul",
    "Minas Gerais",
    "Para",
    "Paraiba",
    "Parana",
    "Pernambuco",
    "Piaui",
    "Rio de Janeiro",
    "Rio Grande do Norte",
    "Rio Grande do Sul",
    "Rondonia",
    "Roraima",
    "Santa Catarina",
    "Sao Paulo",
    "Sergipe",
    "Tocantins"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BRA",
        "properties": {
          "name": "Brazil"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -57.625133,
                -30.216295
              ],
              [
                -56.2909,
                -28.852761
              ],
              [
                -55.162286,
                -27.881915
              ],
              [
                -54.490725,
                -27.474757
              ],
              [
                -53.648735,
                -26.923473
              ],
              [
                -53.628349,
                -26.124865
              ],
              [
                -54.13005,
                -25.547639
              ],
              [
                -54.625291,
                -25.739255
              ],
              [
                -54.428946,
                -25.162185
              ],
              [
                -54.293476,
                -24.5708
              ],
              [
                -54.29296,
                -24.021014
              ],
              [
                -54.652834,
                -23.839578
              ],
              [
                -55.027902,
                -24.001274
              ],
              [
                -55.400747,
                -23.956935
              ],
              [
                -55.517639,
                -23.571998
              ],
              [
                -55.610683,
                -22.655619
              ],
              [
                -55.797958,
                -22.35693
              ],
              [
                -56.473317,
                -22.0863
              ],
              [
                -56.88151,
                -22.282154
              ],
              [
                -57.937156,
                -22.090176
              ],
              [
                -57.870674,
                -20.732688
              ],
              [
                -58.166392,
                -20.176701
              ],
              [
                -57.853802,
                -19.969995
              ],
              [
                -57.949997,
                -19.400004
              ],
              [
                -57.676009,
                -18.96184
              ],
              [
                -57.498371,
                -18.174188
              ],
              [
                -57.734558,
                -17.552468
              ],
              [
                -58.280804,
                -17.27171
              ],
              [
                -58.388058,
                -16.877109
              ],
              [
                -58.24122,
                -16.299573
              ],
              [
                -60.15839,
                -16.258284
              ],
              [
                -60.542966,
                -15.09391
              ],
              [
                -60.251149,
                -15.077219
              ],
              [
                -60.264326,
                -14.645979
              ],
              [
                -60.459198,
                -14.354007
              ],
              [
                -60.503304,
                -13.775955
              ],
              [
                -61.084121,
                -13.479384
              ],
              [
                -61.713204,
                -13.489202
              ],
              [
                -62.127081,
                -13.198781
              ],
              [
                -62.80306,
                -13.000653
              ],
              [
                -63.196499,
                -12.627033
              ],
              [
                -64.316353,
                -12.461978
              ],
              [
                -65.402281,
                -11.56627
              ],
              [
                -65.321899,
                -10.895872
              ],
              [
                -65.444837,
                -10.511451
              ],
              [
                -65.338435,
                -9.761988
              ],
              [
                -66.646908,
                -9.931331
              ],
              [
                -67.173801,
                -10.306812
              ],
              [
                -68.048192,
                -10.712059
              ],
              [
                -68.271254,
                -11.014521
              ],
              [
                -68.786158,
                -11.03638
              ],
              [
                -69.529678,
                -10.951734
              ],
              [
                -70.093752,
                -11.123972
              ],
              [
                -70.548686,
                -11.009147
              ],
              [
                -70.481894,
                -9.490118
              ],
              [
                -71.302412,
                -10.079436
              ],
              [
                -72.184891,
                -10.053598
              ],
              [
                -72.563033,
                -9.520194
              ],
              [
                -73.226713,
                -9.462213
              ],
              [
                -73.015383,
                -9.032833
              ],
              [
                -73.571059,
                -8.424447
              ],
              [
                -73.987235,
                -7.52383
              ],
              [
                -73.723401,
                -7.340999
              ],
              [
                -73.724487,
                -6.918595
              ],
              [
                -73.120027,
                -6.629931
              ],
              [
                -73.219711,
                -6.089189
              ],
              [
                -72.964507,
                -5.741251
              ],
              [
                -72.891928,
                -5.274561
              ],
              [
                -71.748406,
                -4.593983
              ],
              [
                -70.928843,
                -4.401591
              ],
              [
                -70.794769,
                -4.251265
              ],
              [
                -69.893635,
                -4.298187
              ],
              [
                -69.444102,
                -1.556287
              ],
              [
                -69.420486,
                -1.122619
              ],
              [
                -69.577065,
                -0.549992
              ],
              [
                -70.020656,
                -0.185156
              ],
              [
                -70.015566,
                0.541414
              ],
              [
                -69.452396,
                0.706159
              ],
              [
                -69.252434,
                0.602651
              ],
              [
                -69.218638,
                0.985677
              ],
              [
                -69.804597,
                1.089081
              ],
              [
                -69.816973,
                1.714805
              ],
              [
                -67.868565,
                1.692455
              ],
              [
                -67.53781,
                2.037163
              ],
              [
                -67.259998,
                1.719999
              ],
              [
                -67.065048,
                1.130112
              ],
              [
                -66.876326,
                1.253361
              ],
              [
                -66.325765,
                0.724452
              ],
              [
                -65.548267,
                0.789254
              ],
              [
                -65.354713,
                1.095282
              ],
              [
                -64.611012,
                1.328731
              ],
              [
                -64.199306,
                1.492855
              ],
              [
                -64.083085,
                1.916369
              ],
              [
                -63.368788,
                2.2009
              ],
              [
                -63.422867,
                2.411068
              ],
              [
                -64.269999,
                2.497006
              ],
              [
                -64.408828,
                3.126786
              ],
              [
                -64.368494,
                3.79721
              ],
              [
                -64.816064,
                4.056445
              ],
              [
                -64.628659,
                4.148481
              ],
              [
                -63.888343,
                4.02053
              ],
              [
                -63.093198,
                3.770571
              ],
              [
                -62.804533,
                4.006965
              ],
              [
                -62.08543,
                4.162124
              ],
              [
                -60.966893,
                4.536468
              ],
              [
                -60.601179,
                4.918098
              ],
              [
                -60.733574,
                5.200277
              ],
              [
                -60.213683,
                5.244486
              ],
              [
                -59.980959,
                5.014061
              ],
              [
                -60.111002,
                4.574967
              ],
              [
                -59.767406,
                4.423503
              ],
              [
                -59.53804,
                3.958803
              ],
              [
                -59.815413,
                3.606499
              ],
              [
                -59.974525,
                2.755233
              ],
              [
                -59.718546,
                2.24963
              ],
              [
                -59.646044,
                1.786894
              ],
              [
                -59.030862,
                1.317698
              ],
              [
                -58.540013,
                1.268088
              ],
              [
                -58.429477,
                1.463942
              ],
              [
                -58.11345,
                1.507195
              ],
              [
                -57.660971,
                1.682585
              ],
              [
                -57.335823,
                1.948538
              ],
              [
                -56.782704,
                1.863711
              ],
              [
                -56.539386,
                1.899523
              ],
              [
                -55.995698,
                1.817667
              ],
              [
                -55.9056,
                2.021996
              ],
              [
                -56.073342,
                2.220795
              ],
              [
                -55.973322,
                2.510364
              ],
              [
                -55.569755,
                2.421506
              ],
              [
                -55.097587,
                2.523748
              ],
              [
                -54.524754,
                2.311849
              ],
              [
                -54.088063,
                2.105557
              ],
              [
                -53.778521,
                2.376703
              ],
              [
                -53.554839,
                2.334897
              ],
              [
                -53.418465,
                2.053389
              ],
              [
                -52.939657,
                2.124858
              ],
              [
                -52.556425,
                2.504705
              ],
              [
                -52.249338,
                3.241094
              ],
              [
                -51.657797,
                4.156232
              ],
              [
                -51.317146,
                4.203491
              ],
              [
                -51.069771,
                3.650398
              ],
              [
                -50.508875,
                1.901564
              ],
              [
                -49.974076,
                1.736483
              ],
              [
                -49.947101,
                1.04619
              ],
              [
                -50.699251,
                0.222984
              ],
              [
                -50.388211,
                -0.078445
              ],
              [
                -48.620567,
                -0.235489
              ],
              [
                -48.584497,
                -1.237805
              ],
              [
                -47.824956,
                -0.581618
              ],
              [
                -46.566584,
                -0.941028
              ],
              [
                -44.905703,
                -1.55174
              ],
              [
                -44.417619,
                -2.13775
              ],
              [
                -44.581589,
                -2.691308
              ],
              [
                -43.418791,
                -2.38311
              ],
              [
                -41.472657,
                -2.912018
              ],
              [
                -39.978665,
                -2.873054
              ],
              [
                -38.500383,
                -3.700652
              ],
              [
                -37.223252,
                -4.820946
              ],
              [
                -36.452937,
                -5.109404
              ],
              [
                -35.597796,
                -5.149504
              ],
              [
                -35.235389,
                -5.464937
              ],
              [
                -34.89603,
                -6.738193
              ],
              [
                -34.729993,
                -7.343221
              ],
              [
                -35.128212,
                -8.996401
              ],
              [
                -35.636967,
                -9.649282
              ],
              [
                -37.046519,
                -11.040721
              ],
              [
                -37.683612,
                -12.171195
              ],
              [
                -38.423877,
                -13.038119
              ],
              [
                -38.673887,
                -13.057652
              ],
              [
                -38.953276,
                -13.79337
              ],
              [
                -38.882298,
                -15.667054
              ],
              [
                -39.161092,
                -17.208407
              ],
              [
                -39.267339,
                -17.867746
              ],
              [
                -39.583521,
                -18.262296
              ],
              [
                -39.760823,
                -19.599113
              ],
              [
                -40.774741,
                -20.904512
              ],
              [
                -40.944756,
                -21.937317
              ],
              [
                -41.754164,
                -22.370676
              ],
              [
                -41.988284,
                -22.97007
              ],
              [
                -43.074704,
                -22.967693
              ],
              [
                -44.647812,
                -23.351959
              ],
              [
                -45.352136,
                -23.796842
              ],
              [
                -46.472093,
                -24.088969
              ],
              [
                -47.648972,
                -24.885199
              ],
              [
                -48.495458,
                -25.877025
              ],
              [
                -48.641005,
                -26.623698
              ],
              [
                -48.474736,
                -27.175912
              ],
              [
                -48.66152,
                -28.186135
              ],
              [
                -48.888457,
                -28.674115
              ],
              [
                -49.587329,
                -29.224469
              ],
              [
                -50.696874,
                -30.984465
              ],
              [
                -51.576226,
                -31.777698
              ],
              [
                -52.256081,
                -32.24537
              ],
              [
                -52.7121,
                -33.196578
              ],
              [
                -53.373662,
                -33.768378
              ],
              [
                -53.650544,
                -33.202004
              ],
              [
                -53.209589,
                -32.727666
              ],
              [
                -53.787952,
                -32.047243
              ],
              [
                -54.572452,
                -31.494511
              ],
              [
                -55.60151,
                -30.853879
              ],
              [
                -55.973245,
                -30.883076
              ],
              [
                -56.976026,
                -30.109686
              ],
              [
                -57.625133,
                -30.216295
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],32:[function(require,module,exports){
module.exports={
  "name": {
    "common": "British Indian Ocean Territory",
    "official": "British Indian Ocean Territory",
    "native": {
      "eng": {
        "official": "British Indian Ocean Territory",
        "common": "British Indian Ocean Territory"
      }
    }
  },
  "tld": [
    ".io"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "246"
  ],
  "capital": "Diego Garcia",
  "altSpellings": [
    "IO"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "British Indian Ocean Territory",
      "common": "Tiriogaeth Brydeinig Cefnfor India"
    },
    "deu": {
      "official": "Britisch-Indischer Ozean",
      "common": "Britisches Territorium im Indischen Ozean"
    },
    "fra": {
      "official": "Territoire britannique de l' océan Indien",
      "common": "Territoire britannique de l'océan Indien"
    },
    "hrv": {
      "official": "British Indian Ocean Territory",
      "common": "Britanski Indijskooceanski teritorij"
    },
    "ita": {
      "official": "Territorio britannico dell'Oceano Indiano",
      "common": "Territorio britannico dell'oceano indiano"
    },
    "jpn": {
      "official": "イギリス領インド洋地域",
      "common": "イギリス領インド洋地域"
    },
    "nld": {
      "official": "Brits Indische Oceaan Territorium",
      "common": "Britse Gebieden in de Indische Oceaan"
    },
    "por": {
      "official": "British Indian Ocean Territory",
      "common": "Território Britânico do Oceano Índico"
    },
    "rus": {
      "official": "Британская территория Индийского океана",
      "common": "Британская территория в Индийском океане"
    },
    "spa": {
      "official": "Territorio Británico del Océano Índico",
      "common": "Territorio Británico del Océano Índico"
    },
    "fin": {
      "official": "Brittiläinen Intian valtameren alue",
      "common": "Brittiläinen Intian valtameren alue"
    }
  },
  "latlng": [
    -6,
    71.5
  ],
  "demonym": "Indian",
  "landlocked": false,
  "borders": [],
  "area": 60,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the British Indian Ocean Territory.svg",
  "codes": {
    "cca2": "IO",
    "ccn3": "086",
    "cca3": "IOT",
    "cioc": ""
  }
}
},{}],33:[function(require,module,exports){
module.exports={
  "name": {
    "common": "British Virgin Islands",
    "official": "Virgin Islands",
    "native": {
      "eng": {
        "official": "Virgin Islands",
        "common": "British Virgin Islands"
      }
    }
  },
  "tld": [
    ".vg"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1284"
  ],
  "capital": "Road Town",
  "altSpellings": [
    "VG",
    "Virgin Islands, British"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Jungferninseln",
      "common": "Britische Jungferninseln"
    },
    "fra": {
      "official": "îles Vierges",
      "common": "Îles Vierges britanniques"
    },
    "hrv": {
      "official": "Djevičanski Otoci",
      "common": "Britanski Djevičanski Otoci"
    },
    "ita": {
      "official": "Isole Vergini",
      "common": "Isole Vergini Britanniche"
    },
    "jpn": {
      "official": "バージン諸島",
      "common": "イギリス領ヴァージン諸島"
    },
    "nld": {
      "official": "Maagdeneilanden",
      "common": "Britse Maagdeneilanden"
    },
    "por": {
      "official": "Ilhas Virgens",
      "common": "Ilhas Virgens"
    },
    "rus": {
      "official": "Виргинские острова",
      "common": "Британские Виргинские острова"
    },
    "spa": {
      "official": "Islas Vírgenes",
      "common": "Islas Vírgenes del Reino Unido"
    },
    "fin": {
      "official": "Brittiläiset Neitsytsaaret",
      "common": "Neitsytsaaret"
    }
  },
  "latlng": [
    18.431383,
    -64.62305
  ],
  "demonym": "Virgin Islander",
  "landlocked": false,
  "borders": [],
  "area": 151,
  "codes": {
    "cca2": "VG",
    "ccn3": "092",
    "cca3": "VGB",
    "cioc": "IVB"
  },
  "provinces": [
    "Anegada",
    "Jost Van Dyke",
    "Tortola",
    "Virgin Gorda"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],34:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Brunei",
    "official": "Nation of Brunei, Abode of Peace",
    "native": {
      "msa": {
        "official": "Nation of Brunei, Abode Damai",
        "common": "Negara Brunei Darussalam"
      }
    }
  },
  "tld": [
    ".bn"
  ],
  "currency": [
    "BND"
  ],
  "callingCode": [
    "673"
  ],
  "capital": "Bandar Seri Begawan",
  "altSpellings": [
    "BN",
    "Brunei Darussalam",
    "Nation of Brunei",
    "the Abode of Peace"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "msa": "Malay"
  },
  "translations": {
    "cym": {
      "official": "Nation of Brunei, Abode of Peace",
      "common": "Brunei"
    },
    "deu": {
      "official": "Nation von Brunei, Wohnung des Friedens",
      "common": "Brunei"
    },
    "fra": {
      "official": "État de Brunei Darussalam",
      "common": "Brunei"
    },
    "hrv": {
      "official": "Nacija od Bruneja, Kuću Mira",
      "common": "Brunej"
    },
    "ita": {
      "official": "Nazione di Brunei, Dimora della Pace",
      "common": "Brunei"
    },
    "jpn": {
      "official": "ブルネイ、平和の精舎の国家",
      "common": "ブルネイ・ダルサラーム"
    },
    "nld": {
      "official": "Natie van Brunei, de verblijfplaats van de Vrede",
      "common": "Brunei"
    },
    "por": {
      "official": "Nação do Brunei, Morada da Paz",
      "common": "Brunei"
    },
    "rus": {
      "official": "Нация Бруней, обитель мира",
      "common": "Бруней"
    },
    "spa": {
      "official": "Nación de Brunei, Morada de la Paz",
      "common": "Brunei"
    },
    "fin": {
      "official": "Brunei Darussalamin valtio",
      "common": "Brunei"
    }
  },
  "latlng": [
    4.5,
    114.66666666
  ],
  "demonym": "Bruneian",
  "landlocked": false,
  "borders": [
    "MYS"
  ],
  "area": 5765,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Brunei.svg",
  "codes": {
    "cca2": "BN",
    "ccn3": "096",
    "cca3": "BRN",
    "cioc": "BRU"
  },
  "provinces": [
    "Belait",
    "Brunei and Muara",
    "Temburong",
    "Tutong"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BRN",
        "properties": {
          "name": "Brunei"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                114.204017,
                4.525874
              ],
              [
                114.599961,
                4.900011
              ],
              [
                115.45071,
                5.44773
              ],
              [
                115.4057,
                4.955228
              ],
              [
                115.347461,
                4.316636
              ],
              [
                114.869557,
                4.348314
              ],
              [
                114.659596,
                4.007637
              ],
              [
                114.204017,
                4.525874
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],35:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bulgaria",
    "official": "Republic of Bulgaria",
    "native": {
      "bul": {
        "official": "Република България",
        "common": "България"
      }
    }
  },
  "tld": [
    ".bg"
  ],
  "currency": [
    "BGN"
  ],
  "callingCode": [
    "359"
  ],
  "capital": "Sofia",
  "altSpellings": [
    "BG",
    "Republic of Bulgaria",
    "Република България"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "bul": "Bulgarian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Bulgaria",
      "common": "Bwlgaria"
    },
    "deu": {
      "official": "Republik Bulgarien",
      "common": "Bulgarien"
    },
    "fra": {
      "official": "République de Bulgarie",
      "common": "Bulgarie"
    },
    "hrv": {
      "official": "Republika Bugarska",
      "common": "Bugarska"
    },
    "ita": {
      "official": "Repubblica di Bulgaria",
      "common": "Bulgaria"
    },
    "jpn": {
      "official": "ブルガリア共和国",
      "common": "ブルガリア"
    },
    "nld": {
      "official": "Republiek Bulgarije",
      "common": "Bulgarije"
    },
    "por": {
      "official": "República da Bulgária",
      "common": "Bulgária"
    },
    "rus": {
      "official": "Республика Болгария",
      "common": "Болгария"
    },
    "spa": {
      "official": "República de Bulgaria",
      "common": "Bulgaria"
    },
    "fin": {
      "official": "Bulgarian tasavalta",
      "common": "Bulgaria"
    }
  },
  "latlng": [
    43,
    25
  ],
  "demonym": "Bulgarian",
  "landlocked": false,
  "borders": [
    "GRC",
    "MKD",
    "ROU",
    "SRB",
    "TUR"
  ],
  "area": 110879,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Bulgaria.svg",
  "codes": {
    "cca2": "BG",
    "ccn3": "100",
    "cca3": "BGR",
    "cioc": "BUL"
  },
  "provinces": [
    "Blagoevgrad",
    "Burgas",
    "Dobrich",
    "Gabrovo",
    "Khaskovo",
    "Kurdzhali",
    "Kyustendil",
    "Lovech",
    "Montana",
    "Pazardzhik",
    "Pernik",
    "Pleven",
    "Plovdiv",
    "Razgrad",
    "Ruse",
    "Shumen",
    "Silistra",
    "Sliven",
    "Smolyan",
    "Sofiya",
    "Sofiya-Grad",
    "Stara Zagora",
    "Turgovishte",
    "Varna",
    "Veliko Turnovo",
    "Vidin",
    "Vratsa",
    "Yambol"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BGR",
        "properties": {
          "name": "Bulgaria"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                22.65715,
                44.234923
              ],
              [
                22.944832,
                43.823785
              ],
              [
                23.332302,
                43.897011
              ],
              [
                24.100679,
                43.741051
              ],
              [
                25.569272,
                43.688445
              ],
              [
                26.065159,
                43.943494
              ],
              [
                27.2424,
                44.175986
              ],
              [
                27.970107,
                43.812468
              ],
              [
                28.558081,
                43.707462
              ],
              [
                28.039095,
                43.293172
              ],
              [
                27.673898,
                42.577892
              ],
              [
                27.99672,
                42.007359
              ],
              [
                27.135739,
                42.141485
              ],
              [
                26.117042,
                41.826905
              ],
              [
                26.106138,
                41.328899
              ],
              [
                25.197201,
                41.234486
              ],
              [
                24.492645,
                41.583896
              ],
              [
                23.692074,
                41.309081
              ],
              [
                22.952377,
                41.337994
              ],
              [
                22.881374,
                41.999297
              ],
              [
                22.380526,
                42.32026
              ],
              [
                22.545012,
                42.461362
              ],
              [
                22.436595,
                42.580321
              ],
              [
                22.604801,
                42.898519
              ],
              [
                22.986019,
                43.211161
              ],
              [
                22.500157,
                43.642814
              ],
              [
                22.410446,
                44.008063
              ],
              [
                22.65715,
                44.234923
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],36:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Burkina Faso",
    "official": "Burkina Faso",
    "native": {
      "fra": {
        "official": "République du Burkina",
        "common": "Burkina Faso"
      }
    }
  },
  "tld": [
    ".bf"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "226"
  ],
  "capital": "Ouagadougou",
  "altSpellings": [
    "BF"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "cym": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "deu": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "fra": {
      "official": "République du Burkina",
      "common": "Burkina Faso"
    },
    "hrv": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "ita": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "jpn": {
      "official": "ブルキナファソ",
      "common": "ブルキナファソ"
    },
    "nld": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "por": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "rus": {
      "official": "Буркина -Фасо",
      "common": "Буркина-Фасо"
    },
    "spa": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "fin": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    }
  },
  "latlng": [
    13,
    -2
  ],
  "demonym": "Burkinabe",
  "landlocked": true,
  "borders": [
    "BEN",
    "CIV",
    "GHA",
    "MLI",
    "NER",
    "TGO"
  ],
  "area": 272967,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Burkina Faso.svg",
  "codes": {
    "cca2": "BF",
    "ccn3": "854",
    "cca3": "BFA",
    "cioc": "BUR"
  },
  "provinces": [
    "Bale",
    "Bam",
    "Banwa",
    "Bazega",
    "Bougouriba",
    "Boulgou",
    "Boulkiemde",
    "Comoe",
    "Ganzourgou",
    "Gnagna",
    "Gourma",
    "Houet",
    "Ioba",
    "Kadiogo",
    "Kenedougou",
    "Komandjari",
    "Kompienga",
    "Kossi",
    "Koupelogo",
    "Kouritenga",
    "Kourweogo",
    "Leraba",
    "Loroum",
    "Mouhoun",
    "Nahouri",
    "Namentenga",
    "Naumbiel",
    "Nayala",
    "Oubritenga",
    "Oudalan",
    "Passore",
    "Poni",
    "Samentenga",
    "Sanguie",
    "Seno",
    "Sissili",
    "Soum",
    "Sourou",
    "Tapoa",
    "Tuy",
    "Yagha",
    "Yatenga",
    "Ziro",
    "Zondomo",
    "Zoundweogo"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BFA",
        "properties": {
          "name": "Burkina Faso"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -2.827496,
                9.642461
              ],
              [
                -3.511899,
                9.900326
              ],
              [
                -3.980449,
                9.862344
              ],
              [
                -4.330247,
                9.610835
              ],
              [
                -4.779884,
                9.821985
              ],
              [
                -4.954653,
                10.152714
              ],
              [
                -5.404342,
                10.370737
              ],
              [
                -5.470565,
                10.95127
              ],
              [
                -5.197843,
                11.375146
              ],
              [
                -5.220942,
                11.713859
              ],
              [
                -4.427166,
                12.542646
              ],
              [
                -4.280405,
                13.228444
              ],
              [
                -4.006391,
                13.472485
              ],
              [
                -3.522803,
                13.337662
              ],
              [
                -3.103707,
                13.541267
              ],
              [
                -2.967694,
                13.79815
              ],
              [
                -2.191825,
                14.246418
              ],
              [
                -2.001035,
                14.559008
              ],
              [
                -1.066363,
                14.973815
              ],
              [
                -0.515854,
                15.116158
              ],
              [
                -0.266257,
                14.924309
              ],
              [
                0.374892,
                14.928908
              ],
              [
                0.295646,
                14.444235
              ],
              [
                0.429928,
                13.988733
              ],
              [
                0.993046,
                13.33575
              ],
              [
                1.024103,
                12.851826
              ],
              [
                2.177108,
                12.625018
              ],
              [
                2.154474,
                11.94015
              ],
              [
                1.935986,
                11.64115
              ],
              [
                1.447178,
                11.547719
              ],
              [
                1.24347,
                11.110511
              ],
              [
                0.899563,
                10.997339
              ],
              [
                0.023803,
                11.018682
              ],
              [
                -0.438702,
                11.098341
              ],
              [
                -0.761576,
                10.93693
              ],
              [
                -1.203358,
                11.009819
              ],
              [
                -2.940409,
                10.96269
              ],
              [
                -2.963896,
                10.395335
              ],
              [
                -2.827496,
                9.642461
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],37:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Burundi",
    "official": "Republic of Burundi",
    "native": {
      "fra": {
        "official": "République du Burundi",
        "common": "Burundi"
      },
      "run": {
        "official": "Republika y'Uburundi ",
        "common": "Uburundi"
      }
    }
  },
  "tld": [
    ".bi"
  ],
  "currency": [
    "BIF"
  ],
  "callingCode": [
    "257"
  ],
  "capital": "Bujumbura",
  "altSpellings": [
    "BI",
    "Republic of Burundi",
    "Republika y'Uburundi",
    "République du Burundi"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "fra": "French",
    "run": "Kirundi"
  },
  "translations": {
    "cym": {
      "official": "Republic of Burundi",
      "common": "Bwrwndi"
    },
    "deu": {
      "official": "Republik Burundi",
      "common": "Burundi"
    },
    "fra": {
      "official": "République du Burundi",
      "common": "Burundi"
    },
    "hrv": {
      "official": "Burundi",
      "common": "Burundi"
    },
    "ita": {
      "official": "Repubblica del Burundi",
      "common": "Burundi"
    },
    "jpn": {
      "official": "ブルンジ共和国",
      "common": "ブルンジ"
    },
    "nld": {
      "official": "Republiek Burundi",
      "common": "Burundi"
    },
    "por": {
      "official": "República do Burundi",
      "common": "Burundi"
    },
    "rus": {
      "official": "Республика Бурунди",
      "common": "Бурунди"
    },
    "spa": {
      "official": "República de Burundi",
      "common": "Burundi"
    },
    "fin": {
      "official": "Burundin tasavalta",
      "common": "Burundi"
    }
  },
  "latlng": [
    -3.5,
    30
  ],
  "demonym": "Burundian",
  "landlocked": true,
  "borders": [
    "COD",
    "RWA",
    "TZA"
  ],
  "area": 27834,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Burundi.svg",
  "codes": {
    "cca2": "BI",
    "ccn3": "108",
    "cca3": "BDI",
    "cioc": "BDI"
  },
  "provinces": [
    "Bubanza",
    "Bujumbura",
    "Bururi",
    "Cankuzo",
    "Cibitoke",
    "Gitega",
    "Karuzi",
    "Kayanza",
    "Kirundo",
    "Makamba",
    "Muramvya",
    "Muyinga",
    "Mwaro",
    "Ngozi",
    "Rutana",
    "Ruyigi"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "BDI",
        "properties": {
          "name": "Burundi"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                29.339998,
                -4.499983
              ],
              [
                29.276384,
                -3.293907
              ],
              [
                29.024926,
                -2.839258
              ],
              [
                29.632176,
                -2.917858
              ],
              [
                29.938359,
                -2.348487
              ],
              [
                30.469696,
                -2.413858
              ],
              [
                30.527677,
                -2.807632
              ],
              [
                30.743013,
                -3.034285
              ],
              [
                30.752263,
                -3.35933
              ],
              [
                30.50556,
                -3.568567
              ],
              [
                30.116333,
                -4.090138
              ],
              [
                29.753512,
                -4.452389
              ],
              [
                29.339998,
                -4.499983
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],38:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cambodia",
    "official": "Kingdom of Cambodia",
    "native": {
      "khm": {
        "official": "ព្រះរាជាណាចក្រកម្ពុជា",
        "common": "Kâmpŭchéa"
      }
    }
  },
  "tld": [
    ".kh"
  ],
  "currency": [
    "KHR"
  ],
  "callingCode": [
    "855"
  ],
  "capital": "Phnom Penh",
  "altSpellings": [
    "KH",
    "Kingdom of Cambodia"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "khm": "Khmer"
  },
  "translations": {
    "cym": {
      "official": "Kingdom of Cambodia",
      "common": "Cambodia"
    },
    "deu": {
      "official": "Königreich Kambodscha",
      "common": "Kambodscha"
    },
    "fra": {
      "official": "Royaume du Cambodge",
      "common": "Cambodge"
    },
    "hrv": {
      "official": "Kraljevina Kambodža",
      "common": "Kambodža"
    },
    "ita": {
      "official": "Regno di Cambogia",
      "common": "Cambogia"
    },
    "jpn": {
      "official": "カンボジア王国",
      "common": "カンボジア"
    },
    "nld": {
      "official": "Koninkrijk Cambodja",
      "common": "Cambodja"
    },
    "por": {
      "official": "Reino do Camboja",
      "common": "Camboja"
    },
    "rus": {
      "official": "Королевство Камбоджа",
      "common": "Камбоджа"
    },
    "spa": {
      "official": "Reino de Camboya",
      "common": "Camboya"
    },
    "fin": {
      "official": "Kambodžan kuningaskunta",
      "common": "Kambodža"
    }
  },
  "latlng": [
    13,
    105
  ],
  "demonym": "Cambodian",
  "landlocked": false,
  "borders": [
    "LAO",
    "THA",
    "VNM"
  ],
  "area": 181035,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Cambodia.svg",
  "codes": {
    "cca2": "KH",
    "ccn3": "116",
    "cca3": "KHM",
    "cioc": "CAM"
  },
  "provinces": [
    "Banteay Mean Cheay",
    "Batdambang",
    "Kampong Cham",
    "Kampong Chhnang",
    "Kampong Spoe",
    "Kampong Thum",
    "Kampot",
    "Kandal",
    "Kaoh Kong",
    "Keb",
    "Kracheh",
    "Mondol Kiri",
    "Otdar Mean Cheay",
    "Pailin",
    "Phnum Penh",
    "Pouthisat",
    "Preah Seihanu (Sihanoukville)",
    "Preah Vihear",
    "Prey Veng",
    "Rotanah Kiri",
    "Siem Reab",
    "Stoeng Treng",
    "Svay Rieng",
    "Takev"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "KHM",
        "properties": {
          "name": "Cambodia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                103.49728,
                10.632555
              ],
              [
                103.09069,
                11.153661
              ],
              [
                102.584932,
                12.186595
              ],
              [
                102.348099,
                13.394247
              ],
              [
                102.988422,
                14.225721
              ],
              [
                104.281418,
                14.416743
              ],
              [
                105.218777,
                14.273212
              ],
              [
                106.043946,
                13.881091
              ],
              [
                106.496373,
                14.570584
              ],
              [
                107.382727,
                14.202441
              ],
              [
                107.614548,
                13.535531
              ],
              [
                107.491403,
                12.337206
              ],
              [
                105.810524,
                11.567615
              ],
              [
                106.24967,
                10.961812
              ],
              [
                105.199915,
                10.88931
              ],
              [
                104.334335,
                10.486544
              ],
              [
                103.49728,
                10.632555
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],39:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cameroon",
    "official": "Republic of Cameroon",
    "native": {
      "eng": {
        "official": "Republic of Cameroon",
        "common": "Cameroon"
      },
      "fra": {
        "official": "République du Cameroun",
        "common": "Cameroun"
      }
    }
  },
  "tld": [
    ".cm"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "237"
  ],
  "capital": "Yaoundé",
  "altSpellings": [
    "CM",
    "Republic of Cameroon",
    "République du Cameroun"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "eng": "English",
    "fra": "French"
  },
  "translations": {
    "cym": {
      "official": "Republic of Cameroon",
      "common": "Camerŵn"
    },
    "deu": {
      "official": "Republik Kamerun",
      "common": "Kamerun"
    },
    "fra": {
      "official": "République du Cameroun",
      "common": "Cameroun"
    },
    "hrv": {
      "official": "Republika Kamerun",
      "common": "Kamerun"
    },
    "ita": {
      "official": "Repubblica del Camerun",
      "common": "Camerun"
    },
    "jpn": {
      "official": "カメルーン共和国",
      "common": "カメルーン"
    },
    "nld": {
      "official": "Republiek Kameroen",
      "common": "Kameroen"
    },
    "por": {
      "official": "República dos Camarões",
      "common": "Camarões"
    },
    "rus": {
      "official": "Республика Камерун",
      "common": "Камерун"
    },
    "spa": {
      "official": "República de Camerún",
      "common": "Camerún"
    },
    "fin": {
      "official": "Kamerunin tasavalta",
      "common": "Kamerun"
    }
  },
  "latlng": [
    6,
    12
  ],
  "demonym": "Cameroonian",
  "landlocked": false,
  "borders": [
    "CAF",
    "TCD",
    "COG",
    "GNQ",
    "GAB",
    "NGA"
  ],
  "area": 475442,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Cameroon.svg",
  "codes": {
    "cca2": "CM",
    "ccn3": "120",
    "cca3": "CMR",
    "cioc": "CMR"
  },
  "provinces": [
    "Adamaoua",
    "Centre",
    "Est",
    "Extreme-Nord",
    "Littoral",
    "Nord",
    "Nord-Ouest",
    "Ouest",
    "Sud",
    "Sud-Ouest"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CMR",
        "properties": {
          "name": "Cameroon"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                13.075822,
                2.267097
              ],
              [
                12.951334,
                2.321616
              ],
              [
                12.35938,
                2.192812
              ],
              [
                11.751665,
                2.326758
              ],
              [
                11.276449,
                2.261051
              ],
              [
                9.649158,
                2.283866
              ],
              [
                9.795196,
                3.073404
              ],
              [
                9.404367,
                3.734527
              ],
              [
                8.948116,
                3.904129
              ],
              [
                8.744924,
                4.352215
              ],
              [
                8.488816,
                4.495617
              ],
              [
                8.500288,
                4.771983
              ],
              [
                8.757533,
                5.479666
              ],
              [
                9.233163,
                6.444491
              ],
              [
                9.522706,
                6.453482
              ],
              [
                10.118277,
                7.03877
              ],
              [
                10.497375,
                7.055358
              ],
              [
                11.058788,
                6.644427
              ],
              [
                11.745774,
                6.981383
              ],
              [
                11.839309,
                7.397042
              ],
              [
                12.063946,
                7.799808
              ],
              [
                12.218872,
                8.305824
              ],
              [
                12.753672,
                8.717763
              ],
              [
                12.955468,
                9.417772
              ],
              [
                13.1676,
                9.640626
              ],
              [
                13.308676,
                10.160362
              ],
              [
                13.57295,
                10.798566
              ],
              [
                14.415379,
                11.572369
              ],
              [
                14.468192,
                11.904752
              ],
              [
                14.577178,
                12.085361
              ],
              [
                14.181336,
                12.483657
              ],
              [
                14.213531,
                12.802035
              ],
              [
                14.495787,
                12.859396
              ],
              [
                14.893386,
                12.219048
              ],
              [
                14.960152,
                11.555574
              ],
              [
                14.923565,
                10.891325
              ],
              [
                15.467873,
                9.982337
              ],
              [
                14.909354,
                9.992129
              ],
              [
                14.627201,
                9.920919
              ],
              [
                14.171466,
                10.021378
              ],
              [
                13.954218,
                9.549495
              ],
              [
                14.544467,
                8.965861
              ],
              [
                14.979996,
                8.796104
              ],
              [
                15.120866,
                8.38215
              ],
              [
                15.436092,
                7.692812
              ],
              [
                15.27946,
                7.421925
              ],
              [
                14.776545,
                6.408498
              ],
              [
                14.53656,
                6.226959
              ],
              [
                14.459407,
                5.451761
              ],
              [
                14.558936,
                5.030598
              ],
              [
                14.478372,
                4.732605
              ],
              [
                14.950953,
                4.210389
              ],
              [
                15.03622,
                3.851367
              ],
              [
                15.405396,
                3.335301
              ],
              [
                15.862732,
                3.013537
              ],
              [
                15.907381,
                2.557389
              ],
              [
                16.012852,
                2.26764
              ],
              [
                15.940919,
                1.727673
              ],
              [
                15.146342,
                1.964015
              ],
              [
                14.337813,
                2.227875
              ],
              [
                13.075822,
                2.267097
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],40:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Canada",
    "official": "Canada",
    "native": {
      "eng": {
        "official": "Canada",
        "common": "Canada"
      },
      "fra": {
        "official": "Canada",
        "common": "Canada"
      }
    }
  },
  "tld": [
    ".ca"
  ],
  "currency": [
    "CAD"
  ],
  "callingCode": [
    "1"
  ],
  "capital": "Ottawa",
  "altSpellings": [
    "CA"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "eng": "English",
    "fra": "French"
  },
  "translations": {
    "cym": {
      "official": "Canada",
      "common": "Canada"
    },
    "deu": {
      "official": "Kanada",
      "common": "Kanada"
    },
    "fra": {
      "official": "Canada",
      "common": "Canada"
    },
    "hrv": {
      "official": "Kanada",
      "common": "Kanada"
    },
    "ita": {
      "official": "Canada",
      "common": "Canada"
    },
    "jpn": {
      "official": "カナダ",
      "common": "カナダ"
    },
    "nld": {
      "official": "Canada",
      "common": "Canada"
    },
    "por": {
      "official": "Canadá",
      "common": "Canadá"
    },
    "rus": {
      "official": "Канада",
      "common": "Канада"
    },
    "spa": {
      "official": "Canadá",
      "common": "Canadá"
    },
    "fin": {
      "official": "Kanada",
      "common": "Kanada"
    }
  },
  "latlng": [
    60,
    -95
  ],
  "demonym": "Canadian",
  "landlocked": false,
  "borders": [
    "USA"
  ],
  "area": 9984670,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Canada.svg",
  "codes": {
    "cca2": "CA",
    "ccn3": "124",
    "cca3": "CAN",
    "cioc": "CAN"
  },
  "provinces": [
    "Alberta",
    "British Columbia",
    "Manitoba",
    "New Brunswick",
    "Newfoundland",
    "Northwest Territories",
    "Nova Scotia",
    "Nunavut",
    "Ontario",
    "Prince Edward Island",
    "Quebec",
    "Saskatchewan",
    "Yukon Territory"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CAN",
        "properties": {
          "name": "Canada"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -63.6645,
                  46.55001
                ],
                [
                  -62.9393,
                  46.41587
                ],
                [
                  -62.01208,
                  46.44314
                ],
                [
                  -62.50391,
                  46.03339
                ],
                [
                  -62.87433,
                  45.96818
                ],
                [
                  -64.1428,
                  46.39265
                ],
                [
                  -64.39261,
                  46.72747
                ],
                [
                  -64.01486,
                  47.03601
                ],
                [
                  -63.6645,
                  46.55001
                ]
              ]
            ],
            [
              [
                [
                  -61.806305,
                  49.10506
                ],
                [
                  -62.29318,
                  49.08717
                ],
                [
                  -63.58926,
                  49.40069
                ],
                [
                  -64.51912,
                  49.87304
                ],
                [
                  -64.17322,
                  49.95718
                ],
                [
                  -62.85829,
                  49.70641
                ],
                [
                  -61.835585,
                  49.28855
                ],
                [
                  -61.806305,
                  49.10506
                ]
              ]
            ],
            [
              [
                [
                  -123.510002,
                  48.510011
                ],
                [
                  -124.012891,
                  48.370846
                ],
                [
                  -125.655013,
                  48.825005
                ],
                [
                  -125.954994,
                  49.179996
                ],
                [
                  -126.850004,
                  49.53
                ],
                [
                  -127.029993,
                  49.814996
                ],
                [
                  -128.059336,
                  49.994959
                ],
                [
                  -128.444584,
                  50.539138
                ],
                [
                  -128.358414,
                  50.770648
                ],
                [
                  -127.308581,
                  50.552574
                ],
                [
                  -126.695001,
                  50.400903
                ],
                [
                  -125.755007,
                  50.295018
                ],
                [
                  -125.415002,
                  49.950001
                ],
                [
                  -124.920768,
                  49.475275
                ],
                [
                  -123.922509,
                  49.062484
                ],
                [
                  -123.510002,
                  48.510011
                ]
              ]
            ],
            [
              [
                [
                  -56.134036,
                  50.68701
                ],
                [
                  -56.795882,
                  49.812309
                ],
                [
                  -56.143105,
                  50.150117
                ],
                [
                  -55.471492,
                  49.935815
                ],
                [
                  -55.822401,
                  49.587129
                ],
                [
                  -54.935143,
                  49.313011
                ],
                [
                  -54.473775,
                  49.556691
                ],
                [
                  -53.476549,
                  49.249139
                ],
                [
                  -53.786014,
                  48.516781
                ],
                [
                  -53.086134,
                  48.687804
                ],
                [
                  -52.958648,
                  48.157164
                ],
                [
                  -52.648099,
                  47.535548
                ],
                [
                  -53.069158,
                  46.655499
                ],
                [
                  -53.521456,
                  46.618292
                ],
                [
                  -54.178936,
                  46.807066
                ],
                [
                  -53.961869,
                  47.625207
                ],
                [
                  -54.240482,
                  47.752279
                ],
                [
                  -55.400773,
                  46.884994
                ],
                [
                  -55.997481,
                  46.91972
                ],
                [
                  -55.291219,
                  47.389562
                ],
                [
                  -56.250799,
                  47.632545
                ],
                [
                  -57.325229,
                  47.572807
                ],
                [
                  -59.266015,
                  47.603348
                ],
                [
                  -59.419494,
                  47.899454
                ],
                [
                  -58.796586,
                  48.251525
                ],
                [
                  -59.231625,
                  48.523188
                ],
                [
                  -58.391805,
                  49.125581
                ],
                [
                  -57.35869,
                  50.718274
                ],
                [
                  -56.73865,
                  51.287438
                ],
                [
                  -55.870977,
                  51.632094
                ],
                [
                  -55.406974,
                  51.588273
                ],
                [
                  -55.600218,
                  51.317075
                ],
                [
                  -56.134036,
                  50.68701
                ]
              ]
            ],
            [
              [
                [
                  -132.710008,
                  54.040009
                ],
                [
                  -131.74999,
                  54.120004
                ],
                [
                  -132.04948,
                  52.984621
                ],
                [
                  -131.179043,
                  52.180433
                ],
                [
                  -131.57783,
                  52.182371
                ],
                [
                  -132.180428,
                  52.639707
                ],
                [
                  -132.549992,
                  53.100015
                ],
                [
                  -133.054611,
                  53.411469
                ],
                [
                  -133.239664,
                  53.85108
                ],
                [
                  -133.180004,
                  54.169975
                ],
                [
                  -132.710008,
                  54.040009
                ]
              ]
            ],
            [
              [
                [
                  -79.26582,
                  62.158675
                ],
                [
                  -79.65752,
                  61.63308
                ],
                [
                  -80.09956,
                  61.7181
                ],
                [
                  -80.36215,
                  62.01649
                ],
                [
                  -80.315395,
                  62.085565
                ],
                [
                  -79.92939,
                  62.3856
                ],
                [
                  -79.52002,
                  62.36371
                ],
                [
                  -79.26582,
                  62.158675
                ]
              ]
            ],
            [
              [
                [
                  -81.89825,
                  62.7108
                ],
                [
                  -83.06857,
                  62.15922
                ],
                [
                  -83.77462,
                  62.18231
                ],
                [
                  -83.99367,
                  62.4528
                ],
                [
                  -83.25048,
                  62.91409
                ],
                [
                  -81.87699,
                  62.90458
                ],
                [
                  -81.89825,
                  62.7108
                ]
              ]
            ],
            [
              [
                [
                  -85.161308,
                  65.657285
                ],
                [
                  -84.975764,
                  65.217518
                ],
                [
                  -84.464012,
                  65.371772
                ],
                [
                  -83.882626,
                  65.109618
                ],
                [
                  -82.787577,
                  64.766693
                ],
                [
                  -81.642014,
                  64.455136
                ],
                [
                  -81.55344,
                  63.979609
                ],
                [
                  -80.817361,
                  64.057486
                ],
                [
                  -80.103451,
                  63.725981
                ],
                [
                  -80.99102,
                  63.411246
                ],
                [
                  -82.547178,
                  63.651722
                ],
                [
                  -83.108798,
                  64.101876
                ],
                [
                  -84.100417,
                  63.569712
                ],
                [
                  -85.523405,
                  63.052379
                ],
                [
                  -85.866769,
                  63.637253
                ],
                [
                  -87.221983,
                  63.541238
                ],
                [
                  -86.35276,
                  64.035833
                ],
                [
                  -86.224886,
                  64.822917
                ],
                [
                  -85.883848,
                  65.738778
                ],
                [
                  -85.161308,
                  65.657285
                ]
              ]
            ],
            [
              [
                [
                  -75.86588,
                  67.14886
                ],
                [
                  -76.98687,
                  67.09873
                ],
                [
                  -77.2364,
                  67.58809
                ],
                [
                  -76.81166,
                  68.14856
                ],
                [
                  -75.89521,
                  68.28721
                ],
                [
                  -75.1145,
                  68.01036
                ],
                [
                  -75.10333,
                  67.58202
                ],
                [
                  -75.21597,
                  67.44425
                ],
                [
                  -75.86588,
                  67.14886
                ]
              ]
            ],
            [
              [
                [
                  -95.647681,
                  69.10769
                ],
                [
                  -96.269521,
                  68.75704
                ],
                [
                  -97.617401,
                  69.06003
                ],
                [
                  -98.431801,
                  68.9507
                ],
                [
                  -99.797401,
                  69.40003
                ],
                [
                  -98.917401,
                  69.71003
                ],
                [
                  -98.218261,
                  70.14354
                ],
                [
                  -97.157401,
                  69.86003
                ],
                [
                  -96.557401,
                  69.68003
                ],
                [
                  -96.257401,
                  69.49003
                ],
                [
                  -95.647681,
                  69.10769
                ]
              ]
            ],
            [
              [
                [
                  -90.5471,
                  69.49766
                ],
                [
                  -90.55151,
                  68.47499
                ],
                [
                  -89.21515,
                  69.25873
                ],
                [
                  -88.01966,
                  68.61508
                ],
                [
                  -88.31749,
                  67.87338
                ],
                [
                  -87.35017,
                  67.19872
                ],
                [
                  -86.30607,
                  67.92146
                ],
                [
                  -85.57664,
                  68.78456
                ],
                [
                  -85.52197,
                  69.88211
                ],
                [
                  -84.10081,
                  69.80539
                ],
                [
                  -82.62258,
                  69.65826
                ],
                [
                  -81.28043,
                  69.16202
                ],
                [
                  -81.2202,
                  68.66567
                ],
                [
                  -81.96436,
                  68.13253
                ],
                [
                  -81.25928,
                  67.59716
                ],
                [
                  -81.38653,
                  67.11078
                ],
                [
                  -83.34456,
                  66.41154
                ],
                [
                  -84.73542,
                  66.2573
                ],
                [
                  -85.76943,
                  66.55833
                ],
                [
                  -86.0676,
                  66.05625
                ],
                [
                  -87.03143,
                  65.21297
                ],
                [
                  -87.32324,
                  64.77563
                ],
                [
                  -88.48296,
                  64.09897
                ],
                [
                  -89.91444,
                  64.03273
                ],
                [
                  -90.70398,
                  63.61017
                ],
                [
                  -90.77004,
                  62.96021
                ],
                [
                  -91.93342,
                  62.83508
                ],
                [
                  -93.15698,
                  62.02469
                ],
                [
                  -94.24153,
                  60.89865
                ],
                [
                  -94.62931,
                  60.11021
                ],
                [
                  -94.6846,
                  58.94882
                ],
                [
                  -93.21502,
                  58.78212
                ],
                [
                  -92.76462,
                  57.84571
                ],
                [
                  -92.29703,
                  57.08709
                ],
                [
                  -90.89769,
                  57.28468
                ],
                [
                  -89.03953,
                  56.85172
                ],
                [
                  -88.03978,
                  56.47162
                ],
                [
                  -87.32421,
                  55.99914
                ],
                [
                  -86.07121,
                  55.72383
                ],
                [
                  -85.01181,
                  55.3026
                ],
                [
                  -83.36055,
                  55.24489
                ],
                [
                  -82.27285,
                  55.14832
                ],
                [
                  -82.4362,
                  54.28227
                ],
                [
                  -82.12502,
                  53.27703
                ],
                [
                  -81.40075,
                  52.15788
                ],
                [
                  -79.91289,
                  51.20842
                ],
                [
                  -79.14301,
                  51.53393
                ],
                [
                  -78.60191,
                  52.56208
                ],
                [
                  -79.12421,
                  54.14145
                ],
                [
                  -79.82958,
                  54.66772
                ],
                [
                  -78.22874,
                  55.13645
                ],
                [
                  -77.0956,
                  55.83741
                ],
                [
                  -76.54137,
                  56.53423
                ],
                [
                  -76.62319,
                  57.20263
                ],
                [
                  -77.30226,
                  58.05209
                ],
                [
                  -78.51688,
                  58.80458
                ],
                [
                  -77.33676,
                  59.85261
                ],
                [
                  -77.77272,
                  60.75788
                ],
                [
                  -78.10687,
                  62.31964
                ],
                [
                  -77.41067,
                  62.55053
                ],
                [
                  -75.69621,
                  62.2784
                ],
                [
                  -74.6682,
                  62.18111
                ],
                [
                  -73.83988,
                  62.4438
                ],
                [
                  -72.90853,
                  62.10507
                ],
                [
                  -71.67708,
                  61.52535
                ],
                [
                  -71.37369,
                  61.13717
                ],
                [
                  -69.59042,
                  61.06141
                ],
                [
                  -69.62033,
                  60.22125
                ],
                [
                  -69.2879,
                  58.95736
                ],
                [
                  -68.37455,
                  58.80106
                ],
                [
                  -67.64976,
                  58.21206
                ],
                [
                  -66.20178,
                  58.76731
                ],
                [
                  -65.24517,
                  59.87071
                ],
                [
                  -64.58352,
                  60.33558
                ],
                [
                  -63.80475,
                  59.4426
                ],
                [
                  -62.50236,
                  58.16708
                ],
                [
                  -61.39655,
                  56.96745
                ],
                [
                  -61.79866,
                  56.33945
                ],
                [
                  -60.46853,
                  55.77548
                ],
                [
                  -59.56962,
                  55.20407
                ],
                [
                  -57.97508,
                  54.94549
                ],
                [
                  -57.3332,
                  54.6265
                ],
                [
                  -56.93689,
                  53.78032
                ],
                [
                  -56.15811,
                  53.64749
                ],
                [
                  -55.75632,
                  53.27036
                ],
                [
                  -55.68338,
                  52.14664
                ],
                [
                  -56.40916,
                  51.7707
                ],
                [
                  -57.12691,
                  51.41972
                ],
                [
                  -58.77482,
                  51.0643
                ],
                [
                  -60.03309,
                  50.24277
                ],
                [
                  -61.72366,
                  50.08046
                ],
                [
                  -63.86251,
                  50.29099
                ],
                [
                  -65.36331,
                  50.2982
                ],
                [
                  -66.39905,
                  50.22897
                ],
                [
                  -67.23631,
                  49.51156
                ],
                [
                  -68.51114,
                  49.06836
                ],
                [
                  -69.95362,
                  47.74488
                ],
                [
                  -71.10458,
                  46.82171
                ],
                [
                  -70.25522,
                  46.98606
                ],
                [
                  -68.65,
                  48.3
                ],
                [
                  -66.55243,
                  49.1331
                ],
                [
                  -65.05626,
                  49.23278
                ],
                [
                  -64.17099,
                  48.74248
                ],
                [
                  -65.11545,
                  48.07085
                ],
                [
                  -64.79854,
                  46.99297
                ],
                [
                  -64.47219,
                  46.23849
                ],
                [
                  -63.17329,
                  45.73902
                ],
                [
                  -61.52072,
                  45.88377
                ],
                [
                  -60.51815,
                  47.00793
                ],
                [
                  -60.4486,
                  46.28264
                ],
                [
                  -59.80287,
                  45.9204
                ],
                [
                  -61.03988,
                  45.26525
                ],
                [
                  -63.25471,
                  44.67014
                ],
                [
                  -64.24656,
                  44.26553
                ],
                [
                  -65.36406,
                  43.54523
                ],
                [
                  -66.1234,
                  43.61867
                ],
                [
                  -66.16173,
                  44.46512
                ],
                [
                  -64.42549,
                  45.29204
                ],
                [
                  -66.02605,
                  45.25931
                ],
                [
                  -67.13741,
                  45.13753
                ],
                [
                  -67.79134,
                  45.70281
                ],
                [
                  -67.79046,
                  47.06636
                ],
                [
                  -68.23444,
                  47.35486
                ],
                [
                  -68.905,
                  47.185
                ],
                [
                  -69.237216,
                  47.447781
                ],
                [
                  -69.99997,
                  46.69307
                ],
                [
                  -70.305,
                  45.915
                ],
                [
                  -70.66,
                  45.46
                ],
                [
                  -71.08482,
                  45.30524
                ],
                [
                  -71.405,
                  45.255
                ],
                [
                  -71.50506,
                  45.0082
                ],
                [
                  -73.34783,
                  45.00738
                ],
                [
                  -74.867,
                  45.00048
                ],
                [
                  -75.31821,
                  44.81645
                ],
                [
                  -76.375,
                  44.09631
                ],
                [
                  -76.5,
                  44.018459
                ],
                [
                  -76.820034,
                  43.628784
                ],
                [
                  -77.737885,
                  43.629056
                ],
                [
                  -78.72028,
                  43.625089
                ],
                [
                  -79.171674,
                  43.466339
                ],
                [
                  -79.01,
                  43.27
                ],
                [
                  -78.92,
                  42.965
                ],
                [
                  -78.939362,
                  42.863611
                ],
                [
                  -80.247448,
                  42.3662
                ],
                [
                  -81.277747,
                  42.209026
                ],
                [
                  -82.439278,
                  41.675105
                ],
                [
                  -82.690089,
                  41.675105
                ],
                [
                  -83.02981,
                  41.832796
                ],
                [
                  -83.142,
                  41.975681
                ],
                [
                  -83.12,
                  42.08
                ],
                [
                  -82.9,
                  42.43
                ],
                [
                  -82.43,
                  42.98
                ],
                [
                  -82.137642,
                  43.571088
                ],
                [
                  -82.337763,
                  44.44
                ],
                [
                  -82.550925,
                  45.347517
                ],
                [
                  -83.592851,
                  45.816894
                ],
                [
                  -83.469551,
                  45.994686
                ],
                [
                  -83.616131,
                  46.116927
                ],
                [
                  -83.890765,
                  46.116927
                ],
                [
                  -84.091851,
                  46.275419
                ],
                [
                  -84.14212,
                  46.512226
                ],
                [
                  -84.3367,
                  46.40877
                ],
                [
                  -84.6049,
                  46.4396
                ],
                [
                  -84.543749,
                  46.538684
                ],
                [
                  -84.779238,
                  46.637102
                ],
                [
                  -84.87608,
                  46.900083
                ],
                [
                  -85.652363,
                  47.220219
                ],
                [
                  -86.461991,
                  47.553338
                ],
                [
                  -87.439793,
                  47.94
                ],
                [
                  -88.378114,
                  48.302918
                ],
                [
                  -89.272917,
                  48.019808
                ],
                [
                  -89.6,
                  48.01
                ],
                [
                  -90.83,
                  48.27
                ],
                [
                  -91.64,
                  48.14
                ],
                [
                  -92.61,
                  48.45
                ],
                [
                  -93.63087,
                  48.60926
                ],
                [
                  -94.32914,
                  48.67074
                ],
                [
                  -94.64,
                  48.84
                ],
                [
                  -94.81758,
                  49.38905
                ],
                [
                  -95.15609,
                  49.38425
                ],
                [
                  -95.15907,
                  49
                ],
                [
                  -97.22872,
                  49.0007
                ],
                [
                  -100.65,
                  49
                ],
                [
                  -104.04826,
                  48.99986
                ],
                [
                  -107.05,
                  49
                ],
                [
                  -110.05,
                  49
                ],
                [
                  -113,
                  49
                ],
                [
                  -116.04818,
                  49
                ],
                [
                  -117.03121,
                  49
                ],
                [
                  -120,
                  49
                ],
                [
                  -122.84,
                  49
                ],
                [
                  -122.97421,
                  49.002538
                ],
                [
                  -124.91024,
                  49.98456
                ],
                [
                  -125.62461,
                  50.41656
                ],
                [
                  -127.43561,
                  50.83061
                ],
                [
                  -127.99276,
                  51.71583
                ],
                [
                  -127.85032,
                  52.32961
                ],
                [
                  -129.12979,
                  52.75538
                ],
                [
                  -129.30523,
                  53.56159
                ],
                [
                  -130.51497,
                  54.28757
                ],
                [
                  -130.53611,
                  54.80278
                ],
                [
                  -129.98,
                  55.285
                ],
                [
                  -130.00778,
                  55.91583
                ],
                [
                  -131.70781,
                  56.55212
                ],
                [
                  -132.73042,
                  57.69289
                ],
                [
                  -133.35556,
                  58.41028
                ],
                [
                  -134.27111,
                  58.86111
                ],
                [
                  -134.945,
                  59.27056
                ],
                [
                  -135.47583,
                  59.78778
                ],
                [
                  -136.47972,
                  59.46389
                ],
                [
                  -137.4525,
                  58.905
                ],
                [
                  -138.34089,
                  59.56211
                ],
                [
                  -139.039,
                  60
                ],
                [
                  -140.013,
                  60.27682
                ],
                [
                  -140.99778,
                  60.30639
                ],
                [
                  -140.9925,
                  66.00003
                ],
                [
                  -140.986,
                  69.712
                ],
                [
                  -139.12052,
                  69.47102
                ],
                [
                  -137.54636,
                  68.99002
                ],
                [
                  -136.50358,
                  68.89804
                ],
                [
                  -135.62576,
                  69.31512
                ],
                [
                  -134.41464,
                  69.62743
                ],
                [
                  -132.92925,
                  69.50534
                ],
                [
                  -131.43136,
                  69.94451
                ],
                [
                  -129.79471,
                  70.19369
                ],
                [
                  -129.10773,
                  69.77927
                ],
                [
                  -128.36156,
                  70.01286
                ],
                [
                  -128.13817,
                  70.48384
                ],
                [
                  -127.44712,
                  70.37721
                ],
                [
                  -125.75632,
                  69.48058
                ],
                [
                  -124.42483,
                  70.1584
                ],
                [
                  -124.28968,
                  69.39969
                ],
                [
                  -123.06108,
                  69.56372
                ],
                [
                  -122.6835,
                  69.85553
                ],
                [
                  -121.47226,
                  69.79778
                ],
                [
                  -119.94288,
                  69.37786
                ],
                [
                  -117.60268,
                  69.01128
                ],
                [
                  -116.22643,
                  68.84151
                ],
                [
                  -115.2469,
                  68.90591
                ],
                [
                  -113.89794,
                  68.3989
                ],
                [
                  -115.30489,
                  67.90261
                ],
                [
                  -113.49727,
                  67.68815
                ],
                [
                  -110.798,
                  67.80612
                ],
                [
                  -109.94619,
                  67.98104
                ],
                [
                  -108.8802,
                  67.38144
                ],
                [
                  -107.79239,
                  67.88736
                ],
                [
                  -108.81299,
                  68.31164
                ],
                [
                  -108.16721,
                  68.65392
                ],
                [
                  -106.95,
                  68.7
                ],
                [
                  -106.15,
                  68.8
                ],
                [
                  -105.34282,
                  68.56122
                ],
                [
                  -104.33791,
                  68.018
                ],
                [
                  -103.22115,
                  68.09775
                ],
                [
                  -101.45433,
                  67.64689
                ],
                [
                  -99.90195,
                  67.80566
                ],
                [
                  -98.4432,
                  67.78165
                ],
                [
                  -98.5586,
                  68.40394
                ],
                [
                  -97.66948,
                  68.57864
                ],
                [
                  -96.11991,
                  68.23939
                ],
                [
                  -96.12588,
                  67.29338
                ],
                [
                  -95.48943,
                  68.0907
                ],
                [
                  -94.685,
                  68.06383
                ],
                [
                  -94.23282,
                  69.06903
                ],
                [
                  -95.30408,
                  69.68571
                ],
                [
                  -96.47131,
                  70.08976
                ],
                [
                  -96.39115,
                  71.19482
                ],
                [
                  -95.2088,
                  71.92053
                ],
                [
                  -93.88997,
                  71.76015
                ],
                [
                  -92.87818,
                  71.31869
                ],
                [
                  -91.51964,
                  70.19129
                ],
                [
                  -92.40692,
                  69.69997
                ],
                [
                  -90.5471,
                  69.49766
                ]
              ]
            ],
            [
              [
                [
                  -114.16717,
                  73.12145
                ],
                [
                  -114.66634,
                  72.65277
                ],
                [
                  -112.44102,
                  72.9554
                ],
                [
                  -111.05039,
                  72.4504
                ],
                [
                  -109.92035,
                  72.96113
                ],
                [
                  -109.00654,
                  72.63335
                ],
                [
                  -108.18835,
                  71.65089
                ],
                [
                  -107.68599,
                  72.06548
                ],
                [
                  -108.39639,
                  73.08953
                ],
                [
                  -107.51645,
                  73.23598
                ],
                [
                  -106.52259,
                  73.07601
                ],
                [
                  -105.40246,
                  72.67259
                ],
                [
                  -104.77484,
                  71.6984
                ],
                [
                  -104.46476,
                  70.99297
                ],
                [
                  -102.78537,
                  70.49776
                ],
                [
                  -100.98078,
                  70.02432
                ],
                [
                  -101.08929,
                  69.58447
                ],
                [
                  -102.73116,
                  69.50402
                ],
                [
                  -102.09329,
                  69.11962
                ],
                [
                  -102.43024,
                  68.75282
                ],
                [
                  -104.24,
                  68.91
                ],
                [
                  -105.96,
                  69.18
                ],
                [
                  -107.12254,
                  69.11922
                ],
                [
                  -109,
                  68.78
                ],
                [
                  -111.534149,
                  68.630059
                ],
                [
                  -113.3132,
                  68.53554
                ],
                [
                  -113.85496,
                  69.00744
                ],
                [
                  -115.22,
                  69.28
                ],
                [
                  -116.10794,
                  69.16821
                ],
                [
                  -117.34,
                  69.96
                ],
                [
                  -116.67473,
                  70.06655
                ],
                [
                  -115.13112,
                  70.2373
                ],
                [
                  -113.72141,
                  70.19237
                ],
                [
                  -112.4161,
                  70.36638
                ],
                [
                  -114.35,
                  70.6
                ],
                [
                  -116.48684,
                  70.52045
                ],
                [
                  -117.9048,
                  70.54056
                ],
                [
                  -118.43238,
                  70.9092
                ],
                [
                  -116.11311,
                  71.30918
                ],
                [
                  -117.65568,
                  71.2952
                ],
                [
                  -119.40199,
                  71.55859
                ],
                [
                  -118.56267,
                  72.30785
                ],
                [
                  -117.86642,
                  72.70594
                ],
                [
                  -115.18909,
                  73.31459
                ],
                [
                  -114.16717,
                  73.12145
                ]
              ]
            ],
            [
              [
                [
                  -104.5,
                  73.42
                ],
                [
                  -105.38,
                  72.76
                ],
                [
                  -106.94,
                  73.46
                ],
                [
                  -106.6,
                  73.6
                ],
                [
                  -105.26,
                  73.64
                ],
                [
                  -104.5,
                  73.42
                ]
              ]
            ],
            [
              [
                [
                  -76.34,
                  73.102685
                ],
                [
                  -76.251404,
                  72.826385
                ],
                [
                  -77.314438,
                  72.855545
                ],
                [
                  -78.39167,
                  72.876656
                ],
                [
                  -79.486252,
                  72.742203
                ],
                [
                  -79.775833,
                  72.802902
                ],
                [
                  -80.876099,
                  73.333183
                ],
                [
                  -80.833885,
                  73.693184
                ],
                [
                  -80.353058,
                  73.75972
                ],
                [
                  -78.064438,
                  73.651932
                ],
                [
                  -76.34,
                  73.102685
                ]
              ]
            ],
            [
              [
                [
                  -86.562179,
                  73.157447
                ],
                [
                  -85.774371,
                  72.534126
                ],
                [
                  -84.850112,
                  73.340278
                ],
                [
                  -82.31559,
                  73.750951
                ],
                [
                  -80.600088,
                  72.716544
                ],
                [
                  -80.748942,
                  72.061907
                ],
                [
                  -78.770639,
                  72.352173
                ],
                [
                  -77.824624,
                  72.749617
                ],
                [
                  -75.605845,
                  72.243678
                ],
                [
                  -74.228616,
                  71.767144
                ],
                [
                  -74.099141,
                  71.33084
                ],
                [
                  -72.242226,
                  71.556925
                ],
                [
                  -71.200015,
                  70.920013
                ],
                [
                  -68.786054,
                  70.525024
                ],
                [
                  -67.91497,
                  70.121948
                ],
                [
                  -66.969033,
                  69.186087
                ],
                [
                  -68.805123,
                  68.720198
                ],
                [
                  -66.449866,
                  68.067163
                ],
                [
                  -64.862314,
                  67.847539
                ],
                [
                  -63.424934,
                  66.928473
                ],
                [
                  -61.851981,
                  66.862121
                ],
                [
                  -62.163177,
                  66.160251
                ],
                [
                  -63.918444,
                  64.998669
                ],
                [
                  -65.14886,
                  65.426033
                ],
                [
                  -66.721219,
                  66.388041
                ],
                [
                  -68.015016,
                  66.262726
                ],
                [
                  -68.141287,
                  65.689789
                ],
                [
                  -67.089646,
                  65.108455
                ],
                [
                  -65.73208,
                  64.648406
                ],
                [
                  -65.320168,
                  64.382737
                ],
                [
                  -64.669406,
                  63.392927
                ],
                [
                  -65.013804,
                  62.674185
                ],
                [
                  -66.275045,
                  62.945099
                ],
                [
                  -68.783186,
                  63.74567
                ],
                [
                  -67.369681,
                  62.883966
                ],
                [
                  -66.328297,
                  62.280075
                ],
                [
                  -66.165568,
                  61.930897
                ],
                [
                  -68.877367,
                  62.330149
                ],
                [
                  -71.023437,
                  62.910708
                ],
                [
                  -72.235379,
                  63.397836
                ],
                [
                  -71.886278,
                  63.679989
                ],
                [
                  -73.378306,
                  64.193963
                ],
                [
                  -74.834419,
                  64.679076
                ],
                [
                  -74.818503,
                  64.389093
                ],
                [
                  -77.70998,
                  64.229542
                ],
                [
                  -78.555949,
                  64.572906
                ],
                [
                  -77.897281,
                  65.309192
                ],
                [
                  -76.018274,
                  65.326969
                ],
                [
                  -73.959795,
                  65.454765
                ],
                [
                  -74.293883,
                  65.811771
                ],
                [
                  -73.944912,
                  66.310578
                ],
                [
                  -72.651167,
                  67.284576
                ],
                [
                  -72.92606,
                  67.726926
                ],
                [
                  -73.311618,
                  68.069437
                ],
                [
                  -74.843307,
                  68.554627
                ],
                [
                  -76.869101,
                  68.894736
                ],
                [
                  -76.228649,
                  69.147769
                ],
                [
                  -77.28737,
                  69.76954
                ],
                [
                  -78.168634,
                  69.826488
                ],
                [
                  -78.957242,
                  70.16688
                ],
                [
                  -79.492455,
                  69.871808
                ],
                [
                  -81.305471,
                  69.743185
                ],
                [
                  -84.944706,
                  69.966634
                ],
                [
                  -87.060003,
                  70.260001
                ],
                [
                  -88.681713,
                  70.410741
                ],
                [
                  -89.51342,
                  70.762038
                ],
                [
                  -88.467721,
                  71.218186
                ],
                [
                  -89.888151,
                  71.222552
                ],
                [
                  -90.20516,
                  72.235074
                ],
                [
                  -89.436577,
                  73.129464
                ],
                [
                  -88.408242,
                  73.537889
                ],
                [
                  -85.826151,
                  73.803816
                ],
                [
                  -86.562179,
                  73.157447
                ]
              ]
            ],
            [
              [
                [
                  -100.35642,
                  73.84389
                ],
                [
                  -99.16387,
                  73.63339
                ],
                [
                  -97.38,
                  73.76
                ],
                [
                  -97.12,
                  73.47
                ],
                [
                  -98.05359,
                  72.99052
                ],
                [
                  -96.54,
                  72.56
                ],
                [
                  -96.72,
                  71.66
                ],
                [
                  -98.35966,
                  71.27285
                ],
                [
                  -99.32286,
                  71.35639
                ],
                [
                  -100.01482,
                  71.73827
                ],
                [
                  -102.5,
                  72.51
                ],
                [
                  -102.48,
                  72.83
                ],
                [
                  -100.43836,
                  72.70588
                ],
                [
                  -101.54,
                  73.36
                ],
                [
                  -100.35642,
                  73.84389
                ]
              ]
            ],
            [
              [
                [
                  -93.196296,
                  72.771992
                ],
                [
                  -94.269047,
                  72.024596
                ],
                [
                  -95.409856,
                  72.061881
                ],
                [
                  -96.033745,
                  72.940277
                ],
                [
                  -96.018268,
                  73.43743
                ],
                [
                  -95.495793,
                  73.862417
                ],
                [
                  -94.503658,
                  74.134907
                ],
                [
                  -92.420012,
                  74.100025
                ],
                [
                  -90.509793,
                  73.856732
                ],
                [
                  -92.003965,
                  72.966244
                ],
                [
                  -93.196296,
                  72.771992
                ]
              ]
            ],
            [
              [
                [
                  -120.46,
                  71.383602
                ],
                [
                  -123.09219,
                  70.90164
                ],
                [
                  -123.62,
                  71.34
                ],
                [
                  -125.928949,
                  71.868688
                ],
                [
                  -125.5,
                  72.292261
                ],
                [
                  -124.80729,
                  73.02256
                ],
                [
                  -123.94,
                  73.68
                ],
                [
                  -124.91775,
                  74.29275
                ],
                [
                  -121.53788,
                  74.44893
                ],
                [
                  -120.10978,
                  74.24135
                ],
                [
                  -117.55564,
                  74.18577
                ],
                [
                  -116.58442,
                  73.89607
                ],
                [
                  -115.51081,
                  73.47519
                ],
                [
                  -116.76794,
                  73.22292
                ],
                [
                  -119.22,
                  72.52
                ],
                [
                  -120.46,
                  71.82
                ],
                [
                  -120.46,
                  71.383602
                ]
              ]
            ],
            [
              [
                [
                  -93.612756,
                  74.979997
                ],
                [
                  -94.156909,
                  74.592347
                ],
                [
                  -95.608681,
                  74.666864
                ],
                [
                  -96.820932,
                  74.927623
                ],
                [
                  -96.288587,
                  75.377828
                ],
                [
                  -94.85082,
                  75.647218
                ],
                [
                  -93.977747,
                  75.29649
                ],
                [
                  -93.612756,
                  74.979997
                ]
              ]
            ],
            [
              [
                [
                  -98.5,
                  76.72
                ],
                [
                  -97.735585,
                  76.25656
                ],
                [
                  -97.704415,
                  75.74344
                ],
                [
                  -98.16,
                  75
                ],
                [
                  -99.80874,
                  74.89744
                ],
                [
                  -100.88366,
                  75.05736
                ],
                [
                  -100.86292,
                  75.64075
                ],
                [
                  -102.50209,
                  75.5638
                ],
                [
                  -102.56552,
                  76.3366
                ],
                [
                  -101.48973,
                  76.30537
                ],
                [
                  -99.98349,
                  76.64634
                ],
                [
                  -98.57699,
                  76.58859
                ],
                [
                  -98.5,
                  76.72
                ]
              ]
            ],
            [
              [
                [
                  -108.21141,
                  76.20168
                ],
                [
                  -107.81943,
                  75.84552
                ],
                [
                  -106.92893,
                  76.01282
                ],
                [
                  -105.881,
                  75.9694
                ],
                [
                  -105.70498,
                  75.47951
                ],
                [
                  -106.31347,
                  75.00527
                ],
                [
                  -109.7,
                  74.85
                ],
                [
                  -112.22307,
                  74.41696
                ],
                [
                  -113.74381,
                  74.39427
                ],
                [
                  -113.87135,
                  74.72029
                ],
                [
                  -111.79421,
                  75.1625
                ],
                [
                  -116.31221,
                  75.04343
                ],
                [
                  -117.7104,
                  75.2222
                ],
                [
                  -116.34602,
                  76.19903
                ],
                [
                  -115.40487,
                  76.47887
                ],
                [
                  -112.59056,
                  76.14134
                ],
                [
                  -110.81422,
                  75.54919
                ],
                [
                  -109.0671,
                  75.47321
                ],
                [
                  -110.49726,
                  76.42982
                ],
                [
                  -109.5811,
                  76.79417
                ],
                [
                  -108.54859,
                  76.67832
                ],
                [
                  -108.21141,
                  76.20168
                ]
              ]
            ],
            [
              [
                [
                  -94.684086,
                  77.097878
                ],
                [
                  -93.573921,
                  76.776296
                ],
                [
                  -91.605023,
                  76.778518
                ],
                [
                  -90.741846,
                  76.449597
                ],
                [
                  -90.969661,
                  76.074013
                ],
                [
                  -89.822238,
                  75.847774
                ],
                [
                  -89.187083,
                  75.610166
                ],
                [
                  -87.838276,
                  75.566189
                ],
                [
                  -86.379192,
                  75.482421
                ],
                [
                  -84.789625,
                  75.699204
                ],
                [
                  -82.753445,
                  75.784315
                ],
                [
                  -81.128531,
                  75.713983
                ],
                [
                  -80.057511,
                  75.336849
                ],
                [
                  -79.833933,
                  74.923127
                ],
                [
                  -80.457771,
                  74.657304
                ],
                [
                  -81.948843,
                  74.442459
                ],
                [
                  -83.228894,
                  74.564028
                ],
                [
                  -86.097452,
                  74.410032
                ],
                [
                  -88.15035,
                  74.392307
                ],
                [
                  -89.764722,
                  74.515555
                ],
                [
                  -92.422441,
                  74.837758
                ],
                [
                  -92.768285,
                  75.38682
                ],
                [
                  -92.889906,
                  75.882655
                ],
                [
                  -93.893824,
                  76.319244
                ],
                [
                  -95.962457,
                  76.441381
                ],
                [
                  -97.121379,
                  76.751078
                ],
                [
                  -96.745123,
                  77.161389
                ],
                [
                  -94.684086,
                  77.097878
                ]
              ]
            ],
            [
              [
                [
                  -116.198587,
                  77.645287
                ],
                [
                  -116.335813,
                  76.876962
                ],
                [
                  -117.106051,
                  76.530032
                ],
                [
                  -118.040412,
                  76.481172
                ],
                [
                  -119.899318,
                  76.053213
                ],
                [
                  -121.499995,
                  75.900019
                ],
                [
                  -122.854924,
                  76.116543
                ],
                [
                  -122.854925,
                  76.116543
                ],
                [
                  -121.157535,
                  76.864508
                ],
                [
                  -119.103939,
                  77.51222
                ],
                [
                  -117.570131,
                  77.498319
                ],
                [
                  -116.198587,
                  77.645287
                ]
              ]
            ],
            [
              [
                [
                  -93.840003,
                  77.519997
                ],
                [
                  -94.295608,
                  77.491343
                ],
                [
                  -96.169654,
                  77.555111
                ],
                [
                  -96.436304,
                  77.834629
                ],
                [
                  -94.422577,
                  77.820005
                ],
                [
                  -93.720656,
                  77.634331
                ],
                [
                  -93.840003,
                  77.519997
                ]
              ]
            ],
            [
              [
                [
                  -110.186938,
                  77.697015
                ],
                [
                  -112.051191,
                  77.409229
                ],
                [
                  -113.534279,
                  77.732207
                ],
                [
                  -112.724587,
                  78.05105
                ],
                [
                  -111.264443,
                  78.152956
                ],
                [
                  -109.854452,
                  77.996325
                ],
                [
                  -110.186938,
                  77.697015
                ]
              ]
            ],
            [
              [
                [
                  -109.663146,
                  78.601973
                ],
                [
                  -110.881314,
                  78.40692
                ],
                [
                  -112.542091,
                  78.407902
                ],
                [
                  -112.525891,
                  78.550555
                ],
                [
                  -111.50001,
                  78.849994
                ],
                [
                  -110.963661,
                  78.804441
                ],
                [
                  -109.663146,
                  78.601973
                ]
              ]
            ],
            [
              [
                [
                  -95.830295,
                  78.056941
                ],
                [
                  -97.309843,
                  77.850597
                ],
                [
                  -98.124289,
                  78.082857
                ],
                [
                  -98.552868,
                  78.458105
                ],
                [
                  -98.631984,
                  78.87193
                ],
                [
                  -97.337231,
                  78.831984
                ],
                [
                  -96.754399,
                  78.765813
                ],
                [
                  -95.559278,
                  78.418315
                ],
                [
                  -95.830295,
                  78.056941
                ]
              ]
            ],
            [
              [
                [
                  -100.060192,
                  78.324754
                ],
                [
                  -99.670939,
                  77.907545
                ],
                [
                  -101.30394,
                  78.018985
                ],
                [
                  -102.949809,
                  78.343229
                ],
                [
                  -105.176133,
                  78.380332
                ],
                [
                  -104.210429,
                  78.67742
                ],
                [
                  -105.41958,
                  78.918336
                ],
                [
                  -105.492289,
                  79.301594
                ],
                [
                  -103.529282,
                  79.165349
                ],
                [
                  -100.825158,
                  78.800462
                ],
                [
                  -100.060192,
                  78.324754
                ]
              ]
            ],
            [
              [
                [
                  -87.02,
                  79.66
                ],
                [
                  -85.81435,
                  79.3369
                ],
                [
                  -87.18756,
                  79.0393
                ],
                [
                  -89.03535,
                  78.28723
                ],
                [
                  -90.80436,
                  78.21533
                ],
                [
                  -92.87669,
                  78.34333
                ],
                [
                  -93.95116,
                  78.75099
                ],
                [
                  -93.93574,
                  79.11373
                ],
                [
                  -93.14524,
                  79.3801
                ],
                [
                  -94.974,
                  79.37248
                ],
                [
                  -96.07614,
                  79.70502
                ],
                [
                  -96.70972,
                  80.15777
                ],
                [
                  -96.01644,
                  80.60233
                ],
                [
                  -95.32345,
                  80.90729
                ],
                [
                  -94.29843,
                  80.97727
                ],
                [
                  -94.73542,
                  81.20646
                ],
                [
                  -92.40984,
                  81.25739
                ],
                [
                  -91.13289,
                  80.72345
                ],
                [
                  -89.45,
                  80.509322
                ],
                [
                  -87.81,
                  80.32
                ],
                [
                  -87.02,
                  79.66
                ]
              ]
            ],
            [
              [
                [
                  -68.5,
                  83.106322
                ],
                [
                  -65.82735,
                  83.02801
                ],
                [
                  -63.68,
                  82.9
                ],
                [
                  -61.85,
                  82.6286
                ],
                [
                  -61.89388,
                  82.36165
                ],
                [
                  -64.334,
                  81.92775
                ],
                [
                  -66.75342,
                  81.72527
                ],
                [
                  -67.65755,
                  81.50141
                ],
                [
                  -65.48031,
                  81.50657
                ],
                [
                  -67.84,
                  80.9
                ],
                [
                  -69.4697,
                  80.61683
                ],
                [
                  -71.18,
                  79.8
                ],
                [
                  -73.2428,
                  79.63415
                ],
                [
                  -73.88,
                  79.430162
                ],
                [
                  -76.90773,
                  79.32309
                ],
                [
                  -75.52924,
                  79.19766
                ],
                [
                  -76.22046,
                  79.01907
                ],
                [
                  -75.39345,
                  78.52581
                ],
                [
                  -76.34354,
                  78.18296
                ],
                [
                  -77.88851,
                  77.89991
                ],
                [
                  -78.36269,
                  77.50859
                ],
                [
                  -79.75951,
                  77.20968
                ],
                [
                  -79.61965,
                  76.98336
                ],
                [
                  -77.91089,
                  77.022045
                ],
                [
                  -77.88911,
                  76.777955
                ],
                [
                  -80.56125,
                  76.17812
                ],
                [
                  -83.17439,
                  76.45403
                ],
                [
                  -86.11184,
                  76.29901
                ],
                [
                  -87.6,
                  76.42
                ],
                [
                  -89.49068,
                  76.47239
                ],
                [
                  -89.6161,
                  76.95213
                ],
                [
                  -87.76739,
                  77.17833
                ],
                [
                  -88.26,
                  77.9
                ],
                [
                  -87.65,
                  77.970222
                ],
                [
                  -84.97634,
                  77.53873
                ],
                [
                  -86.34,
                  78.18
                ],
                [
                  -87.96192,
                  78.37181
                ],
                [
                  -87.15198,
                  78.75867
                ],
                [
                  -85.37868,
                  78.9969
                ],
                [
                  -85.09495,
                  79.34543
                ],
                [
                  -86.50734,
                  79.73624
                ],
                [
                  -86.93179,
                  80.25145
                ],
                [
                  -84.19844,
                  80.20836
                ],
                [
                  -83.408696,
                  80.1
                ],
                [
                  -81.84823,
                  80.46442
                ],
                [
                  -84.1,
                  80.58
                ],
                [
                  -87.59895,
                  80.51627
                ],
                [
                  -89.36663,
                  80.85569
                ],
                [
                  -90.2,
                  81.26
                ],
                [
                  -91.36786,
                  81.5531
                ],
                [
                  -91.58702,
                  81.89429
                ],
                [
                  -90.1,
                  82.085
                ],
                [
                  -88.93227,
                  82.11751
                ],
                [
                  -86.97024,
                  82.27961
                ],
                [
                  -85.5,
                  82.652273
                ],
                [
                  -84.260005,
                  82.6
                ],
                [
                  -83.18,
                  82.32
                ],
                [
                  -82.42,
                  82.86
                ],
                [
                  -81.1,
                  83.02
                ],
                [
                  -79.30664,
                  83.13056
                ],
                [
                  -76.25,
                  83.172059
                ],
                [
                  -75.71878,
                  83.06404
                ],
                [
                  -72.83153,
                  83.23324
                ],
                [
                  -70.665765,
                  83.169781
                ],
                [
                  -68.5,
                  83.106322
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],41:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cape Verde",
    "official": "Republic of Cabo Verde",
    "native": {
      "por": {
        "official": "República de Cabo Verde",
        "common": "Cabo Verde"
      }
    }
  },
  "tld": [
    ".cv"
  ],
  "currency": [
    "CVE"
  ],
  "callingCode": [
    "238"
  ],
  "capital": "Praia",
  "altSpellings": [
    "CV",
    "Republic of Cabo Verde",
    "República de Cabo Verde"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "cym": {
      "official": "Republic of Cabo Verde",
      "common": "Cape Verde"
    },
    "deu": {
      "official": "Republik Cabo Verde",
      "common": "Kap Verde"
    },
    "fra": {
      "official": "République du Cap-Vert",
      "common": "Îles du Cap-Vert"
    },
    "hrv": {
      "official": "Republika Cabo Verde",
      "common": "Zelenortska Republika"
    },
    "ita": {
      "official": "Repubblica di Capo Verde",
      "common": "Capo Verde"
    },
    "jpn": {
      "official": "カーボベルデ共和国",
      "common": "カーボベルデ"
    },
    "nld": {
      "official": "Republiek van Cabo Verde",
      "common": "Kaapverdië"
    },
    "por": {
      "official": "República de Cabo Verde",
      "common": "Cabo Verde"
    },
    "rus": {
      "official": "Республика Кабо -Верде",
      "common": "Кабо-Верде"
    },
    "spa": {
      "official": "República de Cabo Verde",
      "common": "Cabo Verde"
    },
    "fin": {
      "official": "Kap Verden tasavalta",
      "common": "Kap Verde"
    }
  },
  "latlng": [
    16,
    -24
  ],
  "demonym": "Cape Verdian",
  "landlocked": false,
  "borders": [],
  "area": 4033,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Cape Verde.svg",
  "codes": {
    "cca2": "CV",
    "ccn3": "132",
    "cca3": "CPV",
    "cioc": "CPV"
  },
  "provinces": [
    "Boa Vista",
    "Brava",
    "Maio",
    "Mosteiros",
    "Paul",
    "Porto Novo",
    "Praia",
    "Ribeira Grande",
    "Sal",
    "Santa Catarina",
    "Santa Cruz",
    "Sao Domingos",
    "Sao Filipe",
    "Sao Nicolau",
    "Sao Vicente",
    "Tarrafal"
  ],
  "geoJSON": {}
}
},{}],42:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cayman Islands",
    "official": "Cayman Islands",
    "native": {
      "eng": {
        "official": "Cayman Islands",
        "common": "Cayman Islands"
      }
    }
  },
  "tld": [
    ".ky"
  ],
  "currency": [
    "KYD"
  ],
  "callingCode": [
    "1345"
  ],
  "capital": "George Town",
  "altSpellings": [
    "KY"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Cayman Islands",
      "common": "Ynysoedd_Cayman"
    },
    "deu": {
      "official": "Cayman-Inseln",
      "common": "Kaimaninseln"
    },
    "fra": {
      "official": "Îles Caïmans",
      "common": "Îles Caïmans"
    },
    "hrv": {
      "official": "Kajmanski otoci",
      "common": "Kajmanski otoci"
    },
    "ita": {
      "official": "Isole Cayman",
      "common": "Isole Cayman"
    },
    "jpn": {
      "official": "ケイマン諸島",
      "common": "ケイマン諸島"
    },
    "nld": {
      "official": "Caymaneilanden",
      "common": "Caymaneilanden"
    },
    "por": {
      "official": "Ilhas Cayman",
      "common": "Ilhas Caimão"
    },
    "rus": {
      "official": "Каймановы острова",
      "common": "Каймановы острова"
    },
    "spa": {
      "official": "Islas Caimán",
      "common": "Islas Caimán"
    },
    "fin": {
      "official": "Caymansaaret",
      "common": "Caymansaaret"
    }
  },
  "latlng": [
    19.5,
    -80.5
  ],
  "demonym": "Caymanian",
  "landlocked": false,
  "borders": [],
  "area": 264,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Cayman Islands.svg",
  "codes": {
    "cca2": "KY",
    "ccn3": "136",
    "cca3": "CYM",
    "cioc": "CAY"
  },
  "provinces": [
    "Creek",
    "Eastern",
    "Midland",
    "South Town",
    "Spot Bay",
    "Stake Bay",
    "West End",
    "Western"
  ],
  "geoJSON": {}
}
},{}],43:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Central African Republic",
    "official": "Central African Republic",
    "native": {
      "fra": {
        "official": "République centrafricaine",
        "common": "République centrafricaine"
      },
      "sag": {
        "official": "Ködörösêse tî Bêafrîka",
        "common": "Bêafrîka"
      }
    }
  },
  "tld": [
    ".cf"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "236"
  ],
  "capital": "Bangui",
  "altSpellings": [
    "CF",
    "Central African Republic",
    "République centrafricaine"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French",
    "sag": "Sango"
  },
  "translations": {
    "cym": {
      "official": "Central African Republic",
      "common": "Gweriniaeth Canolbarth Affrica"
    },
    "deu": {
      "official": "Zentralafrikanische Republik",
      "common": "Zentralafrikanische Republik"
    },
    "fra": {
      "official": "République centrafricaine",
      "common": "République centrafricaine"
    },
    "hrv": {
      "official": "Centralna Afrička Republika",
      "common": "Srednjoafrička Republika"
    },
    "ita": {
      "official": "Repubblica Centrafricana",
      "common": "Repubblica Centrafricana"
    },
    "jpn": {
      "official": "中央アフリカ共和国",
      "common": "中央アフリカ共和国"
    },
    "nld": {
      "official": "Centraal-Afrikaanse Republiek",
      "common": "Centraal-Afrikaanse Republiek"
    },
    "por": {
      "official": "República Centro-Africano",
      "common": "República Centro-Africana"
    },
    "rus": {
      "official": "Центрально-Африканская Республика",
      "common": "Центральноафриканская Республика"
    },
    "spa": {
      "official": "República Centroafricana",
      "common": "República Centroafricana"
    },
    "fin": {
      "official": "Keski-Afrikan tasavalta",
      "common": "Keski-Afrikan tasavalta"
    }
  },
  "latlng": [
    7,
    21
  ],
  "demonym": "Central African",
  "landlocked": true,
  "borders": [
    "CMR",
    "TCD",
    "COD",
    "COG",
    "SSD",
    "SDN"
  ],
  "area": 622984,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Central African Republic.svg",
  "codes": {
    "cca2": "CF",
    "ccn3": "140",
    "cca3": "CAF",
    "cioc": "CAF"
  },
  "provinces": [
    "Bamingui-Bangoran",
    "Bangui",
    "Basse-Kotto",
    "Gribingui",
    "Haut-Mbomou",
    "Haute-Kotto",
    "Haute-Sangha",
    "Kemo-Gribingui",
    "Lobaye",
    "Mbomou",
    "Nana-Mambere",
    "Ombella-Mpoko",
    "Ouaka",
    "Ouham",
    "Ouham-Pende",
    "Sangha",
    "Vakaga"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CAF",
        "properties": {
          "name": "Central African Republic"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                15.27946,
                7.421925
              ],
              [
                16.106232,
                7.497088
              ],
              [
                16.290562,
                7.754307
              ],
              [
                16.456185,
                7.734774
              ],
              [
                16.705988,
                7.508328
              ],
              [
                17.96493,
                7.890914
              ],
              [
                18.389555,
                8.281304
              ],
              [
                18.911022,
                8.630895
              ],
              [
                18.81201,
                8.982915
              ],
              [
                19.094008,
                9.074847
              ],
              [
                20.059685,
                9.012706
              ],
              [
                21.000868,
                9.475985
              ],
              [
                21.723822,
                10.567056
              ],
              [
                22.231129,
                10.971889
              ],
              [
                22.864165,
                11.142395
              ],
              [
                22.977544,
                10.714463
              ],
              [
                23.554304,
                10.089255
              ],
              [
                23.55725,
                9.681218
              ],
              [
                23.394779,
                9.265068
              ],
              [
                23.459013,
                8.954286
              ],
              [
                23.805813,
                8.666319
              ],
              [
                24.567369,
                8.229188
              ],
              [
                25.114932,
                7.825104
              ],
              [
                25.124131,
                7.500085
              ],
              [
                25.796648,
                6.979316
              ],
              [
                26.213418,
                6.546603
              ],
              [
                26.465909,
                5.946717
              ],
              [
                27.213409,
                5.550953
              ],
              [
                27.374226,
                5.233944
              ],
              [
                27.044065,
                5.127853
              ],
              [
                26.402761,
                5.150875
              ],
              [
                25.650455,
                5.256088
              ],
              [
                25.278798,
                5.170408
              ],
              [
                25.128833,
                4.927245
              ],
              [
                24.805029,
                4.897247
              ],
              [
                24.410531,
                5.108784
              ],
              [
                23.297214,
                4.609693
              ],
              [
                22.84148,
                4.710126
              ],
              [
                22.704124,
                4.633051
              ],
              [
                22.405124,
                4.02916
              ],
              [
                21.659123,
                4.224342
              ],
              [
                20.927591,
                4.322786
              ],
              [
                20.290679,
                4.691678
              ],
              [
                19.467784,
                5.031528
              ],
              [
                18.932312,
                4.709506
              ],
              [
                18.542982,
                4.201785
              ],
              [
                18.453065,
                3.504386
              ],
              [
                17.8099,
                3.560196
              ],
              [
                17.133042,
                3.728197
              ],
              [
                16.537058,
                3.198255
              ],
              [
                16.012852,
                2.26764
              ],
              [
                15.907381,
                2.557389
              ],
              [
                15.862732,
                3.013537
              ],
              [
                15.405396,
                3.335301
              ],
              [
                15.03622,
                3.851367
              ],
              [
                14.950953,
                4.210389
              ],
              [
                14.478372,
                4.732605
              ],
              [
                14.558936,
                5.030598
              ],
              [
                14.459407,
                5.451761
              ],
              [
                14.53656,
                6.226959
              ],
              [
                14.776545,
                6.408498
              ],
              [
                15.27946,
                7.421925
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],44:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Chad",
    "official": "Republic of Chad",
    "native": {
      "ara": {
        "official": "جمهورية تشاد",
        "common": "تشاد‎"
      },
      "fra": {
        "official": "République du Tchad",
        "common": "Tchad"
      }
    }
  },
  "tld": [
    ".td"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "235"
  ],
  "capital": "N'Djamena",
  "altSpellings": [
    "TD",
    "Tchad",
    "Republic of Chad",
    "République du Tchad"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "ara": "Arabic",
    "fra": "French"
  },
  "translations": {
    "cym": {
      "official": "Republic of Chad",
      "common": "Tsiad"
    },
    "deu": {
      "official": "Republik Tschad",
      "common": "Tschad"
    },
    "fra": {
      "official": "République du Tchad",
      "common": "Tchad"
    },
    "hrv": {
      "official": "Čadu",
      "common": "Čad"
    },
    "ita": {
      "official": "Repubblica del Ciad",
      "common": "Ciad"
    },
    "jpn": {
      "official": "チャド共和国",
      "common": "チャド"
    },
    "nld": {
      "official": "Republiek Tsjaad",
      "common": "Tsjaad"
    },
    "por": {
      "official": "República do Chade",
      "common": "Chade"
    },
    "rus": {
      "official": "Республика Чад",
      "common": "Чад"
    },
    "spa": {
      "official": "República de Chad",
      "common": "Chad"
    },
    "fin": {
      "official": "Tšadin tasavalta",
      "common": "Tšad"
    }
  },
  "latlng": [
    15,
    19
  ],
  "demonym": "Chadian",
  "landlocked": true,
  "borders": [
    "CMR",
    "CAF",
    "LBY",
    "NER",
    "NGA",
    "SSD"
  ],
  "area": 1284000,
  "codes": {
    "cca2": "TD",
    "ccn3": "148",
    "cca3": "TCD",
    "cioc": "CHA"
  },
  "provinces": [
    "Batha",
    "Biltine",
    "Borkou-Ennedi-Tibesti",
    "Chari-Baguirmi",
    "Guera",
    "Kanem",
    "Lac",
    "Logone Occidental",
    "Logone Oriental",
    "Mayo-Kebbi",
    "Moyen-Chari",
    "Ouaddai",
    "Salamat",
    "Tandjile"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TCD",
        "properties": {
          "name": "Chad"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                14.495787,
                12.859396
              ],
              [
                14.595781,
                13.330427
              ],
              [
                13.954477,
                13.353449
              ],
              [
                13.956699,
                13.996691
              ],
              [
                13.540394,
                14.367134
              ],
              [
                13.97217,
                15.68437
              ],
              [
                15.247731,
                16.627306
              ],
              [
                15.300441,
                17.92795
              ],
              [
                15.685741,
                19.95718
              ],
              [
                15.903247,
                20.387619
              ],
              [
                15.487148,
                20.730415
              ],
              [
                15.47106,
                21.04845
              ],
              [
                15.096888,
                21.308519
              ],
              [
                14.8513,
                22.86295
              ],
              [
                15.86085,
                23.40972
              ],
              [
                19.84926,
                21.49509
              ],
              [
                23.83766,
                19.58047
              ],
              [
                23.88689,
                15.61084
              ],
              [
                23.02459,
                15.68072
              ],
              [
                22.56795,
                14.94429
              ],
              [
                22.30351,
                14.32682
              ],
              [
                22.51202,
                14.09318
              ],
              [
                22.18329,
                13.78648
              ],
              [
                22.29658,
                13.37232
              ],
              [
                22.03759,
                12.95546
              ],
              [
                21.93681,
                12.58818
              ],
              [
                22.28801,
                12.64605
              ],
              [
                22.49762,
                12.26024
              ],
              [
                22.50869,
                11.67936
              ],
              [
                22.87622,
                11.38461
              ],
              [
                22.864165,
                11.142395
              ],
              [
                22.231129,
                10.971889
              ],
              [
                21.723822,
                10.567056
              ],
              [
                21.000868,
                9.475985
              ],
              [
                20.059685,
                9.012706
              ],
              [
                19.094008,
                9.074847
              ],
              [
                18.81201,
                8.982915
              ],
              [
                18.911022,
                8.630895
              ],
              [
                18.389555,
                8.281304
              ],
              [
                17.96493,
                7.890914
              ],
              [
                16.705988,
                7.508328
              ],
              [
                16.456185,
                7.734774
              ],
              [
                16.290562,
                7.754307
              ],
              [
                16.106232,
                7.497088
              ],
              [
                15.27946,
                7.421925
              ],
              [
                15.436092,
                7.692812
              ],
              [
                15.120866,
                8.38215
              ],
              [
                14.979996,
                8.796104
              ],
              [
                14.544467,
                8.965861
              ],
              [
                13.954218,
                9.549495
              ],
              [
                14.171466,
                10.021378
              ],
              [
                14.627201,
                9.920919
              ],
              [
                14.909354,
                9.992129
              ],
              [
                15.467873,
                9.982337
              ],
              [
                14.923565,
                10.891325
              ],
              [
                14.960152,
                11.555574
              ],
              [
                14.89336,
                12.21905
              ],
              [
                14.495787,
                12.859396
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],45:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Chile",
    "official": "Republic of Chile",
    "native": {
      "spa": {
        "official": "República de Chile",
        "common": "Chile"
      }
    }
  },
  "tld": [
    ".cl"
  ],
  "currency": [
    "CLF",
    "CLP"
  ],
  "callingCode": [
    "56"
  ],
  "capital": "Santiago",
  "altSpellings": [
    "CL",
    "Republic of Chile",
    "República de Chile"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Chile",
      "common": "Chile"
    },
    "deu": {
      "official": "Republik Chile",
      "common": "Chile"
    },
    "fra": {
      "official": "République du Chili",
      "common": "Chili"
    },
    "hrv": {
      "official": "Republika Čile",
      "common": "Čile"
    },
    "ita": {
      "official": "Repubblica del Cile",
      "common": "Cile"
    },
    "jpn": {
      "official": "チリ共和国",
      "common": "チリ"
    },
    "nld": {
      "official": "Republiek Chili",
      "common": "Chili"
    },
    "por": {
      "official": "República do Chile",
      "common": "Chile"
    },
    "rus": {
      "official": "Республика Чили",
      "common": "Чили"
    },
    "spa": {
      "official": "República de Chile",
      "common": "Chile"
    },
    "fin": {
      "official": "Chilen tasavalta",
      "common": "Chile"
    }
  },
  "latlng": [
    -30,
    -71
  ],
  "demonym": "Chilean",
  "landlocked": false,
  "borders": [
    "ARG",
    "BOL",
    "PER"
  ],
  "area": 756102,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Chile.svg",
  "codes": {
    "cca2": "CL",
    "ccn3": "152",
    "cca3": "CHL",
    "cioc": "CHI"
  },
  "provinces": [
    "Aisen del General Carlos Ibanez del Campo",
    "Antofagasta",
    "Araucania",
    "Atacama",
    "Bio-Bio",
    "Coquimbo",
    "Libertador General Bernardo O'Higgins",
    "Los Lagos",
    "Magallanes y de la Antartica Chilena",
    "Maule",
    "Region Metropolitana (Santiago)",
    "Tarapaca",
    "Valparaiso"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CHL",
        "properties": {
          "name": "Chile"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -68.63401,
                  -52.63637
                ],
                [
                  -68.63335,
                  -54.8695
                ],
                [
                  -67.56244,
                  -54.87001
                ],
                [
                  -66.95992,
                  -54.89681
                ],
                [
                  -67.29103,
                  -55.30124
                ],
                [
                  -68.14863,
                  -55.61183
                ],
                [
                  -68.639991,
                  -55.580018
                ],
                [
                  -69.2321,
                  -55.49906
                ],
                [
                  -69.95809,
                  -55.19843
                ],
                [
                  -71.00568,
                  -55.05383
                ],
                [
                  -72.2639,
                  -54.49514
                ],
                [
                  -73.2852,
                  -53.95752
                ],
                [
                  -74.66253,
                  -52.83749
                ],
                [
                  -73.8381,
                  -53.04743
                ],
                [
                  -72.43418,
                  -53.7154
                ],
                [
                  -71.10773,
                  -54.07433
                ],
                [
                  -70.59178,
                  -53.61583
                ],
                [
                  -70.26748,
                  -52.93123
                ],
                [
                  -69.34565,
                  -52.5183
                ],
                [
                  -68.63401,
                  -52.63637
                ]
              ]
            ],
            [
              [
                [
                  -68.219913,
                  -21.494347
                ],
                [
                  -67.82818,
                  -22.872919
                ],
                [
                  -67.106674,
                  -22.735925
                ],
                [
                  -66.985234,
                  -22.986349
                ],
                [
                  -67.328443,
                  -24.025303
                ],
                [
                  -68.417653,
                  -24.518555
                ],
                [
                  -68.386001,
                  -26.185016
                ],
                [
                  -68.5948,
                  -26.506909
                ],
                [
                  -68.295542,
                  -26.89934
                ],
                [
                  -69.001235,
                  -27.521214
                ],
                [
                  -69.65613,
                  -28.459141
                ],
                [
                  -70.01355,
                  -29.367923
                ],
                [
                  -69.919008,
                  -30.336339
                ],
                [
                  -70.535069,
                  -31.36501
                ],
                [
                  -70.074399,
                  -33.09121
                ],
                [
                  -69.814777,
                  -33.273886
                ],
                [
                  -69.817309,
                  -34.193571
                ],
                [
                  -70.388049,
                  -35.169688
                ],
                [
                  -70.364769,
                  -36.005089
                ],
                [
                  -71.121881,
                  -36.658124
                ],
                [
                  -71.118625,
                  -37.576827
                ],
                [
                  -70.814664,
                  -38.552995
                ],
                [
                  -71.413517,
                  -38.916022
                ],
                [
                  -71.680761,
                  -39.808164
                ],
                [
                  -71.915734,
                  -40.832339
                ],
                [
                  -71.746804,
                  -42.051386
                ],
                [
                  -72.148898,
                  -42.254888
                ],
                [
                  -71.915424,
                  -43.408565
                ],
                [
                  -71.464056,
                  -43.787611
                ],
                [
                  -71.793623,
                  -44.207172
                ],
                [
                  -71.329801,
                  -44.407522
                ],
                [
                  -71.222779,
                  -44.784243
                ],
                [
                  -71.659316,
                  -44.973689
                ],
                [
                  -71.552009,
                  -45.560733
                ],
                [
                  -71.917258,
                  -46.884838
                ],
                [
                  -72.447355,
                  -47.738533
                ],
                [
                  -72.331161,
                  -48.244238
                ],
                [
                  -72.648247,
                  -48.878618
                ],
                [
                  -73.415436,
                  -49.318436
                ],
                [
                  -73.328051,
                  -50.378785
                ],
                [
                  -72.975747,
                  -50.74145
                ],
                [
                  -72.309974,
                  -50.67701
                ],
                [
                  -72.329404,
                  -51.425956
                ],
                [
                  -71.914804,
                  -52.009022
                ],
                [
                  -69.498362,
                  -52.142761
                ],
                [
                  -68.571545,
                  -52.299444
                ],
                [
                  -69.461284,
                  -52.291951
                ],
                [
                  -69.94278,
                  -52.537931
                ],
                [
                  -70.845102,
                  -52.899201
                ],
                [
                  -71.006332,
                  -53.833252
                ],
                [
                  -71.429795,
                  -53.856455
                ],
                [
                  -72.557943,
                  -53.53141
                ],
                [
                  -73.702757,
                  -52.835069
                ],
                [
                  -73.702757,
                  -52.83507
                ],
                [
                  -74.946763,
                  -52.262754
                ],
                [
                  -75.260026,
                  -51.629355
                ],
                [
                  -74.976632,
                  -51.043396
                ],
                [
                  -75.479754,
                  -50.378372
                ],
                [
                  -75.608015,
                  -48.673773
                ],
                [
                  -75.18277,
                  -47.711919
                ],
                [
                  -74.126581,
                  -46.939253
                ],
                [
                  -75.644395,
                  -46.647643
                ],
                [
                  -74.692154,
                  -45.763976
                ],
                [
                  -74.351709,
                  -44.103044
                ],
                [
                  -73.240356,
                  -44.454961
                ],
                [
                  -72.717804,
                  -42.383356
                ],
                [
                  -73.3889,
                  -42.117532
                ],
                [
                  -73.701336,
                  -43.365776
                ],
                [
                  -74.331943,
                  -43.224958
                ],
                [
                  -74.017957,
                  -41.794813
                ],
                [
                  -73.677099,
                  -39.942213
                ],
                [
                  -73.217593,
                  -39.258689
                ],
                [
                  -73.505559,
                  -38.282883
                ],
                [
                  -73.588061,
                  -37.156285
                ],
                [
                  -73.166717,
                  -37.12378
                ],
                [
                  -72.553137,
                  -35.50884
                ],
                [
                  -71.861732,
                  -33.909093
                ],
                [
                  -71.43845,
                  -32.418899
                ],
                [
                  -71.668721,
                  -30.920645
                ],
                [
                  -71.370083,
                  -30.095682
                ],
                [
                  -71.489894,
                  -28.861442
                ],
                [
                  -70.905124,
                  -27.64038
                ],
                [
                  -70.724954,
                  -25.705924
                ],
                [
                  -70.403966,
                  -23.628997
                ],
                [
                  -70.091246,
                  -21.393319
                ],
                [
                  -70.16442,
                  -19.756468
                ],
                [
                  -70.372572,
                  -18.347975
                ],
                [
                  -69.858444,
                  -18.092694
                ],
                [
                  -69.590424,
                  -17.580012
                ],
                [
                  -69.100247,
                  -18.260125
                ],
                [
                  -68.966818,
                  -18.981683
                ],
                [
                  -68.442225,
                  -19.405068
                ],
                [
                  -68.757167,
                  -20.372658
                ],
                [
                  -68.219913,
                  -21.494347
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],46:[function(require,module,exports){
module.exports={
  "name": {
    "common": "China",
    "official": "People's Republic of China",
    "native": {
      "cmn": {
        "official": "中华人民共和国",
        "common": "中国"
      }
    }
  },
  "tld": [
    ".cn",
    ".中国",
    ".中國",
    ".公司",
    ".网络"
  ],
  "currency": [
    "CNY"
  ],
  "callingCode": [
    "86"
  ],
  "capital": "Beijing",
  "altSpellings": [
    "CN",
    "Zhōngguó",
    "Zhongguo",
    "Zhonghua",
    "People's Republic of China",
    "中华人民共和国",
    "Zhōnghuá Rénmín Gònghéguó"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "cmn": "Mandarin"
  },
  "translations": {
    "cym": {
      "official": "People's Republic of China",
      "common": "Tsieina"
    },
    "deu": {
      "official": "Volksrepublik China",
      "common": "China"
    },
    "fra": {
      "official": "République populaire de Chine",
      "common": "Chine"
    },
    "hrv": {
      "official": "Narodna Republika Kina",
      "common": "Kina"
    },
    "ita": {
      "official": "Repubblica popolare cinese",
      "common": "Cina"
    },
    "jpn": {
      "official": "中華人民共和国",
      "common": "中国"
    },
    "nld": {
      "official": "Volksrepubliek China",
      "common": "China"
    },
    "por": {
      "official": "República Popular da China",
      "common": "China"
    },
    "rus": {
      "official": "Народная Республика Китай",
      "common": "Китай"
    },
    "spa": {
      "official": "República Popular de China",
      "common": "China"
    },
    "fin": {
      "official": "Kiinan kansantasavalta",
      "common": "Kiina"
    }
  },
  "latlng": [
    35,
    105
  ],
  "demonym": "Chinese",
  "landlocked": false,
  "borders": [
    "AFG",
    "BTN",
    "MMR",
    "HKG",
    "IND",
    "KAZ",
    "PRK",
    "KGZ",
    "LAO",
    "MAC",
    "MNG",
    "PAK",
    "RUS",
    "TJK",
    "VNM"
  ],
  "area": 9706961,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag_of_the_People%27s_Republic_of_China.svg",
  "codes": {
    "cca2": "CN",
    "ccn3": "156",
    "cca3": "CHN",
    "cioc": "CHN"
  },
  "provinces": [
    "Anhui",
    "Beijing",
    "Chongqing",
    "Fujian",
    "Gansu",
    "Guangdong",
    "Guangxi",
    "Guizhou",
    "Hainan",
    "Hebei",
    "Heilongjiang",
    "Henan",
    "Hubei",
    "Hunan",
    "Jiangsu",
    "Jiangxi",
    "Jilin",
    "Liaoning",
    "Nei Mongol",
    "Ningxia",
    "Qinghai",
    "Shaanxi",
    "Shandong",
    "Shanghai",
    "Shanxi",
    "Sichuan",
    "Tianjin",
    "Xinjiang",
    "Xizang (Tibet)",
    "Yunnan",
    "Zhejiang"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CHN",
        "properties": {
          "name": "China"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  110.339188,
                  18.678395
                ],
                [
                  109.47521,
                  18.197701
                ],
                [
                  108.655208,
                  18.507682
                ],
                [
                  108.626217,
                  19.367888
                ],
                [
                  109.119056,
                  19.821039
                ],
                [
                  110.211599,
                  20.101254
                ],
                [
                  110.786551,
                  20.077534
                ],
                [
                  111.010051,
                  19.69593
                ],
                [
                  110.570647,
                  19.255879
                ],
                [
                  110.339188,
                  18.678395
                ]
              ]
            ],
            [
              [
                [
                  127.657407,
                  49.76027
                ],
                [
                  129.397818,
                  49.4406
                ],
                [
                  130.582293,
                  48.729687
                ],
                [
                  130.987282,
                  47.790132
                ],
                [
                  132.506672,
                  47.78897
                ],
                [
                  133.373596,
                  48.183442
                ],
                [
                  135.026311,
                  48.47823
                ],
                [
                  134.500814,
                  47.57844
                ],
                [
                  134.112362,
                  47.212467
                ],
                [
                  133.769644,
                  46.116927
                ],
                [
                  133.097127,
                  45.144066
                ],
                [
                  131.883454,
                  45.321162
                ],
                [
                  131.025212,
                  44.967953
                ],
                [
                  131.288555,
                  44.11152
                ],
                [
                  131.144688,
                  42.92999
                ],
                [
                  130.633866,
                  42.903015
                ],
                [
                  130.640016,
                  42.395009
                ],
                [
                  129.994267,
                  42.985387
                ],
                [
                  129.596669,
                  42.424982
                ],
                [
                  128.052215,
                  41.994285
                ],
                [
                  128.208433,
                  41.466772
                ],
                [
                  127.343783,
                  41.503152
                ],
                [
                  126.869083,
                  41.816569
                ],
                [
                  126.182045,
                  41.107336
                ],
                [
                  125.079942,
                  40.569824
                ],
                [
                  124.265625,
                  39.928493
                ],
                [
                  122.86757,
                  39.637788
                ],
                [
                  122.131388,
                  39.170452
                ],
                [
                  121.054554,
                  38.897471
                ],
                [
                  121.585995,
                  39.360854
                ],
                [
                  121.376757,
                  39.750261
                ],
                [
                  122.168595,
                  40.422443
                ],
                [
                  121.640359,
                  40.94639
                ],
                [
                  120.768629,
                  40.593388
                ],
                [
                  119.639602,
                  39.898056
                ],
                [
                  119.023464,
                  39.252333
                ],
                [
                  118.042749,
                  39.204274
                ],
                [
                  117.532702,
                  38.737636
                ],
                [
                  118.059699,
                  38.061476
                ],
                [
                  118.87815,
                  37.897325
                ],
                [
                  118.911636,
                  37.448464
                ],
                [
                  119.702802,
                  37.156389
                ],
                [
                  120.823457,
                  37.870428
                ],
                [
                  121.711259,
                  37.481123
                ],
                [
                  122.357937,
                  37.454484
                ],
                [
                  122.519995,
                  36.930614
                ],
                [
                  121.104164,
                  36.651329
                ],
                [
                  120.637009,
                  36.11144
                ],
                [
                  119.664562,
                  35.609791
                ],
                [
                  119.151208,
                  34.909859
                ],
                [
                  120.227525,
                  34.360332
                ],
                [
                  120.620369,
                  33.376723
                ],
                [
                  121.229014,
                  32.460319
                ],
                [
                  121.908146,
                  31.692174
                ],
                [
                  121.891919,
                  30.949352
                ],
                [
                  121.264257,
                  30.676267
                ],
                [
                  121.503519,
                  30.142915
                ],
                [
                  122.092114,
                  29.83252
                ],
                [
                  121.938428,
                  29.018022
                ],
                [
                  121.684439,
                  28.225513
                ],
                [
                  121.125661,
                  28.135673
                ],
                [
                  120.395473,
                  27.053207
                ],
                [
                  119.585497,
                  25.740781
                ],
                [
                  118.656871,
                  24.547391
                ],
                [
                  117.281606,
                  23.624501
                ],
                [
                  115.890735,
                  22.782873
                ],
                [
                  114.763827,
                  22.668074
                ],
                [
                  114.152547,
                  22.22376
                ],
                [
                  113.80678,
                  22.54834
                ],
                [
                  113.241078,
                  22.051367
                ],
                [
                  111.843592,
                  21.550494
                ],
                [
                  110.785466,
                  21.397144
                ],
                [
                  110.444039,
                  20.341033
                ],
                [
                  109.889861,
                  20.282457
                ],
                [
                  109.627655,
                  21.008227
                ],
                [
                  109.864488,
                  21.395051
                ],
                [
                  108.522813,
                  21.715212
                ],
                [
                  108.05018,
                  21.55238
                ],
                [
                  107.04342,
                  21.811899
                ],
                [
                  106.567273,
                  22.218205
                ],
                [
                  106.725403,
                  22.794268
                ],
                [
                  105.811247,
                  22.976892
                ],
                [
                  105.329209,
                  23.352063
                ],
                [
                  104.476858,
                  22.81915
                ],
                [
                  103.504515,
                  22.703757
                ],
                [
                  102.706992,
                  22.708795
                ],
                [
                  102.170436,
                  22.464753
                ],
                [
                  101.652018,
                  22.318199
                ],
                [
                  101.80312,
                  21.174367
                ],
                [
                  101.270026,
                  21.201652
                ],
                [
                  101.180005,
                  21.436573
                ],
                [
                  101.150033,
                  21.849984
                ],
                [
                  100.416538,
                  21.558839
                ],
                [
                  99.983489,
                  21.742937
                ],
                [
                  99.240899,
                  22.118314
                ],
                [
                  99.531992,
                  22.949039
                ],
                [
                  98.898749,
                  23.142722
                ],
                [
                  98.660262,
                  24.063286
                ],
                [
                  97.60472,
                  23.897405
                ],
                [
                  97.724609,
                  25.083637
                ],
                [
                  98.671838,
                  25.918703
                ],
                [
                  98.712094,
                  26.743536
                ],
                [
                  98.68269,
                  27.508812
                ],
                [
                  98.246231,
                  27.747221
                ],
                [
                  97.911988,
                  28.335945
                ],
                [
                  97.327114,
                  28.261583
                ],
                [
                  96.248833,
                  28.411031
                ],
                [
                  96.586591,
                  28.83098
                ],
                [
                  96.117679,
                  29.452802
                ],
                [
                  95.404802,
                  29.031717
                ],
                [
                  94.56599,
                  29.277438
                ],
                [
                  93.413348,
                  28.640629
                ],
                [
                  92.503119,
                  27.896876
                ],
                [
                  91.696657,
                  27.771742
                ],
                [
                  91.258854,
                  28.040614
                ],
                [
                  90.730514,
                  28.064954
                ],
                [
                  90.015829,
                  28.296439
                ],
                [
                  89.47581,
                  28.042759
                ],
                [
                  88.814248,
                  27.299316
                ],
                [
                  88.730326,
                  28.086865
                ],
                [
                  88.120441,
                  27.876542
                ],
                [
                  86.954517,
                  27.974262
                ],
                [
                  85.82332,
                  28.203576
                ],
                [
                  85.011638,
                  28.642774
                ],
                [
                  84.23458,
                  28.839894
                ],
                [
                  83.898993,
                  29.320226
                ],
                [
                  83.337115,
                  29.463732
                ],
                [
                  82.327513,
                  30.115268
                ],
                [
                  81.525804,
                  30.422717
                ],
                [
                  81.111256,
                  30.183481
                ],
                [
                  79.721367,
                  30.882715
                ],
                [
                  78.738894,
                  31.515906
                ],
                [
                  78.458446,
                  32.618164
                ],
                [
                  79.176129,
                  32.48378
                ],
                [
                  79.208892,
                  32.994395
                ],
                [
                  78.811086,
                  33.506198
                ],
                [
                  78.912269,
                  34.321936
                ],
                [
                  77.837451,
                  35.49401
                ],
                [
                  76.192848,
                  35.898403
                ],
                [
                  75.896897,
                  36.666806
                ],
                [
                  75.158028,
                  37.133031
                ],
                [
                  74.980002,
                  37.41999
                ],
                [
                  74.829986,
                  37.990007
                ],
                [
                  74.864816,
                  38.378846
                ],
                [
                  74.257514,
                  38.606507
                ],
                [
                  73.928852,
                  38.505815
                ],
                [
                  73.675379,
                  39.431237
                ],
                [
                  73.960013,
                  39.660008
                ],
                [
                  73.822244,
                  39.893973
                ],
                [
                  74.776862,
                  40.366425
                ],
                [
                  75.467828,
                  40.562072
                ],
                [
                  76.526368,
                  40.427946
                ],
                [
                  76.904484,
                  41.066486
                ],
                [
                  78.187197,
                  41.185316
                ],
                [
                  78.543661,
                  41.582243
                ],
                [
                  80.11943,
                  42.123941
                ],
                [
                  80.25999,
                  42.349999
                ],
                [
                  80.18015,
                  42.920068
                ],
                [
                  80.866206,
                  43.180362
                ],
                [
                  79.966106,
                  44.917517
                ],
                [
                  81.947071,
                  45.317027
                ],
                [
                  82.458926,
                  45.53965
                ],
                [
                  83.180484,
                  47.330031
                ],
                [
                  85.16429,
                  47.000956
                ],
                [
                  85.720484,
                  47.452969
                ],
                [
                  85.768233,
                  48.455751
                ],
                [
                  86.598776,
                  48.549182
                ],
                [
                  87.35997,
                  49.214981
                ],
                [
                  87.751264,
                  49.297198
                ],
                [
                  88.013832,
                  48.599463
                ],
                [
                  88.854298,
                  48.069082
                ],
                [
                  90.280826,
                  47.693549
                ],
                [
                  90.970809,
                  46.888146
                ],
                [
                  90.585768,
                  45.719716
                ],
                [
                  90.94554,
                  45.286073
                ],
                [
                  92.133891,
                  45.115076
                ],
                [
                  93.480734,
                  44.975472
                ],
                [
                  94.688929,
                  44.352332
                ],
                [
                  95.306875,
                  44.241331
                ],
                [
                  95.762455,
                  43.319449
                ],
                [
                  96.349396,
                  42.725635
                ],
                [
                  97.451757,
                  42.74889
                ],
                [
                  99.515817,
                  42.524691
                ],
                [
                  100.845866,
                  42.663804
                ],
                [
                  101.83304,
                  42.514873
                ],
                [
                  103.312278,
                  41.907468
                ],
                [
                  104.522282,
                  41.908347
                ],
                [
                  104.964994,
                  41.59741
                ],
                [
                  106.129316,
                  42.134328
                ],
                [
                  107.744773,
                  42.481516
                ],
                [
                  109.243596,
                  42.519446
                ],
                [
                  110.412103,
                  42.871234
                ],
                [
                  111.129682,
                  43.406834
                ],
                [
                  111.829588,
                  43.743118
                ],
                [
                  111.667737,
                  44.073176
                ],
                [
                  111.348377,
                  44.457442
                ],
                [
                  111.873306,
                  45.102079
                ],
                [
                  112.436062,
                  45.011646
                ],
                [
                  113.463907,
                  44.808893
                ],
                [
                  114.460332,
                  45.339817
                ],
                [
                  115.985096,
                  45.727235
                ],
                [
                  116.717868,
                  46.388202
                ],
                [
                  117.421701,
                  46.672733
                ],
                [
                  118.874326,
                  46.805412
                ],
                [
                  119.66327,
                  46.69268
                ],
                [
                  119.772824,
                  47.048059
                ],
                [
                  118.866574,
                  47.74706
                ],
                [
                  118.064143,
                  48.06673
                ],
                [
                  117.295507,
                  47.697709
                ],
                [
                  116.308953,
                  47.85341
                ],
                [
                  115.742837,
                  47.726545
                ],
                [
                  115.485282,
                  48.135383
                ],
                [
                  116.191802,
                  49.134598
                ],
                [
                  116.678801,
                  49.888531
                ],
                [
                  117.879244,
                  49.510983
                ],
                [
                  119.288461,
                  50.142883
                ],
                [
                  119.279366,
                  50.582908
                ],
                [
                  120.18205,
                  51.643566
                ],
                [
                  120.738191,
                  51.964115
                ],
                [
                  120.725789,
                  52.516226
                ],
                [
                  120.177089,
                  52.753886
                ],
                [
                  121.003085,
                  53.251401
                ],
                [
                  122.245748,
                  53.431726
                ],
                [
                  123.571507,
                  53.458804
                ],
                [
                  125.068211,
                  53.161045
                ],
                [
                  125.946349,
                  52.792799
                ],
                [
                  126.564399,
                  51.784255
                ],
                [
                  126.939157,
                  51.353894
                ],
                [
                  127.287456,
                  50.739797
                ],
                [
                  127.657407,
                  49.76027
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],47:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Christmas Island",
    "official": "Territory of Christmas Island",
    "native": {
      "eng": {
        "official": "Territory of Christmas Island",
        "common": "Christmas Island"
      }
    }
  },
  "tld": [
    ".cx"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "61"
  ],
  "capital": "Flying Fish Cove",
  "altSpellings": [
    "CX",
    "Territory of Christmas Island"
  ],
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Territory of Christmas Island",
      "common": "Ynys y Nadolig"
    },
    "deu": {
      "official": "Gebiet der Weihnachtsinsel",
      "common": "Weihnachtsinsel"
    },
    "fra": {
      "official": "Territoire de l'île Christmas",
      "common": "Île Christmas"
    },
    "hrv": {
      "official": "Teritorij Božićni otok",
      "common": "Božićni otok"
    },
    "ita": {
      "official": "Territorio di Christmas Island",
      "common": "Isola di Natale"
    },
    "jpn": {
      "official": "クリスマス島の領土",
      "common": "クリスマス島"
    },
    "nld": {
      "official": "Grondgebied van Christmas Island",
      "common": "Christmaseiland"
    },
    "por": {
      "official": "Território da Ilha Christmas",
      "common": "Ilha do Natal"
    },
    "rus": {
      "official": "Территория острова Рождества",
      "common": "Остров Рождества"
    },
    "spa": {
      "official": "Territorio de la Isla de Navidad",
      "common": "Isla de Navidad"
    },
    "fin": {
      "official": "Joulusaaren alue",
      "common": "Joulusaari"
    }
  },
  "latlng": [
    -10.5,
    105.66666666
  ],
  "demonym": "Christmas Island",
  "landlocked": false,
  "borders": [],
  "area": 135,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Christmas Island.svg",
  "codes": {
    "cca2": "CX",
    "ccn3": "162",
    "cca3": "CXR",
    "cioc": ""
  },
  "provinces": [
    "Christmas Island"
  ],
  "geoJSON": {}
}
},{}],48:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cocos (Keeling) Islands",
    "official": "Territory of the Cocos (Keeling) Islands",
    "native": {
      "eng": {
        "official": "Territory of the Cocos (Keeling) Islands",
        "common": "Cocos (Keeling) Islands"
      }
    }
  },
  "tld": [
    ".cc"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "61"
  ],
  "capital": "West Island",
  "altSpellings": [
    "CC",
    "Territory of the Cocos (Keeling) Islands",
    "Keeling Islands"
  ],
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Territory of the Cocos (Keeling) Islands",
      "common": "Ynysoedd Cocos"
    },
    "deu": {
      "official": "Gebiet der Cocos (Keeling) Islands",
      "common": "Kokosinseln"
    },
    "fra": {
      "official": "Territoire des îles Cocos (Keeling)",
      "common": "Îles Cocos"
    },
    "hrv": {
      "official": "Teritoriju Kokosovi (Keeling) Islands",
      "common": "Kokosovi Otoci"
    },
    "ita": {
      "official": "Territorio della (Keeling) Isole Cocos",
      "common": "Isole Cocos e Keeling"
    },
    "jpn": {
      "official": "ココス諸島の領土",
      "common": "ココス（キーリング）諸島"
    },
    "nld": {
      "official": "Grondgebied van de Eilanden Cocos (Keeling )",
      "common": "Cocoseilanden"
    },
    "por": {
      "official": "Território dos Cocos (Keeling)",
      "common": "Ilhas Cocos (Keeling)"
    },
    "rus": {
      "official": "Территория Кокосовые (Килинг) острова",
      "common": "Кокосовые острова"
    },
    "spa": {
      "official": "Territorio de los (Keeling) Islas Cocos",
      "common": "Islas Cocos o Islas Keeling"
    },
    "fin": {
      "official": "Kookossaaret",
      "common": "Kookossaaret"
    }
  },
  "latlng": [
    -12.5,
    96.83333333
  ],
  "demonym": "Cocos Islander",
  "landlocked": false,
  "borders": [],
  "area": 14,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Cocos (Keeling) Islands.svg",
  "codes": {
    "cca2": "CC",
    "ccn3": "166",
    "cca3": "CCK",
    "cioc": ""
  },
  "provinces": [
    "Direction Island",
    "Home Island",
    "Horsburgh Island",
    "North Keeling Island",
    "South Island",
    "West Island"
  ],
  "geoJSON": {}
}
},{}],49:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Colombia",
    "official": "Republic of Colombia",
    "native": {
      "spa": {
        "official": "República de Colombia",
        "common": "Colombia"
      }
    }
  },
  "tld": [
    ".co"
  ],
  "currency": [
    "COP"
  ],
  "callingCode": [
    "57"
  ],
  "capital": "Bogotá",
  "altSpellings": [
    "CO",
    "Republic of Colombia",
    "República de Colombia"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Colombia",
      "common": "Colombia"
    },
    "deu": {
      "official": "Republik Kolumbien",
      "common": "Kolumbien"
    },
    "fra": {
      "official": "République de Colombie",
      "common": "Colombie"
    },
    "hrv": {
      "official": "Republika Kolumbija",
      "common": "Kolumbija"
    },
    "ita": {
      "official": "Repubblica di Colombia",
      "common": "Colombia"
    },
    "jpn": {
      "official": "コロンビア共和国",
      "common": "コロンビア"
    },
    "nld": {
      "official": "Republiek Colombia",
      "common": "Colombia"
    },
    "por": {
      "official": "República da Colômbia",
      "common": "Colômbia"
    },
    "rus": {
      "official": "Республика Колумбия",
      "common": "Колумбия"
    },
    "spa": {
      "official": "República de Colombia",
      "common": "Colombia"
    },
    "fin": {
      "official": "Kolumbian tasavalta",
      "common": "Kolumbia"
    }
  },
  "latlng": [
    4,
    -72
  ],
  "demonym": "Colombian",
  "landlocked": false,
  "borders": [
    "BRA",
    "ECU",
    "PAN",
    "PER",
    "VEN"
  ],
  "area": 1141748,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Colombia.svg",
  "codes": {
    "cca2": "CO",
    "ccn3": "170",
    "cca3": "COL",
    "cioc": "COL"
  },
  "provinces": [
    "Amazonas",
    "Antioquia",
    "Arauca",
    "Atlantico",
    "Bolivar",
    "Boyaca",
    "Caldas",
    "Caqueta",
    "Casanare",
    "Cauca",
    "Cesar",
    "Choco",
    "Cordoba",
    "Cundinamarca",
    "Distrito Capital de Santa Fe de Bogota",
    "Guainia",
    "Guaviare",
    "Huila",
    "La Guajira",
    "Magdalena",
    "Meta",
    "Narino",
    "Norte de Santander",
    "Putumayo",
    "Quindio",
    "Risaralda",
    "San Andres y Providencia",
    "Santander",
    "Sucre",
    "Tolima",
    "Valle del Cauca",
    "Vaupes",
    "Vichada"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "COL",
        "properties": {
          "name": "Colombia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -75.373223,
                -0.152032
              ],
              [
                -75.801466,
                0.084801
              ],
              [
                -76.292314,
                0.416047
              ],
              [
                -76.57638,
                0.256936
              ],
              [
                -77.424984,
                0.395687
              ],
              [
                -77.668613,
                0.825893
              ],
              [
                -77.855061,
                0.809925
              ],
              [
                -78.855259,
                1.380924
              ],
              [
                -78.990935,
                1.69137
              ],
              [
                -78.617831,
                1.766404
              ],
              [
                -78.662118,
                2.267355
              ],
              [
                -78.42761,
                2.629556
              ],
              [
                -77.931543,
                2.696606
              ],
              [
                -77.510431,
                3.325017
              ],
              [
                -77.12769,
                3.849636
              ],
              [
                -77.496272,
                4.087606
              ],
              [
                -77.307601,
                4.667984
              ],
              [
                -77.533221,
                5.582812
              ],
              [
                -77.318815,
                5.845354
              ],
              [
                -77.476661,
                6.691116
              ],
              [
                -77.881571,
                7.223771
              ],
              [
                -77.753414,
                7.70984
              ],
              [
                -77.431108,
                7.638061
              ],
              [
                -77.242566,
                7.935278
              ],
              [
                -77.474723,
                8.524286
              ],
              [
                -77.353361,
                8.670505
              ],
              [
                -76.836674,
                8.638749
              ],
              [
                -76.086384,
                9.336821
              ],
              [
                -75.6746,
                9.443248
              ],
              [
                -75.664704,
                9.774003
              ],
              [
                -75.480426,
                10.61899
              ],
              [
                -74.906895,
                11.083045
              ],
              [
                -74.276753,
                11.102036
              ],
              [
                -74.197223,
                11.310473
              ],
              [
                -73.414764,
                11.227015
              ],
              [
                -72.627835,
                11.731972
              ],
              [
                -72.238195,
                11.95555
              ],
              [
                -71.75409,
                12.437303
              ],
              [
                -71.399822,
                12.376041
              ],
              [
                -71.137461,
                12.112982
              ],
              [
                -71.331584,
                11.776284
              ],
              [
                -71.973922,
                11.608672
              ],
              [
                -72.227575,
                11.108702
              ],
              [
                -72.614658,
                10.821975
              ],
              [
                -72.905286,
                10.450344
              ],
              [
                -73.027604,
                9.73677
              ],
              [
                -73.304952,
                9.152
              ],
              [
                -72.78873,
                9.085027
              ],
              [
                -72.660495,
                8.625288
              ],
              [
                -72.439862,
                8.405275
              ],
              [
                -72.360901,
                8.002638
              ],
              [
                -72.479679,
                7.632506
              ],
              [
                -72.444487,
                7.423785
              ],
              [
                -72.198352,
                7.340431
              ],
              [
                -71.960176,
                6.991615
              ],
              [
                -70.674234,
                7.087785
              ],
              [
                -70.093313,
                6.960376
              ],
              [
                -69.38948,
                6.099861
              ],
              [
                -68.985319,
                6.206805
              ],
              [
                -68.265052,
                6.153268
              ],
              [
                -67.695087,
                6.267318
              ],
              [
                -67.34144,
                6.095468
              ],
              [
                -67.521532,
                5.55687
              ],
              [
                -67.744697,
                5.221129
              ],
              [
                -67.823012,
                4.503937
              ],
              [
                -67.621836,
                3.839482
              ],
              [
                -67.337564,
                3.542342
              ],
              [
                -67.303173,
                3.318454
              ],
              [
                -67.809938,
                2.820655
              ],
              [
                -67.447092,
                2.600281
              ],
              [
                -67.181294,
                2.250638
              ],
              [
                -66.876326,
                1.253361
              ],
              [
                -67.065048,
                1.130112
              ],
              [
                -67.259998,
                1.719999
              ],
              [
                -67.53781,
                2.037163
              ],
              [
                -67.868565,
                1.692455
              ],
              [
                -69.816973,
                1.714805
              ],
              [
                -69.804597,
                1.089081
              ],
              [
                -69.218638,
                0.985677
              ],
              [
                -69.252434,
                0.602651
              ],
              [
                -69.452396,
                0.706159
              ],
              [
                -70.015566,
                0.541414
              ],
              [
                -70.020656,
                -0.185156
              ],
              [
                -69.577065,
                -0.549992
              ],
              [
                -69.420486,
                -1.122619
              ],
              [
                -69.444102,
                -1.556287
              ],
              [
                -69.893635,
                -4.298187
              ],
              [
                -70.394044,
                -3.766591
              ],
              [
                -70.692682,
                -3.742872
              ],
              [
                -70.047709,
                -2.725156
              ],
              [
                -70.813476,
                -2.256865
              ],
              [
                -71.413646,
                -2.342802
              ],
              [
                -71.774761,
                -2.16979
              ],
              [
                -72.325787,
                -2.434218
              ],
              [
                -73.070392,
                -2.308954
              ],
              [
                -73.659504,
                -1.260491
              ],
              [
                -74.122395,
                -1.002833
              ],
              [
                -74.441601,
                -0.53082
              ],
              [
                -75.106625,
                -0.057205
              ],
              [
                -75.373223,
                -0.152032
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],50:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Comoros",
    "official": "Union of the Comoros",
    "native": {
      "ara": {
        "official": "الاتحاد القمري",
        "common": "القمر‎"
      },
      "fra": {
        "official": "Union des Comores",
        "common": "Comores"
      },
      "zdj": {
        "official": "Udzima wa Komori",
        "common": "Komori"
      }
    }
  },
  "tld": [
    ".km"
  ],
  "currency": [
    "KMF"
  ],
  "callingCode": [
    "269"
  ],
  "capital": "Moroni",
  "altSpellings": [
    "KM",
    "Union of the Comoros",
    "Union des Comores",
    "Udzima wa Komori",
    "al-Ittiḥād al-Qumurī"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "ara": "Arabic",
    "fra": "French",
    "zdj": "Comorian"
  },
  "translations": {
    "cym": {
      "official": "Union of the Comoros",
      "common": "Comoros"
    },
    "deu": {
      "official": "Union der Komoren",
      "common": "Union der Komoren"
    },
    "fra": {
      "official": "Union des Comores",
      "common": "Comores"
    },
    "hrv": {
      "official": "Savez Komori",
      "common": "Komori"
    },
    "ita": {
      "official": "Unione delle Comore",
      "common": "Comore"
    },
    "jpn": {
      "official": "コモロ連合",
      "common": "コモロ"
    },
    "nld": {
      "official": "Unie van de Comoren",
      "common": "Comoren"
    },
    "por": {
      "official": "União das Comores",
      "common": "Comores"
    },
    "rus": {
      "official": "Союз Коморских Островов",
      "common": "Коморы"
    },
    "spa": {
      "official": "Unión de las Comoras",
      "common": "Comoras"
    },
    "fin": {
      "official": "Komorien liitto",
      "common": "Komorit"
    }
  },
  "latlng": [
    -12.16666666,
    44.25
  ],
  "demonym": "Comoran",
  "landlocked": false,
  "borders": [],
  "area": 1862,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Comoros.svg",
  "codes": {
    "cca2": "KM",
    "ccn3": "174",
    "cca3": "COM",
    "cioc": "COM"
  },
  "provinces": [
    "Anjouan (Nzwani)",
    "Domoni",
    "Fomboni",
    "Grande Comore (Njazidja)",
    "Moheli (Mwali)",
    "Moroni",
    "Moutsamoudou"
  ],
  "geoJSON": {}
}
},{}],51:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cook Islands",
    "official": "Cook Islands",
    "native": {
      "eng": {
        "official": "Cook Islands",
        "common": "Cook Islands"
      },
      "rar": {
        "official": "Kūki 'Āirani",
        "common": "Kūki 'Āirani"
      }
    }
  },
  "tld": [
    ".ck"
  ],
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "682"
  ],
  "capital": "Avarua",
  "altSpellings": [
    "CK",
    "Kūki 'Āirani"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "rar": "Cook Islands Māori"
  },
  "translations": {
    "cym": {
      "official": "Cook Islands",
      "common": "Ynysoedd Cook"
    },
    "deu": {
      "official": "Cook-Inseln",
      "common": "Cookinseln"
    },
    "fra": {
      "official": "Îles Cook",
      "common": "Îles Cook"
    },
    "hrv": {
      "official": "Cook Islands",
      "common": "Cookovo Otočje"
    },
    "ita": {
      "official": "Isole Cook",
      "common": "Isole Cook"
    },
    "jpn": {
      "official": "クック諸島",
      "common": "クック諸島"
    },
    "nld": {
      "official": "Cook eilanden",
      "common": "Cookeilanden"
    },
    "por": {
      "official": "Ilhas Cook",
      "common": "Ilhas Cook"
    },
    "rus": {
      "official": "острова Кука",
      "common": "Острова Кука"
    },
    "spa": {
      "official": "Islas Cook",
      "common": "Islas Cook"
    },
    "fin": {
      "official": "Cookinsaaret",
      "common": "Cookinsaaret"
    }
  },
  "latlng": [
    -21.23333333,
    -159.76666666
  ],
  "demonym": "Cook Islander",
  "landlocked": false,
  "borders": [],
  "area": 236,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Cook Islands.svg",
  "codes": {
    "cca2": "CK",
    "ccn3": "184",
    "cca3": "COK",
    "cioc": "COK"
  },
  "provinces": [
    "Aitutaki",
    "Atiu",
    "Avarua",
    "Mangaia",
    "Manihiki",
    "Manuae",
    "Mauke",
    "Mitiaro",
    "Nassau Island",
    "Palmerston",
    "Penrhyn",
    "Pukapuka",
    "Rakahanga",
    "Rarotonga",
    "Suwarrow",
    "Takutea"
  ],
  "geoJSON": {}
}
},{}],52:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Costa Rica",
    "official": "Republic of Costa Rica",
    "native": {
      "spa": {
        "official": "República de Costa Rica",
        "common": "Costa Rica"
      }
    }
  },
  "tld": [
    ".cr"
  ],
  "currency": [
    "CRC"
  ],
  "callingCode": [
    "506"
  ],
  "capital": "San José",
  "altSpellings": [
    "CR",
    "Republic of Costa Rica",
    "República de Costa Rica"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Costa Rica",
      "common": "Costa Rica"
    },
    "deu": {
      "official": "Republik Costa Rica",
      "common": "Costa Rica"
    },
    "fra": {
      "official": "République du Costa Rica",
      "common": "Costa Rica"
    },
    "hrv": {
      "official": "Republika Kostarika",
      "common": "Kostarika"
    },
    "ita": {
      "official": "Repubblica di Costa Rica",
      "common": "Costa Rica"
    },
    "jpn": {
      "official": "コスタリカ共和国",
      "common": "コスタリカ"
    },
    "nld": {
      "official": "Republiek Costa Rica",
      "common": "Costa Rica"
    },
    "por": {
      "official": "República da Costa Rica",
      "common": "Costa Rica"
    },
    "rus": {
      "official": "Республика Коста-Рика",
      "common": "Коста-Рика"
    },
    "spa": {
      "official": "República de Costa Rica",
      "common": "Costa Rica"
    },
    "fin": {
      "official": "Costa Rican tasavalta",
      "common": "Costa Rica"
    }
  },
  "latlng": [
    10,
    -84
  ],
  "demonym": "Costa Rican",
  "landlocked": false,
  "borders": [
    "NIC",
    "PAN"
  ],
  "area": 51100,
  "codes": {
    "cca2": "CR",
    "ccn3": "188",
    "cca3": "CRI",
    "cioc": "CRC"
  },
  "provinces": [
    "Alajuela",
    "Cartago",
    "Guanacaste",
    "Heredia",
    "Limon",
    "Puntarenas",
    "San Jose"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CRI",
        "properties": {
          "name": "Costa Rica"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -82.965783,
                8.225028
              ],
              [
                -83.508437,
                8.446927
              ],
              [
                -83.711474,
                8.656836
              ],
              [
                -83.596313,
                8.830443
              ],
              [
                -83.632642,
                9.051386
              ],
              [
                -83.909886,
                9.290803
              ],
              [
                -84.303402,
                9.487354
              ],
              [
                -84.647644,
                9.615537
              ],
              [
                -84.713351,
                9.908052
              ],
              [
                -84.97566,
                10.086723
              ],
              [
                -84.911375,
                9.795992
              ],
              [
                -85.110923,
                9.55704
              ],
              [
                -85.339488,
                9.834542
              ],
              [
                -85.660787,
                9.933347
              ],
              [
                -85.797445,
                10.134886
              ],
              [
                -85.791709,
                10.439337
              ],
              [
                -85.659314,
                10.754331
              ],
              [
                -85.941725,
                10.895278
              ],
              [
                -85.71254,
                11.088445
              ],
              [
                -85.561852,
                11.217119
              ],
              [
                -84.903003,
                10.952303
              ],
              [
                -84.673069,
                11.082657
              ],
              [
                -84.355931,
                10.999226
              ],
              [
                -84.190179,
                10.79345
              ],
              [
                -83.895054,
                10.726839
              ],
              [
                -83.655612,
                10.938764
              ],
              [
                -83.40232,
                10.395438
              ],
              [
                -83.015677,
                9.992982
              ],
              [
                -82.546196,
                9.566135
              ],
              [
                -82.932891,
                9.476812
              ],
              [
                -82.927155,
                9.07433
              ],
              [
                -82.719183,
                8.925709
              ],
              [
                -82.868657,
                8.807266
              ],
              [
                -82.829771,
                8.626295
              ],
              [
                -82.913176,
                8.423517
              ],
              [
                -82.965783,
                8.225028
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],53:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Croatia",
    "official": "Republic of Croatia",
    "native": {
      "hrv": {
        "official": "Republika Hrvatska",
        "common": "Hrvatska"
      }
    }
  },
  "tld": [
    ".hr"
  ],
  "currency": [
    "HRK"
  ],
  "callingCode": [
    "385"
  ],
  "capital": "Zagreb",
  "altSpellings": [
    "HR",
    "Hrvatska",
    "Republic of Croatia",
    "Republika Hrvatska"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "hrv": "Croatian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Croatia",
      "common": "Croatia"
    },
    "deu": {
      "official": "Republik Kroatien",
      "common": "Kroatien"
    },
    "fra": {
      "official": "République de Croatie",
      "common": "Croatie"
    },
    "hrv": {
      "official": "Republika Hrvatska",
      "common": "Hrvatska"
    },
    "ita": {
      "official": "Repubblica di Croazia",
      "common": "Croazia"
    },
    "jpn": {
      "official": "クロアチア共和国",
      "common": "クロアチア"
    },
    "nld": {
      "official": "Republiek Kroatië",
      "common": "Kroatië"
    },
    "por": {
      "official": "República da Croácia",
      "common": "Croácia"
    },
    "rus": {
      "official": "Республика Хорватия",
      "common": "Хорватия"
    },
    "spa": {
      "official": "República de Croacia",
      "common": "Croacia"
    },
    "fin": {
      "official": "Kroatian tasavalta",
      "common": "Kroatia"
    }
  },
  "latlng": [
    45.16666666,
    15.5
  ],
  "demonym": "Croatian",
  "landlocked": false,
  "borders": [
    "BIH",
    "HUN",
    "MNE",
    "SRB",
    "SVN"
  ],
  "area": 56594,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Croatia.svg",
  "codes": {
    "cca2": "HR",
    "ccn3": "191",
    "cca3": "HRV",
    "cioc": "CRO"
  },
  "provinces": [
    "Bjelovarsko-Bilogorska Zupanija",
    "Brodsko-Posavska Zupanija",
    "Dubrovacko-Neretvanska Zupanija",
    "Istarska Zupanija",
    "Karlovacka Zupanija",
    "Koprivnicko-Krizevacka Zupanija",
    "Krapinsko-Zagorska Zupanija",
    "Licko-Senjska Zupanija",
    "Medimurska Zupanija",
    "Osjecko-Baranjska Zupanija",
    "Pozesko-Slavonska Zupanija",
    "Primorsko-Goranska Zupanija",
    "Sibensko-Kninska Zupanija",
    "Sisacko-Moslavacka Zupanija",
    "Splitsko-Dalmatinska Zupanija",
    "Varazdinska Zupanija",
    "Viroviticko-Podravska Zupanija",
    "Vukovarsko-Srijemska Zupanija",
    "Zadarska Zupanija",
    "Zagreb",
    "Zagrebacka Zupanija"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "HRV",
        "properties": {
          "name": "Croatia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                18.829838,
                45.908878
              ],
              [
                19.072769,
                45.521511
              ],
              [
                19.390476,
                45.236516
              ],
              [
                19.005486,
                44.860234
              ],
              [
                18.553214,
                45.08159
              ],
              [
                17.861783,
                45.06774
              ],
              [
                17.002146,
                45.233777
              ],
              [
                16.534939,
                45.211608
              ],
              [
                16.318157,
                45.004127
              ],
              [
                15.959367,
                45.233777
              ],
              [
                15.750026,
                44.818712
              ],
              [
                16.23966,
                44.351143
              ],
              [
                16.456443,
                44.04124
              ],
              [
                16.916156,
                43.667722
              ],
              [
                17.297373,
                43.446341
              ],
              [
                17.674922,
                43.028563
              ],
              [
                18.56,
                42.65
              ],
              [
                18.450016,
                42.479991
              ],
              [
                17.50997,
                42.849995
              ],
              [
                16.930006,
                43.209998
              ],
              [
                16.015385,
                43.507215
              ],
              [
                15.174454,
                44.243191
              ],
              [
                15.37625,
                44.317915
              ],
              [
                14.920309,
                44.738484
              ],
              [
                14.901602,
                45.07606
              ],
              [
                14.258748,
                45.233777
              ],
              [
                13.952255,
                44.802124
              ],
              [
                13.656976,
                45.136935
              ],
              [
                13.679403,
                45.484149
              ],
              [
                13.71506,
                45.500324
              ],
              [
                14.411968,
                45.466166
              ],
              [
                14.595109,
                45.634941
              ],
              [
                14.935244,
                45.471695
              ],
              [
                15.327675,
                45.452316
              ],
              [
                15.323954,
                45.731783
              ],
              [
                15.67153,
                45.834154
              ],
              [
                15.768733,
                46.238108
              ],
              [
                16.564808,
                46.503751
              ],
              [
                16.882515,
                46.380632
              ],
              [
                17.630066,
                45.951769
              ],
              [
                18.456062,
                45.759481
              ],
              [
                18.829838,
                45.908878
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],54:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cuba",
    "official": "Republic of Cuba",
    "native": {
      "spa": {
        "official": "República de Cuba",
        "common": "Cuba"
      }
    }
  },
  "tld": [
    ".cu"
  ],
  "currency": [
    "CUC",
    "CUP"
  ],
  "callingCode": [
    "53"
  ],
  "capital": "Havana",
  "altSpellings": [
    "CU",
    "Republic of Cuba",
    "República de Cuba"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Cuba",
      "common": "Ciwba"
    },
    "deu": {
      "official": "Republik Kuba",
      "common": "Kuba"
    },
    "fra": {
      "official": "République de Cuba",
      "common": "Cuba"
    },
    "hrv": {
      "official": "Republika Kuba",
      "common": "Kuba"
    },
    "ita": {
      "official": "Repubblica di Cuba",
      "common": "Cuba"
    },
    "jpn": {
      "official": "キューバ共和国",
      "common": "キューバ"
    },
    "nld": {
      "official": "Republiek Cuba",
      "common": "Cuba"
    },
    "por": {
      "official": "República de Cuba",
      "common": "Cuba"
    },
    "rus": {
      "official": "Республика Куба",
      "common": "Куба"
    },
    "spa": {
      "official": "República de Cuba",
      "common": "Cuba"
    },
    "fin": {
      "official": "Kuuban tasavalta",
      "common": "Kuuba"
    }
  },
  "latlng": [
    21.5,
    -80
  ],
  "demonym": "Cuban",
  "landlocked": false,
  "borders": [],
  "area": 109884,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Cuba.svg",
  "codes": {
    "cca2": "CU",
    "ccn3": "192",
    "cca3": "CUB",
    "cioc": "CUB"
  },
  "provinces": [
    "Camaguey",
    "Ciego de Avila",
    "Cienfuegos",
    "Ciudad de La Habana",
    "Granma",
    "Guantanamo",
    "Holguin",
    "Isla de la Juventud",
    "La Habana",
    "Las Tunas",
    "Matanzas",
    "Pinar del Rio",
    "Sancti Spiritus",
    "Santiago de Cuba",
    "Villa Clara"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CUB",
        "properties": {
          "name": "Cuba"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -82.268151,
                23.188611
              ],
              [
                -81.404457,
                23.117271
              ],
              [
                -80.618769,
                23.10598
              ],
              [
                -79.679524,
                22.765303
              ],
              [
                -79.281486,
                22.399202
              ],
              [
                -78.347434,
                22.512166
              ],
              [
                -77.993296,
                22.277194
              ],
              [
                -77.146422,
                21.657851
              ],
              [
                -76.523825,
                21.20682
              ],
              [
                -76.19462,
                21.220565
              ],
              [
                -75.598222,
                21.016624
              ],
              [
                -75.67106,
                20.735091
              ],
              [
                -74.933896,
                20.693905
              ],
              [
                -74.178025,
                20.284628
              ],
              [
                -74.296648,
                20.050379
              ],
              [
                -74.961595,
                19.923435
              ],
              [
                -75.63468,
                19.873774
              ],
              [
                -76.323656,
                19.952891
              ],
              [
                -77.755481,
                19.855481
              ],
              [
                -77.085108,
                20.413354
              ],
              [
                -77.492655,
                20.673105
              ],
              [
                -78.137292,
                20.739949
              ],
              [
                -78.482827,
                21.028613
              ],
              [
                -78.719867,
                21.598114
              ],
              [
                -79.285,
                21.559175
              ],
              [
                -80.217475,
                21.827324
              ],
              [
                -80.517535,
                22.037079
              ],
              [
                -81.820943,
                22.192057
              ],
              [
                -82.169992,
                22.387109
              ],
              [
                -81.795002,
                22.636965
              ],
              [
                -82.775898,
                22.68815
              ],
              [
                -83.494459,
                22.168518
              ],
              [
                -83.9088,
                22.154565
              ],
              [
                -84.052151,
                21.910575
              ],
              [
                -84.54703,
                21.801228
              ],
              [
                -84.974911,
                21.896028
              ],
              [
                -84.447062,
                22.20495
              ],
              [
                -84.230357,
                22.565755
              ],
              [
                -83.77824,
                22.788118
              ],
              [
                -83.267548,
                22.983042
              ],
              [
                -82.510436,
                23.078747
              ],
              [
                -82.268151,
                23.188611
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],55:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Curaçao",
    "official": "Country of Curaçao",
    "native": {
      "eng": {
        "official": "Country of Curaçao",
        "common": "Curaçao"
      },
      "nld": {
        "official": "Land Curaçao",
        "common": "Curaçao"
      },
      "pap": {
        "official": "Pais Kòrsou",
        "common": "Pais Kòrsou"
      }
    }
  },
  "tld": [
    ".cw"
  ],
  "currency": [
    "ANG"
  ],
  "callingCode": [
    "5999"
  ],
  "capital": "Willemstad",
  "altSpellings": [
    "CW",
    "Curacao",
    "Kòrsou",
    "Country of Curaçao",
    "Land Curaçao",
    "Pais Kòrsou"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English",
    "nld": "Dutch",
    "pap": "Papiamento"
  },
  "translations": {
    "fra": {
      "official": "Curaçao",
      "common": "Curaçao"
    },
    "nld": {
      "official": "Land Curaçao",
      "common": "Curaçao"
    },
    "por": {
      "official": "País de Curaçao",
      "common": "ilha da Curação"
    },
    "rus": {
      "official": "Страна Кюрасао",
      "common": "Кюрасао"
    },
    "spa": {
      "official": "País de Curazao",
      "common": "Curazao"
    },
    "fin": {
      "official": "Curaçao",
      "common": "Curaçao"
    }
  },
  "latlng": [
    12.116667,
    -68.933333
  ],
  "demonym": "Dutch",
  "landlocked": false,
  "borders": [],
  "area": 444,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Curaçao.svg",
  "codes": {
    "cca2": "CW",
    "ccn3": "531",
    "cca3": "CUW",
    "cioc": ""
  }
}
},{}],56:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cyprus",
    "official": "Republic of Cyprus",
    "native": {
      "ell": {
        "official": "Δημοκρατία της Κύπρος",
        "common": "Κύπρος"
      },
      "tur": {
        "official": "Kıbrıs Cumhuriyeti",
        "common": "Kıbrıs"
      }
    }
  },
  "tld": [
    ".cy"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "357"
  ],
  "capital": "Nicosia",
  "altSpellings": [
    "CY",
    "Kýpros",
    "Kıbrıs",
    "Republic of Cyprus",
    "Κυπριακή Δημοκρατία",
    "Kıbrıs Cumhuriyeti"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "ell": "Greek",
    "tur": "Turkish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Cyprus",
      "common": "Cyprus"
    },
    "deu": {
      "official": "Republik Zypern",
      "common": "Zypern"
    },
    "fra": {
      "official": "République de Chypre",
      "common": "Chypre"
    },
    "hrv": {
      "official": "Republika Cipar",
      "common": "Cipar"
    },
    "ita": {
      "official": "Repubblica di Cipro",
      "common": "Cipro"
    },
    "jpn": {
      "official": "キプロス共和国",
      "common": "キプロス"
    },
    "nld": {
      "official": "Republiek Cyprus",
      "common": "Cyprus"
    },
    "por": {
      "official": "República de Chipre",
      "common": "Chipre"
    },
    "rus": {
      "official": "Республика Кипр",
      "common": "Кипр"
    },
    "spa": {
      "official": "República de Chipre",
      "common": "Chipre"
    },
    "fin": {
      "official": "Kyproksen tasavalta",
      "common": "Kypros"
    }
  },
  "latlng": [
    35,
    33
  ],
  "demonym": "Cypriot",
  "landlocked": false,
  "borders": [
    "GBR"
  ],
  "area": 9251,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Cyprus.svg",
  "codes": {
    "cca2": "CY",
    "ccn3": "196",
    "cca3": "CYP",
    "cioc": "CYP"
  },
  "provinces": [
    "Famagusta",
    "Kyrenia",
    "Larnaca",
    "Limassol",
    "Nicosia",
    "Paphos"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CYP",
        "properties": {
          "name": "Cyprus"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                33.973617,
                35.058506
              ],
              [
                34.004881,
                34.978098
              ],
              [
                32.979827,
                34.571869
              ],
              [
                32.490296,
                34.701655
              ],
              [
                32.256667,
                35.103232
              ],
              [
                32.73178,
                35.140026
              ],
              [
                32.919572,
                35.087833
              ],
              [
                33.190977,
                35.173125
              ],
              [
                33.383833,
                35.162712
              ],
              [
                33.455922,
                35.101424
              ],
              [
                33.475817,
                35.000345
              ],
              [
                33.525685,
                35.038688
              ],
              [
                33.675392,
                35.017863
              ],
              [
                33.86644,
                35.093595
              ],
              [
                33.973617,
                35.058506
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],57:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Czech Republic",
    "official": "Czech Republic",
    "native": {
      "ces": {
        "official": "česká republika",
        "common": "Česká republika"
      },
      "slk": {
        "official": "Česká republika",
        "common": "Česká republika"
      }
    }
  },
  "tld": [
    ".cz"
  ],
  "currency": [
    "CZK"
  ],
  "callingCode": [
    "420"
  ],
  "capital": "Prague",
  "altSpellings": [
    "CZ",
    "Česká republika",
    "Česko"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "ces": "Czech",
    "slk": "Slovak"
  },
  "translations": {
    "cym": {
      "official": "Czech Republic",
      "common": "Y Weriniaeth Tsiec"
    },
    "deu": {
      "official": "Tschechische Republik",
      "common": "Tschechische Republik"
    },
    "fra": {
      "official": "République tchèque",
      "common": "République tchèque"
    },
    "hrv": {
      "official": "Češka",
      "common": "Češka"
    },
    "ita": {
      "official": "Repubblica Ceca",
      "common": "Repubblica Ceca"
    },
    "jpn": {
      "official": "チェコ共和国",
      "common": "チェコ"
    },
    "nld": {
      "official": "Tsjechische Republiek",
      "common": "Tsjechië"
    },
    "por": {
      "official": "República Checa",
      "common": "República Checa"
    },
    "rus": {
      "official": "Чешская Республика",
      "common": "Чехия"
    },
    "spa": {
      "official": "República Checa",
      "common": "República Checa"
    },
    "fin": {
      "official": "Tšekin tasavalta",
      "common": "Tšekki"
    }
  },
  "latlng": [
    49.75,
    15.5
  ],
  "demonym": "Czech",
  "landlocked": true,
  "borders": [
    "AUT",
    "DEU",
    "POL",
    "SVK"
  ],
  "area": 78865,
  "codes": {
    "cca2": "CZ",
    "ccn3": "203",
    "cca3": "CZE",
    "cioc": "CZE"
  }
}
},{}],58:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Denmark",
    "official": "Kingdom of Denmark",
    "native": {
      "dan": {
        "official": "Kongeriget Danmark",
        "common": "Danmark"
      }
    }
  },
  "tld": [
    ".dk"
  ],
  "currency": [
    "DKK"
  ],
  "callingCode": [
    "45"
  ],
  "capital": "Copenhagen",
  "altSpellings": [
    "DK",
    "Danmark",
    "Kingdom of Denmark",
    "Kongeriget Danmark"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "dan": "Danish"
  },
  "translations": {
    "cym": {
      "official": "Kingdom of Denmark",
      "common": "Denmarc"
    },
    "deu": {
      "official": "Königreich Dänemark",
      "common": "Dänemark"
    },
    "fra": {
      "official": "Royaume du Danemark",
      "common": "Danemark"
    },
    "hrv": {
      "official": "Kraljevina Danska",
      "common": "Danska"
    },
    "ita": {
      "official": "Regno di Danimarca",
      "common": "Danimarca"
    },
    "jpn": {
      "official": "デンマーク王国",
      "common": "デンマーク"
    },
    "nld": {
      "official": "Koninkrijk Denemarken",
      "common": "Denemarken"
    },
    "por": {
      "official": "Reino da Dinamarca",
      "common": "Dinamarca"
    },
    "rus": {
      "official": "Королевство Дания",
      "common": "Дания"
    },
    "spa": {
      "official": "Reino de Dinamarca",
      "common": "Dinamarca"
    },
    "fin": {
      "official": "Tanskan kuningaskunta",
      "common": "Tanska"
    }
  },
  "latlng": [
    56,
    10
  ],
  "demonym": "Danish",
  "landlocked": false,
  "borders": [
    "DEU"
  ],
  "area": 43094,
  "codes": {
    "cca2": "DK",
    "ccn3": "208",
    "cca3": "DNK",
    "cioc": "DEN"
  },
  "provinces": [
    "Arhus",
    "Bornholm",
    "Fredericksberg",
    "Frederiksborg",
    "Fyn",
    "Kobenhavn",
    "Kobenhavns",
    "Nordjylland",
    "Ribe",
    "Ringkobing",
    "Roskilde",
    "Sonderjylland",
    "Storstrom",
    "Vejle",
    "Vestsjalland",
    "Viborg"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "DNK",
        "properties": {
          "name": "Denmark"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  12.690006,
                  55.609991
                ],
                [
                  12.089991,
                  54.800015
                ],
                [
                  11.043543,
                  55.364864
                ],
                [
                  10.903914,
                  55.779955
                ],
                [
                  12.370904,
                  56.111407
                ],
                [
                  12.690006,
                  55.609991
                ]
              ]
            ],
            [
              [
                [
                  10.912182,
                  56.458621
                ],
                [
                  10.667804,
                  56.081383
                ],
                [
                  10.369993,
                  56.190007
                ],
                [
                  9.649985,
                  55.469999
                ],
                [
                  9.921906,
                  54.983104
                ],
                [
                  9.282049,
                  54.830865
                ],
                [
                  8.526229,
                  54.962744
                ],
                [
                  8.120311,
                  55.517723
                ],
                [
                  8.089977,
                  56.540012
                ],
                [
                  8.256582,
                  56.809969
                ],
                [
                  8.543438,
                  57.110003
                ],
                [
                  9.424469,
                  57.172066
                ],
                [
                  9.775559,
                  57.447941
                ],
                [
                  10.580006,
                  57.730017
                ],
                [
                  10.546106,
                  57.215733
                ],
                [
                  10.25,
                  56.890016
                ],
                [
                  10.369993,
                  56.609982
                ],
                [
                  10.912182,
                  56.458621
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],59:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Djibouti",
    "official": "Republic of Djibouti",
    "native": {
      "ara": {
        "official": "جمهورية جيبوتي",
        "common": "جيبوتي‎"
      },
      "fra": {
        "official": "République de Djibouti",
        "common": "Djibouti"
      }
    }
  },
  "tld": [
    ".dj"
  ],
  "currency": [
    "DJF"
  ],
  "callingCode": [
    "253"
  ],
  "capital": "Djibouti",
  "altSpellings": [
    "DJ",
    "Jabuuti",
    "Gabuuti",
    "Republic of Djibouti",
    "République de Djibouti",
    "Gabuutih Ummuuno",
    "Jamhuuriyadda Jabuuti"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "ara": "Arabic",
    "fra": "French"
  },
  "translations": {
    "cym": {
      "official": "Republic of Djibouti",
      "common": "Djibouti"
    },
    "deu": {
      "official": "Republik Dschibuti",
      "common": "Dschibuti"
    },
    "fra": {
      "official": "République de Djibouti",
      "common": "Djibouti"
    },
    "hrv": {
      "official": "Republika Džibuti",
      "common": "Džibuti"
    },
    "ita": {
      "official": "Repubblica di Gibuti",
      "common": "Gibuti"
    },
    "jpn": {
      "official": "ジブチ共和国",
      "common": "ジブチ"
    },
    "nld": {
      "official": "Republiek Djibouti",
      "common": "Djibouti"
    },
    "por": {
      "official": "República do Djibouti",
      "common": "Djibouti"
    },
    "rus": {
      "official": "Республика Джибути",
      "common": "Джибути"
    },
    "spa": {
      "official": "República de Djibouti",
      "common": "Djibouti"
    },
    "fin": {
      "official": "Dijiboutin tasavalta",
      "common": "Dijibouti"
    }
  },
  "latlng": [
    11.5,
    43
  ],
  "demonym": "Djibouti",
  "landlocked": false,
  "borders": [
    "ERI",
    "ETH",
    "SOM"
  ],
  "area": 23200,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Djibouti.svg",
  "codes": {
    "cca2": "DJ",
    "ccn3": "262",
    "cca3": "DJI",
    "cioc": "DJI"
  },
  "provinces": [
    "'Ali Sabih",
    "Dikhil",
    "Djibouti",
    "Obock",
    "Tadjoura"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "DJI",
        "properties": {
          "name": "Djibouti"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                43.081226,
                12.699639
              ],
              [
                43.317852,
                12.390148
              ],
              [
                43.286381,
                11.974928
              ],
              [
                42.715874,
                11.735641
              ],
              [
                43.145305,
                11.46204
              ],
              [
                42.776852,
                10.926879
              ],
              [
                42.55493,
                11.10511
              ],
              [
                42.31414,
                11.0342
              ],
              [
                41.75557,
                11.05091
              ],
              [
                41.73959,
                11.35511
              ],
              [
                41.66176,
                11.6312
              ],
              [
                42,
                12.1
              ],
              [
                42.35156,
                12.54223
              ],
              [
                42.779642,
                12.455416
              ],
              [
                43.081226,
                12.699639
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],60:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Dominica",
    "official": "Commonwealth of Dominica",
    "native": {
      "eng": {
        "official": "Commonwealth of Dominica",
        "common": "Dominica"
      }
    }
  },
  "tld": [
    ".dm"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1767"
  ],
  "capital": "Roseau",
  "altSpellings": [
    "DM",
    "Dominique",
    "Wai‘tu kubuli",
    "Commonwealth of Dominica"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "Commonwealth of Dominica",
      "common": "Dominica"
    },
    "deu": {
      "official": "Commonwealth von Dominica",
      "common": "Dominica"
    },
    "fra": {
      "official": "Commonwealth de la Dominique",
      "common": "Dominique"
    },
    "hrv": {
      "official": "Zajednica Dominika",
      "common": "Dominika"
    },
    "ita": {
      "official": "Commonwealth di Dominica",
      "common": "Dominica"
    },
    "jpn": {
      "official": "ドミニカ国",
      "common": "ドミニカ国"
    },
    "nld": {
      "official": "Gemenebest Dominica",
      "common": "Dominica"
    },
    "por": {
      "official": "Comunidade da Dominica",
      "common": "Dominica"
    },
    "rus": {
      "official": "Содружество Доминики",
      "common": "Доминика"
    },
    "spa": {
      "official": "Mancomunidad de Dominica",
      "common": "Dominica"
    },
    "fin": {
      "official": "Dominican liittovaltio",
      "common": "Dominica"
    }
  },
  "latlng": [
    15.41666666,
    -61.33333333
  ],
  "demonym": "Dominican",
  "landlocked": false,
  "borders": [],
  "area": 751,
  "codes": {
    "cca2": "DM",
    "ccn3": "212",
    "cca3": "DMA",
    "cioc": "DMA"
  },
  "provinces": [
    "Saint Andrew",
    "Saint David",
    "Saint George",
    "Saint John",
    "Saint Joseph",
    "Saint Luke",
    "Saint Mark",
    "Saint Patrick",
    "Saint Paul",
    "Saint Peter"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],61:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Dominican Republic",
    "official": "Dominican Republic",
    "native": {
      "spa": {
        "official": "República Dominicana",
        "common": "República Dominicana"
      }
    }
  },
  "tld": [
    ".do"
  ],
  "currency": [
    "DOP"
  ],
  "callingCode": [
    "1809",
    "1829",
    "1849"
  ],
  "capital": "Santo Domingo",
  "altSpellings": [
    "DO"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Dominican Republic",
      "common": "Gweriniaeth_Dominica"
    },
    "deu": {
      "official": "Dominikanische Republik",
      "common": "Dominikanische Republik"
    },
    "fra": {
      "official": "République Dominicaine",
      "common": "République dominicaine"
    },
    "hrv": {
      "official": "Dominikanska Republika",
      "common": "Dominikanska Republika"
    },
    "ita": {
      "official": "Repubblica Dominicana",
      "common": "Repubblica Dominicana"
    },
    "jpn": {
      "official": "ドミニカ共和国",
      "common": "ドミニカ共和国"
    },
    "nld": {
      "official": "Dominicaanse Republiek",
      "common": "Dominicaanse Republiek"
    },
    "por": {
      "official": "República Dominicana",
      "common": "República Dominicana"
    },
    "rus": {
      "official": "Доминиканская Республика",
      "common": "Доминиканская Республика"
    },
    "spa": {
      "official": "República Dominicana",
      "common": "República Dominicana"
    },
    "fin": {
      "official": "Dominikaaninen tasavalta",
      "common": "Dominikaaninen tasavalta"
    }
  },
  "latlng": [
    19,
    -70.66666666
  ],
  "demonym": "Dominican",
  "landlocked": false,
  "borders": [
    "HTI"
  ],
  "area": 48671,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Dominican Republic.svg",
  "codes": {
    "cca2": "DO",
    "ccn3": "214",
    "cca3": "DOM",
    "cioc": "DOM"
  },
  "provinces": [
    "Azua",
    "Baoruco",
    "Barahona",
    "Dajabon",
    "Distrito Nacional",
    "Duarte",
    "El Seibo",
    "Elias Pina",
    "Espaillat",
    "Hato Mayor",
    "Independencia",
    "La Altagracia",
    "La Romana",
    "La Vega",
    "Maria Trinidad Sanchez",
    "Monsenor Nouel",
    "Monte Cristi",
    "Monte Plata",
    "Pedernales",
    "Peravia",
    "Puerto Plata",
    "Salcedo",
    "Samana",
    "San Cristobal",
    "San Juan",
    "San Pedro de Macoris",
    "Sanchez Ramirez",
    "Santiago",
    "Santiago Rodriguez",
    "Valverde"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "DOM",
        "properties": {
          "name": "Dominican Republic"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -71.712361,
                19.714456
              ],
              [
                -71.587304,
                19.884911
              ],
              [
                -70.806706,
                19.880286
              ],
              [
                -70.214365,
                19.622885
              ],
              [
                -69.950815,
                19.648
              ],
              [
                -69.76925,
                19.293267
              ],
              [
                -69.222126,
                19.313214
              ],
              [
                -69.254346,
                19.015196
              ],
              [
                -68.809412,
                18.979074
              ],
              [
                -68.317943,
                18.612198
              ],
              [
                -68.689316,
                18.205142
              ],
              [
                -69.164946,
                18.422648
              ],
              [
                -69.623988,
                18.380713
              ],
              [
                -69.952934,
                18.428307
              ],
              [
                -70.133233,
                18.245915
              ],
              [
                -70.517137,
                18.184291
              ],
              [
                -70.669298,
                18.426886
              ],
              [
                -70.99995,
                18.283329
              ],
              [
                -71.40021,
                17.598564
              ],
              [
                -71.657662,
                17.757573
              ],
              [
                -71.708305,
                18.044997
              ],
              [
                -71.687738,
                18.31666
              ],
              [
                -71.945112,
                18.6169
              ],
              [
                -71.701303,
                18.785417
              ],
              [
                -71.624873,
                19.169838
              ],
              [
                -71.712361,
                19.714456
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],62:[function(require,module,exports){
module.exports={
  "name": {
    "common": "DR Congo",
    "official": "Democratic Republic of the Congo",
    "native": {
      "fra": {
        "official": "République démocratique du Congo",
        "common": "RD Congo"
      },
      "kon": {
        "official": "Repubilika ya Kongo Demokratiki",
        "common": "Repubilika ya Kongo Demokratiki"
      },
      "lin": {
        "official": "Republiki ya Kongó Demokratiki",
        "common": "Republiki ya Kongó Demokratiki"
      },
      "lua": {
        "official": "Ditunga dia Kongu wa Mungalaata",
        "common": "Ditunga dia Kongu wa Mungalaata"
      },
      "swa": {
        "official": "Jamhuri ya Kidemokrasia ya Kongo",
        "common": "Jamhuri ya Kidemokrasia ya Kongo"
      }
    }
  },
  "tld": [
    ".cd"
  ],
  "currency": [
    "CDF"
  ],
  "callingCode": [
    "243"
  ],
  "capital": "Kinshasa",
  "altSpellings": [
    "CD",
    "DR Congo",
    "Congo-Kinshasa",
    "Congo, the Democratic Republic of the",
    "DRC"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French",
    "kon": "Kikongo",
    "lin": "Lingala",
    "lua": "Tshiluba",
    "swa": "Swahili"
  },
  "translations": {
    "cym": {
      "official": "Democratic Republic of the Congo",
      "common": "Gweriniaeth Ddemocrataidd Congo"
    },
    "deu": {
      "official": "Demokratische Republik Kongo",
      "common": "Kongo (Dem. Rep.)"
    },
    "fra": {
      "official": "République démocratique du Congo",
      "common": "Congo (Rép. dém.)"
    },
    "hrv": {
      "official": "Demokratska Republika Kongo",
      "common": "Kongo, Demokratska Republika"
    },
    "ita": {
      "official": "Repubblica Democratica del Congo",
      "common": "Congo (Rep. Dem.)"
    },
    "jpn": {
      "official": "コンゴ民主共和国",
      "common": "コンゴ民主共和国"
    },
    "nld": {
      "official": "Democratische Republiek Congo",
      "common": "Congo (DRC)"
    },
    "por": {
      "official": "República Democrática do Congo",
      "common": "República Democrática do Congo"
    },
    "rus": {
      "official": "Демократическая Республика Конго",
      "common": "Демократическая Республика Конго"
    },
    "spa": {
      "official": "República Democrática del Congo",
      "common": "Congo (Rep. Dem.)"
    },
    "fin": {
      "official": "Kongon demokraattinen tasavalta",
      "common": "Kongon demokraattinen tasavalta"
    }
  },
  "latlng": [
    0,
    25
  ],
  "demonym": "Congolese",
  "landlocked": false,
  "borders": [
    "AGO",
    "BDI",
    "CAF",
    "COG",
    "RWA",
    "SSD",
    "TZA",
    "UGA",
    "ZMB"
  ],
  "area": 2344858,
  "codes": {
    "cca2": "CD",
    "ccn3": "180",
    "cca3": "COD",
    "cioc": "COD"
  }
}
},{}],63:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ecuador",
    "official": "Republic of Ecuador",
    "native": {
      "spa": {
        "official": "República del Ecuador",
        "common": "Ecuador"
      }
    }
  },
  "tld": [
    ".ec"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "593"
  ],
  "capital": "Quito",
  "altSpellings": [
    "EC",
    "Republic of Ecuador",
    "República del Ecuador"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Ecuador",
      "common": "Ecwador"
    },
    "deu": {
      "official": "Republik Ecuador",
      "common": "Ecuador"
    },
    "fra": {
      "official": "République de l'Équateur",
      "common": "Équateur"
    },
    "hrv": {
      "official": "Republika Ekvador",
      "common": "Ekvador"
    },
    "ita": {
      "official": "Repubblica dell'Ecuador",
      "common": "Ecuador"
    },
    "jpn": {
      "official": "エクアドル共和国",
      "common": "エクアドル"
    },
    "nld": {
      "official": "Republiek Ecuador",
      "common": "Ecuador"
    },
    "por": {
      "official": "República do Equador",
      "common": "Equador"
    },
    "rus": {
      "official": "Республика Эквадор",
      "common": "Эквадор"
    },
    "spa": {
      "official": "República del Ecuador",
      "common": "Ecuador"
    },
    "fin": {
      "official": "Ecuadorin tasavalta",
      "common": "Ecuador"
    }
  },
  "latlng": [
    -2,
    -77.5
  ],
  "demonym": "Ecuadorean",
  "landlocked": false,
  "borders": [
    "COL",
    "PER"
  ],
  "area": 276841,
  "codes": {
    "cca2": "EC",
    "ccn3": "218",
    "cca3": "ECU",
    "cioc": "ECU"
  },
  "provinces": [
    "Azuay",
    "Bolivar",
    "Canar",
    "Carchi",
    "Chimborazo",
    "Cotopaxi",
    "El Oro",
    "Esmeraldas",
    "Galapagos",
    "Guayas",
    "Imbabura",
    "Loja",
    "Los Rios",
    "Manabi",
    "Morona-Santiago",
    "Napo",
    "Orellana",
    "Pastaza",
    "Pichincha",
    "Sucumbios",
    "Tungurahua",
    "Zamora-Chinchipe"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ECU",
        "properties": {
          "name": "Ecuador"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -80.302561,
                -3.404856
              ],
              [
                -79.770293,
                -2.657512
              ],
              [
                -79.986559,
                -2.220794
              ],
              [
                -80.368784,
                -2.685159
              ],
              [
                -80.967765,
                -2.246943
              ],
              [
                -80.764806,
                -1.965048
              ],
              [
                -80.933659,
                -1.057455
              ],
              [
                -80.58337,
                -0.906663
              ],
              [
                -80.399325,
                -0.283703
              ],
              [
                -80.020898,
                0.36034
              ],
              [
                -80.09061,
                0.768429
              ],
              [
                -79.542762,
                0.982938
              ],
              [
                -78.855259,
                1.380924
              ],
              [
                -77.855061,
                0.809925
              ],
              [
                -77.668613,
                0.825893
              ],
              [
                -77.424984,
                0.395687
              ],
              [
                -76.57638,
                0.256936
              ],
              [
                -76.292314,
                0.416047
              ],
              [
                -75.801466,
                0.084801
              ],
              [
                -75.373223,
                -0.152032
              ],
              [
                -75.233723,
                -0.911417
              ],
              [
                -75.544996,
                -1.56161
              ],
              [
                -76.635394,
                -2.608678
              ],
              [
                -77.837905,
                -3.003021
              ],
              [
                -78.450684,
                -3.873097
              ],
              [
                -78.639897,
                -4.547784
              ],
              [
                -79.205289,
                -4.959129
              ],
              [
                -79.624979,
                -4.454198
              ],
              [
                -80.028908,
                -4.346091
              ],
              [
                -80.442242,
                -4.425724
              ],
              [
                -80.469295,
                -4.059287
              ],
              [
                -80.184015,
                -3.821162
              ],
              [
                -80.302561,
                -3.404856
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],64:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Egypt",
    "official": "Arab Republic of Egypt",
    "native": {
      "ara": {
        "official": "جمهورية مصر العربية",
        "common": "مصر"
      }
    }
  },
  "tld": [
    ".eg",
    ".مصر"
  ],
  "currency": [
    "EGP"
  ],
  "callingCode": [
    "20"
  ],
  "capital": "Cairo",
  "altSpellings": [
    "EG",
    "Arab Republic of Egypt"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "cym": {
      "official": "Arab Republic of Egypt",
      "common": "Yr Aifft"
    },
    "deu": {
      "official": "Arabische Republik Ägypten",
      "common": "Ägypten"
    },
    "fra": {
      "official": "République arabe d'Égypte",
      "common": "Égypte"
    },
    "hrv": {
      "official": "Arapska Republika Egipat",
      "common": "Egipat"
    },
    "ita": {
      "official": "Repubblica araba d'Egitto",
      "common": "Egitto"
    },
    "jpn": {
      "official": "エジプト·アラブ共和国",
      "common": "エジプト"
    },
    "nld": {
      "official": "Arabische Republiek Egypte",
      "common": "Egypte"
    },
    "por": {
      "official": "República Árabe do Egipto",
      "common": "Egito"
    },
    "rus": {
      "official": "Арабская Республика Египет",
      "common": "Египет"
    },
    "spa": {
      "official": "República Árabe de Egipto",
      "common": "Egipto"
    },
    "fin": {
      "official": "Egyptin arabitasavalta",
      "common": "Egypti"
    }
  },
  "latlng": [
    27,
    30
  ],
  "demonym": "Egyptian",
  "landlocked": false,
  "borders": [
    "ISR",
    "LBY",
    "SDN"
  ],
  "area": 1002450,
  "codes": {
    "cca2": "EG",
    "ccn3": "818",
    "cca3": "EGY",
    "cioc": "EGY"
  },
  "provinces": [
    "Ad Daqahliyah",
    "Al Bahr al Ahmar",
    "Al Buhayrah",
    "Al Fayyum",
    "Al Gharbiyah",
    "Al Iskandariyah",
    "Al Isma'iliyah",
    "Al Jizah",
    "Al Minufiyah",
    "Al Minya",
    "Al Qahirah",
    "Al Qalyubiyah",
    "Al Wadi al Jadid",
    "As Suways",
    "Ash Sharqiyah",
    "Aswan",
    "Asyut",
    "Bani Suwayf",
    "Bur Sa'id",
    "Dumyat",
    "Janub Sina'",
    "Kafr ash Shaykh",
    "Matruh",
    "Qina",
    "Shamal Sina'",
    "Suhaj"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "EGY",
        "properties": {
          "name": "Egypt"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                34.9226,
                29.50133
              ],
              [
                34.64174,
                29.09942
              ],
              [
                34.42655,
                28.34399
              ],
              [
                34.15451,
                27.8233
              ],
              [
                33.92136,
                27.6487
              ],
              [
                33.58811,
                27.97136
              ],
              [
                33.13676,
                28.41765
              ],
              [
                32.42323,
                29.85108
              ],
              [
                32.32046,
                29.76043
              ],
              [
                32.73482,
                28.70523
              ],
              [
                33.34876,
                27.69989
              ],
              [
                34.10455,
                26.14227
              ],
              [
                34.47387,
                25.59856
              ],
              [
                34.79507,
                25.03375
              ],
              [
                35.69241,
                23.92671
              ],
              [
                35.49372,
                23.75237
              ],
              [
                35.52598,
                23.10244
              ],
              [
                36.69069,
                22.20485
              ],
              [
                36.86623,
                22
              ],
              [
                32.9,
                22
              ],
              [
                29.02,
                22
              ],
              [
                25,
                22
              ],
              [
                25,
                25.6825
              ],
              [
                25,
                29.238655
              ],
              [
                24.70007,
                30.04419
              ],
              [
                24.95762,
                30.6616
              ],
              [
                24.80287,
                31.08929
              ],
              [
                25.16482,
                31.56915
              ],
              [
                26.49533,
                31.58568
              ],
              [
                27.45762,
                31.32126
              ],
              [
                28.45048,
                31.02577
              ],
              [
                28.91353,
                30.87005
              ],
              [
                29.68342,
                31.18686
              ],
              [
                30.09503,
                31.4734
              ],
              [
                30.97693,
                31.55586
              ],
              [
                31.68796,
                31.4296
              ],
              [
                31.96041,
                30.9336
              ],
              [
                32.19247,
                31.26034
              ],
              [
                32.99392,
                31.02407
              ],
              [
                33.7734,
                30.96746
              ],
              [
                34.26544,
                31.21936
              ],
              [
                34.9226,
                29.50133
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],65:[function(require,module,exports){
module.exports={
  "name": {
    "common": "El Salvador",
    "official": "Republic of El Salvador",
    "native": {
      "spa": {
        "official": "República de El Salvador",
        "common": "El Salvador"
      }
    }
  },
  "tld": [
    ".sv"
  ],
  "currency": [
    "SVC",
    "USD"
  ],
  "callingCode": [
    "503"
  ],
  "capital": "San Salvador",
  "altSpellings": [
    "SV",
    "Republic of El Salvador",
    "República de El Salvador"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of El Salvador",
      "common": "El Salvador"
    },
    "deu": {
      "official": "Republik El Salvador",
      "common": "El Salvador"
    },
    "fra": {
      "official": "République du Salvador",
      "common": "Salvador"
    },
    "hrv": {
      "official": "Republika El Salvador",
      "common": "Salvador"
    },
    "ita": {
      "official": "Repubblica di El Salvador",
      "common": "El Salvador"
    },
    "jpn": {
      "official": "エルサルバドル共和国",
      "common": "エルサルバドル"
    },
    "nld": {
      "official": "Republiek El Salvador",
      "common": "El Salvador"
    },
    "por": {
      "official": "República de El Salvador",
      "common": "El Salvador"
    },
    "rus": {
      "official": "Республика Эль-Сальвадор",
      "common": "Сальвадор"
    },
    "spa": {
      "official": "República de El Salvador",
      "common": "El Salvador"
    },
    "fin": {
      "official": "El Salvadorin tasavalta",
      "common": "El Salvador"
    }
  },
  "latlng": [
    13.83333333,
    -88.91666666
  ],
  "demonym": "Salvadoran",
  "landlocked": false,
  "borders": [
    "GTM",
    "HND"
  ],
  "area": 21041,
  "codes": {
    "cca2": "SV",
    "ccn3": "222",
    "cca3": "SLV",
    "cioc": "ESA"
  },
  "provinces": [
    "Ahuachapan",
    "Cabanas",
    "Chalatenango",
    "Cuscatlan",
    "La Libertad",
    "La Paz",
    "La Union",
    "Morazan",
    "San Miguel",
    "San Salvador",
    "San Vicente",
    "Santa Ana",
    "Sonsonate",
    "Usulutan"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SLV",
        "properties": {
          "name": "El Salvador"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -87.793111,
                13.38448
              ],
              [
                -87.904112,
                13.149017
              ],
              [
                -88.483302,
                13.163951
              ],
              [
                -88.843228,
                13.259734
              ],
              [
                -89.256743,
                13.458533
              ],
              [
                -89.812394,
                13.520622
              ],
              [
                -90.095555,
                13.735338
              ],
              [
                -90.064678,
                13.88197
              ],
              [
                -89.721934,
                14.134228
              ],
              [
                -89.534219,
                14.244816
              ],
              [
                -89.587343,
                14.362586
              ],
              [
                -89.353326,
                14.424133
              ],
              [
                -89.058512,
                14.340029
              ],
              [
                -88.843073,
                14.140507
              ],
              [
                -88.541231,
                13.980155
              ],
              [
                -88.503998,
                13.845486
              ],
              [
                -88.065343,
                13.964626
              ],
              [
                -87.859515,
                13.893312
              ],
              [
                -87.723503,
                13.78505
              ],
              [
                -87.793111,
                13.38448
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],66:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Equatorial Guinea",
    "official": "Republic of Equatorial Guinea",
    "native": {
      "fra": {
        "official": "République de la Guinée Équatoriale",
        "common": "Guinée équatoriale"
      },
      "por": {
        "official": "República da Guiné Equatorial",
        "common": "Guiné Equatorial"
      },
      "spa": {
        "official": "República de Guinea Ecuatorial",
        "common": "Guinea Ecuatorial"
      }
    }
  },
  "tld": [
    ".gq"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "240"
  ],
  "capital": "Malabo",
  "altSpellings": [
    "GQ",
    "Republic of Equatorial Guinea",
    "República de Guinea Ecuatorial",
    "République de Guinée équatoriale",
    "República da Guiné Equatorial"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French",
    "por": "Portuguese",
    "spa": "Spanish"
  },
  "translations": {
    "cym": {
      "official": "Republic of Equatorial Guinea",
      "common": "Gini Gyhydeddol"
    },
    "deu": {
      "official": "Republik Äquatorialguinea",
      "common": "Äquatorialguinea"
    },
    "fra": {
      "official": "République de Guinée équatoriale",
      "common": "Guinée équatoriale"
    },
    "hrv": {
      "official": "Republika Ekvatorska Gvineja",
      "common": "Ekvatorijalna Gvineja"
    },
    "ita": {
      "official": "Repubblica della Guinea Equatoriale",
      "common": "Guinea Equatoriale"
    },
    "jpn": {
      "official": "赤道ギニア共和国",
      "common": "赤道ギニア"
    },
    "nld": {
      "official": "Republiek Equatoriaal-Guinea",
      "common": "Equatoriaal-Guinea"
    },
    "por": {
      "official": "República da Guiné Equatorial",
      "common": "Guiné Equatorial"
    },
    "rus": {
      "official": "Республика Экваториальная Гвинея",
      "common": "Экваториальная Гвинея"
    },
    "spa": {
      "official": "República de Guinea Ecuatorial",
      "common": "Guinea Ecuatorial"
    },
    "fin": {
      "official": "Päiväntasaajan Guinean tasavalta",
      "common": "Päiväntasaajan Guinea"
    }
  },
  "latlng": [
    2,
    10
  ],
  "demonym": "Equatorial Guinean",
  "landlocked": false,
  "borders": [
    "CMR",
    "GAB"
  ],
  "area": 28051,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Equatorial Guinea.svg",
  "codes": {
    "cca2": "GQ",
    "ccn3": "226",
    "cca3": "GNQ",
    "cioc": "GEQ"
  },
  "provinces": [
    "Annobon",
    "Bioko Norte",
    "Bioko Sur",
    "Centro Sur",
    "Kie-Ntem",
    "Litoral",
    "Wele-Nzas"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GNQ",
        "properties": {
          "name": "Equatorial Guinea"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                9.492889,
                1.01012
              ],
              [
                9.305613,
                1.160911
              ],
              [
                9.649158,
                2.283866
              ],
              [
                11.276449,
                2.261051
              ],
              [
                11.285079,
                1.057662
              ],
              [
                9.830284,
                1.067894
              ],
              [
                9.492889,
                1.01012
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],67:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Eritrea",
    "official": "State of Eritrea",
    "native": {
      "ara": {
        "official": "دولة إرتريا",
        "common": "إرتريا‎"
      },
      "eng": {
        "official": "State of Eritrea",
        "common": "Eritrea"
      },
      "tir": {
        "official": "ሃገረ ኤርትራ",
        "common": "ኤርትራ"
      }
    }
  },
  "tld": [
    ".er"
  ],
  "currency": [
    "ERN"
  ],
  "callingCode": [
    "291"
  ],
  "capital": "Asmara",
  "altSpellings": [
    "ER",
    "State of Eritrea",
    "ሃገረ ኤርትራ",
    "Dawlat Iritriyá",
    "ʾErtrā",
    "Iritriyā"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "ara": "Arabic",
    "eng": "English",
    "tir": "Tigrinya"
  },
  "translations": {
    "cym": {
      "official": "State of Eritrea",
      "common": "Eritrea"
    },
    "deu": {
      "official": "Staat Eritrea",
      "common": "Eritrea"
    },
    "fra": {
      "official": "État d'Érythrée",
      "common": "Érythrée"
    },
    "hrv": {
      "official": "Država Eritreji",
      "common": "Eritreja"
    },
    "ita": {
      "official": "Stato di Eritrea",
      "common": "Eritrea"
    },
    "jpn": {
      "official": "エリトリア国",
      "common": "エリトリア"
    },
    "nld": {
      "official": "Staat Eritrea",
      "common": "Eritrea"
    },
    "por": {
      "official": "Estado da Eritreia",
      "common": "Eritreia"
    },
    "rus": {
      "official": "Государство Эритрея",
      "common": "Эритрея"
    },
    "spa": {
      "official": "Estado de Eritrea",
      "common": "Eritrea"
    },
    "fin": {
      "official": "Eritrean valtio",
      "common": "Eritrea"
    }
  },
  "latlng": [
    15,
    39
  ],
  "demonym": "Eritrean",
  "landlocked": false,
  "borders": [
    "DJI",
    "ETH",
    "SDN"
  ],
  "area": 117600,
  "codes": {
    "cca2": "ER",
    "ccn3": "232",
    "cca3": "ERI",
    "cioc": "ERI"
  },
  "provinces": [
    "Akale Guzay",
    "Barka",
    "Denkel",
    "Hamasen",
    "Sahil",
    "Semhar",
    "Senhit",
    "Seraye"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ERI",
        "properties": {
          "name": "Eritrea"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                42.35156,
                12.54223
              ],
              [
                42.00975,
                12.86582
              ],
              [
                41.59856,
                13.45209
              ],
              [
                41.155194,
                13.77332
              ],
              [
                40.8966,
                14.11864
              ],
              [
                40.026219,
                14.519579
              ],
              [
                39.34061,
                14.53155
              ],
              [
                39.0994,
                14.74064
              ],
              [
                38.51295,
                14.50547
              ],
              [
                37.90607,
                14.95943
              ],
              [
                37.59377,
                14.2131
              ],
              [
                36.42951,
                14.42211
              ],
              [
                36.323189,
                14.822481
              ],
              [
                36.75386,
                16.291874
              ],
              [
                36.85253,
                16.95655
              ],
              [
                37.16747,
                17.26314
              ],
              [
                37.904,
                17.42754
              ],
              [
                38.41009,
                17.998307
              ],
              [
                38.990623,
                16.840626
              ],
              [
                39.26611,
                15.922723
              ],
              [
                39.814294,
                15.435647
              ],
              [
                41.179275,
                14.49108
              ],
              [
                41.734952,
                13.921037
              ],
              [
                42.276831,
                13.343992
              ],
              [
                42.589576,
                13.000421
              ],
              [
                43.081226,
                12.699639
              ],
              [
                42.779642,
                12.455416
              ],
              [
                42.35156,
                12.54223
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],68:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Estonia",
    "official": "Republic of Estonia",
    "native": {
      "est": {
        "official": "Eesti Vabariik",
        "common": "Eesti"
      }
    }
  },
  "tld": [
    ".ee"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "372"
  ],
  "capital": "Tallinn",
  "altSpellings": [
    "EE",
    "Eesti",
    "Republic of Estonia",
    "Eesti Vabariik"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "est": "Estonian"
  },
  "translations": {
    "cym": {
      "official": "Republic of Estonia",
      "common": "Estonia"
    },
    "deu": {
      "official": "Republik Estland",
      "common": "Estland"
    },
    "fra": {
      "official": "République d'Estonie",
      "common": "Estonie"
    },
    "hrv": {
      "official": "Republika Estonija",
      "common": "Estonija"
    },
    "ita": {
      "official": "Repubblica di Estonia",
      "common": "Estonia"
    },
    "jpn": {
      "official": "エストニア共和国",
      "common": "エストニア"
    },
    "nld": {
      "official": "Republiek Estland",
      "common": "Estland"
    },
    "por": {
      "official": "República da Estónia",
      "common": "Estónia"
    },
    "rus": {
      "official": "Эстонская Республика",
      "common": "Эстония"
    },
    "spa": {
      "official": "República de Estonia",
      "common": "Estonia"
    },
    "fin": {
      "official": "Viron tasavalta",
      "common": "Viro"
    }
  },
  "latlng": [
    59,
    26
  ],
  "demonym": "Estonian",
  "landlocked": false,
  "borders": [
    "LVA",
    "RUS"
  ],
  "area": 45227,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Estonia.svg",
  "codes": {
    "cca2": "EE",
    "ccn3": "233",
    "cca3": "EST",
    "cioc": "EST"
  },
  "provinces": [
    "Harjumaa (Tallinn)",
    "Hiiumaa (Kardla)",
    "Ida-Virumaa (Johvi)",
    "Jarvamaa (Paide)",
    "Jogevamaa (Jogeva)",
    "Laane-Virumaa (Rakvere)",
    "Laanemaa (Haapsalu)",
    "Parnumaa (Parnu)",
    "Polvamaa (Polva)",
    "Raplamaa (Rapla)",
    "Saaremaa (Kuessaare)",
    "Tartumaa (Tartu)",
    "Valgamaa (Valga)",
    "Viljandimaa (Viljandi)",
    "Vorumaa (Voru)"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "EST",
        "properties": {
          "name": "Estonia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                24.312863,
                57.793424
              ],
              [
                24.428928,
                58.383413
              ],
              [
                24.061198,
                58.257375
              ],
              [
                23.42656,
                58.612753
              ],
              [
                23.339795,
                59.18724
              ],
              [
                24.604214,
                59.465854
              ],
              [
                25.864189,
                59.61109
              ],
              [
                26.949136,
                59.445803
              ],
              [
                27.981114,
                59.475388
              ],
              [
                28.131699,
                59.300825
              ],
              [
                27.420166,
                58.724581
              ],
              [
                27.716686,
                57.791899
              ],
              [
                27.288185,
                57.474528
              ],
              [
                26.463532,
                57.476389
              ],
              [
                25.60281,
                57.847529
              ],
              [
                25.164594,
                57.970157
              ],
              [
                24.312863,
                57.793424
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],69:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ethiopia",
    "official": "Federal Democratic Republic of Ethiopia",
    "native": {
      "amh": {
        "official": "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ",
        "common": "ኢትዮጵያ"
      }
    }
  },
  "tld": [
    ".et"
  ],
  "currency": [
    "ETB"
  ],
  "callingCode": [
    "251"
  ],
  "capital": "Addis Ababa",
  "altSpellings": [
    "ET",
    "ʾĪtyōṗṗyā",
    "Federal Democratic Republic of Ethiopia",
    "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "amh": "Amharic"
  },
  "translations": {
    "cym": {
      "official": "Federal Democratic Republic of Ethiopia",
      "common": "Ethiopia"
    },
    "deu": {
      "official": "Demokratische Bundesrepublik Äthiopien",
      "common": "Äthiopien"
    },
    "fra": {
      "official": "République fédérale démocratique d'Éthiopie",
      "common": "Éthiopie"
    },
    "hrv": {
      "official": "Savezna Demokratska Republika Etiopija",
      "common": "Etiopija"
    },
    "ita": {
      "official": "Repubblica federale democratica di Etiopia",
      "common": "Etiopia"
    },
    "jpn": {
      "official": "エチオピア連邦民主共和国",
      "common": "エチオピア"
    },
    "nld": {
      "official": "Federale Democratische Republiek Ethiopië",
      "common": "Ethiopië"
    },
    "por": {
      "official": "República Federal Democrática da Etiópia",
      "common": "Etiópia"
    },
    "rus": {
      "official": "Федеративная Демократическая Республика Эфиопия",
      "common": "Эфиопия"
    },
    "spa": {
      "official": "República Democrática Federal de Etiopía",
      "common": "Etiopía"
    },
    "fin": {
      "official": "Etiopian demokraattinen liittotasavalta",
      "common": "Etiopia"
    }
  },
  "latlng": [
    8,
    38
  ],
  "demonym": "Ethiopian",
  "landlocked": true,
  "borders": [
    "DJI",
    "ERI",
    "KEN",
    "SOM",
    "SSD",
    "SDN"
  ],
  "area": 1104300,
  "codes": {
    "cca2": "ET",
    "ccn3": "231",
    "cca3": "ETH",
    "cioc": "ETH"
  },
  "provinces": [
    "Adis Abeba (Addis Ababa)",
    "Afar",
    "Amara",
    "Dire Dawa",
    "Gambela Hizboch",
    "Hareri Hizb",
    "Oromiya",
    "Sumale",
    "Tigray",
    "YeDebub Biheroch Bihereseboch na Hizboch"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ETH",
        "properties": {
          "name": "Ethiopia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                37.90607,
                14.95943
              ],
              [
                38.51295,
                14.50547
              ],
              [
                39.0994,
                14.74064
              ],
              [
                39.34061,
                14.53155
              ],
              [
                40.02625,
                14.51959
              ],
              [
                40.8966,
                14.11864
              ],
              [
                41.1552,
                13.77333
              ],
              [
                41.59856,
                13.45209
              ],
              [
                42.00975,
                12.86582
              ],
              [
                42.35156,
                12.54223
              ],
              [
                42,
                12.1
              ],
              [
                41.66176,
                11.6312
              ],
              [
                41.73959,
                11.35511
              ],
              [
                41.75557,
                11.05091
              ],
              [
                42.31414,
                11.0342
              ],
              [
                42.55493,
                11.10511
              ],
              [
                42.776852,
                10.926879
              ],
              [
                42.55876,
                10.57258
              ],
              [
                42.92812,
                10.02194
              ],
              [
                43.29699,
                9.54048
              ],
              [
                43.67875,
                9.18358
              ],
              [
                46.94834,
                7.99688
              ],
              [
                47.78942,
                8.003
              ],
              [
                44.9636,
                5.00162
              ],
              [
                43.66087,
                4.95755
              ],
              [
                42.76967,
                4.25259
              ],
              [
                42.12861,
                4.23413
              ],
              [
                41.855083,
                3.918912
              ],
              [
                41.1718,
                3.91909
              ],
              [
                40.76848,
                4.25702
              ],
              [
                39.85494,
                3.83879
              ],
              [
                39.559384,
                3.42206
              ],
              [
                38.89251,
                3.50074
              ],
              [
                38.67114,
                3.61607
              ],
              [
                38.43697,
                3.58851
              ],
              [
                38.120915,
                3.598605
              ],
              [
                36.855093,
                4.447864
              ],
              [
                36.159079,
                4.447864
              ],
              [
                35.817448,
                4.776966
              ],
              [
                35.817448,
                5.338232
              ],
              [
                35.298007,
                5.506
              ],
              [
                34.70702,
                6.59422
              ],
              [
                34.25032,
                6.82607
              ],
              [
                34.0751,
                7.22595
              ],
              [
                33.56829,
                7.71334
              ],
              [
                32.95418,
                7.78497
              ],
              [
                33.2948,
                8.35458
              ],
              [
                33.8255,
                8.37916
              ],
              [
                33.97498,
                8.68456
              ],
              [
                33.96162,
                9.58358
              ],
              [
                34.25745,
                10.63009
              ],
              [
                34.73115,
                10.91017
              ],
              [
                34.83163,
                11.31896
              ],
              [
                35.26049,
                12.08286
              ],
              [
                35.86363,
                12.57828
              ],
              [
                36.27022,
                13.56333
              ],
              [
                36.42951,
                14.42211
              ],
              [
                37.59377,
                14.2131
              ],
              [
                37.90607,
                14.95943
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],70:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Falkland Islands",
    "official": "Falkland Islands",
    "native": {
      "eng": {
        "official": "Falkland Islands",
        "common": "Falkland Islands"
      }
    }
  },
  "tld": [
    ".fk"
  ],
  "currency": [
    "FKP"
  ],
  "callingCode": [
    "500"
  ],
  "capital": "Stanley",
  "altSpellings": [
    "FK",
    "Islas Malvinas",
    "Falkland Islands (Malvinas)"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Falkland-Inseln",
      "common": "Falklandinseln"
    },
    "fra": {
      "official": "Îles Malouines",
      "common": "Îles Malouines"
    },
    "hrv": {
      "official": "Falklandski otoci",
      "common": "Falklandski Otoci"
    },
    "ita": {
      "official": "Isole Falkland",
      "common": "Isole Falkland o Isole Malvine"
    },
    "jpn": {
      "official": "フォークランド",
      "common": "フォークランド（マルビナス）諸島"
    },
    "nld": {
      "official": "Falkland eilanden",
      "common": "Falklandeilanden"
    },
    "por": {
      "official": "Ilhas Malvinas",
      "common": "Ilhas Malvinas"
    },
    "rus": {
      "official": "Фолклендские острова",
      "common": "Фолклендские острова"
    },
    "spa": {
      "official": "islas Malvinas",
      "common": "Islas Malvinas"
    },
    "fin": {
      "official": "Falkandinsaaret",
      "common": "Falkandinsaaret"
    }
  },
  "latlng": [
    -51.75,
    -59
  ],
  "demonym": "Falkland Islander",
  "landlocked": false,
  "borders": [],
  "area": 12173,
  "codes": {
    "cca2": "FK",
    "ccn3": "238",
    "cca3": "FLK",
    "cioc": ""
  }
}
},{}],71:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Faroe Islands",
    "official": "Faroe Islands",
    "native": {
      "dan": {
        "official": "Færøerne",
        "common": "Færøerne"
      },
      "fao": {
        "official": "Føroyar",
        "common": "Føroyar"
      }
    }
  },
  "tld": [
    ".fo"
  ],
  "currency": [
    "DKK"
  ],
  "callingCode": [
    "298"
  ],
  "capital": "Tórshavn",
  "altSpellings": [
    "FO",
    "Føroyar",
    "Færøerne"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "dan": "Danish",
    "fao": "Faroese"
  },
  "translations": {
    "deu": {
      "official": "Färöer",
      "common": "Färöer-Inseln"
    },
    "fra": {
      "official": "Îles Féroé",
      "common": "Îles Féroé"
    },
    "hrv": {
      "official": "Farski Otoci",
      "common": "Farski Otoci"
    },
    "ita": {
      "official": "Isole Faroe",
      "common": "Isole Far Oer"
    },
    "jpn": {
      "official": "フェロー諸島",
      "common": "フェロー諸島"
    },
    "nld": {
      "official": "Faeröer",
      "common": "Faeröer"
    },
    "por": {
      "official": "Ilhas Faroe",
      "common": "Ilhas Faroé"
    },
    "rus": {
      "official": "Фарерские острова",
      "common": "Фарерские острова"
    },
    "spa": {
      "official": "Islas Feroe",
      "common": "Islas Faroe"
    },
    "fin": {
      "official": "Färsaaret",
      "common": "Färsaaret"
    }
  },
  "latlng": [
    62,
    -7
  ],
  "demonym": "Faroese",
  "landlocked": false,
  "borders": [],
  "area": 1393,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Faroe Islands.svg|border|100px",
  "codes": {
    "cca2": "FO",
    "ccn3": "234",
    "cca3": "FRO",
    "cioc": ""
  },
  "provinces": [
    "Bordoy",
    "Eysturoy",
    "Mykines",
    "Sandoy",
    "Skuvoy",
    "Streymoy",
    "Suduroy",
    "Tvoroyri",
    "Vagar"
  ],
  "geoJSON": {}
}
},{}],72:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Fiji",
    "official": "Republic of Fiji",
    "native": {
      "eng": {
        "official": "Republic of Fiji",
        "common": "Fiji"
      },
      "fij": {
        "official": "Matanitu Tugalala o Viti",
        "common": "Viti"
      },
      "hif": {
        "official": "रिपब्लिक ऑफ फीजी",
        "common": "फिजी"
      }
    }
  },
  "tld": [
    ".fj"
  ],
  "currency": [
    "FJD"
  ],
  "callingCode": [
    "679"
  ],
  "capital": "Suva",
  "altSpellings": [
    "FJ",
    "Viti",
    "Republic of Fiji",
    "Matanitu ko Viti",
    "Fijī Gaṇarājya"
  ],
  "region": "Oceania",
  "subregion": "Melanesia",
  "languages": {
    "eng": "English",
    "fij": "Fijian",
    "hif": "Fiji Hindi"
  },
  "translations": {
    "deu": {
      "official": "Republik Fidschi",
      "common": "Fidschi"
    },
    "fra": {
      "official": "République des Fidji",
      "common": "Fidji"
    },
    "hrv": {
      "official": "Republika Fidži",
      "common": "Fiđi"
    },
    "ita": {
      "official": "Repubblica di Figi",
      "common": "Figi"
    },
    "jpn": {
      "official": "フィジー共和国",
      "common": "フィジー"
    },
    "nld": {
      "official": "Republiek Fiji",
      "common": "Fiji"
    },
    "por": {
      "official": "República de Fiji",
      "common": "Fiji"
    },
    "rus": {
      "official": "Республика Фиджи",
      "common": "Фиджи"
    },
    "spa": {
      "official": "República de Fiji",
      "common": "Fiyi"
    },
    "fin": {
      "official": "Fidžin tasavalta",
      "common": "Fidži"
    }
  },
  "latlng": [
    -18,
    175
  ],
  "demonym": "Fijian",
  "landlocked": false,
  "borders": [],
  "area": 18272,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Fiji.svg",
  "codes": {
    "cca2": "FJ",
    "ccn3": "242",
    "cca3": "FJI",
    "cioc": "FIJ"
  },
  "provinces": [
    "Central",
    "Eastern",
    "Northern",
    "Rotuma",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "FJI",
        "properties": {
          "name": "Fiji"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  178.3736,
                  -17.33992
                ],
                [
                  178.71806,
                  -17.62846
                ],
                [
                  178.55271,
                  -18.15059
                ],
                [
                  177.93266,
                  -18.28799
                ],
                [
                  177.38146,
                  -18.16432
                ],
                [
                  177.28504,
                  -17.72465
                ],
                [
                  177.67087,
                  -17.38114
                ],
                [
                  178.12557,
                  -17.50481
                ],
                [
                  178.3736,
                  -17.33992
                ]
              ]
            ],
            [
              [
                [
                  179.364143,
                  -16.801354
                ],
                [
                  178.725059,
                  -17.012042
                ],
                [
                  178.596839,
                  -16.63915
                ],
                [
                  179.096609,
                  -16.433984
                ],
                [
                  179.413509,
                  -16.379054
                ],
                [
                  180,
                  -16.067133
                ],
                [
                  180,
                  -16.555217
                ],
                [
                  179.364143,
                  -16.801354
                ]
              ]
            ],
            [
              [
                [
                  -179.917369,
                  -16.501783
                ],
                [
                  -180,
                  -16.555217
                ],
                [
                  -180,
                  -16.067133
                ],
                [
                  -179.79332,
                  -16.020882
                ],
                [
                  -179.917369,
                  -16.501783
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],73:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Finland",
    "official": "Republic of Finland",
    "native": {
      "fin": {
        "official": "Suomen tasavalta",
        "common": "Suomi"
      },
      "swe": {
        "official": "Republiken Finland",
        "common": "Finland"
      }
    }
  },
  "tld": [
    ".fi"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "358"
  ],
  "capital": "Helsinki",
  "altSpellings": [
    "FI",
    "Suomi",
    "Republic of Finland",
    "Suomen tasavalta",
    "Republiken Finland"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "fin": "Finnish",
    "swe": "Swedish"
  },
  "translations": {
    "deu": {
      "official": "Republik Finnland",
      "common": "Finnland"
    },
    "fra": {
      "official": "République de Finlande",
      "common": "Finlande"
    },
    "hrv": {
      "official": "Republika Finska",
      "common": "Finska"
    },
    "ita": {
      "official": "Repubblica di Finlandia",
      "common": "Finlandia"
    },
    "jpn": {
      "official": "フィンランド共和国",
      "common": "フィンランド"
    },
    "nld": {
      "official": "Republiek Finland",
      "common": "Finland"
    },
    "por": {
      "official": "República da Finlândia",
      "common": "Finlândia"
    },
    "rus": {
      "official": "Финляндская Республика",
      "common": "Финляндия"
    },
    "spa": {
      "official": "República de Finlandia",
      "common": "Finlandia"
    },
    "fin": {
      "official": "Suomen tasavalta",
      "common": "Suomi"
    }
  },
  "latlng": [
    64,
    26
  ],
  "demonym": "Finnish",
  "landlocked": false,
  "borders": [
    "NOR",
    "SWE",
    "RUS"
  ],
  "area": 338424,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Finland.svg",
  "codes": {
    "cca2": "FI",
    "ccn3": "246",
    "cca3": "FIN",
    "cioc": "FIN"
  },
  "provinces": [
    "Aland",
    "Etela-Suomen Laani",
    "Ita-Suomen Laani",
    "Lansi-Suomen Laani",
    "Lappi",
    "Oulun Laani"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "FIN",
        "properties": {
          "name": "Finland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                28.59193,
                69.064777
              ],
              [
                28.445944,
                68.364613
              ],
              [
                29.977426,
                67.698297
              ],
              [
                29.054589,
                66.944286
              ],
              [
                30.21765,
                65.80598
              ],
              [
                29.54443,
                64.948672
              ],
              [
                30.444685,
                64.204453
              ],
              [
                30.035872,
                63.552814
              ],
              [
                31.516092,
                62.867687
              ],
              [
                31.139991,
                62.357693
              ],
              [
                30.211107,
                61.780028
              ],
              [
                28.069998,
                60.503517
              ],
              [
                26.255173,
                60.423961
              ],
              [
                24.496624,
                60.057316
              ],
              [
                22.869695,
                59.846373
              ],
              [
                22.290764,
                60.391921
              ],
              [
                21.322244,
                60.72017
              ],
              [
                21.544866,
                61.705329
              ],
              [
                21.059211,
                62.607393
              ],
              [
                21.536029,
                63.189735
              ],
              [
                22.442744,
                63.81781
              ],
              [
                24.730512,
                64.902344
              ],
              [
                25.398068,
                65.111427
              ],
              [
                25.294043,
                65.534346
              ],
              [
                23.903379,
                66.006927
              ],
              [
                23.56588,
                66.396051
              ],
              [
                23.539473,
                67.936009
              ],
              [
                21.978535,
                68.616846
              ],
              [
                20.645593,
                69.106247
              ],
              [
                21.244936,
                69.370443
              ],
              [
                22.356238,
                68.841741
              ],
              [
                23.66205,
                68.891247
              ],
              [
                24.735679,
                68.649557
              ],
              [
                25.689213,
                69.092114
              ],
              [
                26.179622,
                69.825299
              ],
              [
                27.732292,
                70.164193
              ],
              [
                29.015573,
                69.766491
              ],
              [
                28.59193,
                69.064777
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],74:[function(require,module,exports){
module.exports={
  "name": {
    "common": "France",
    "official": "French Republic",
    "native": {
      "fra": {
        "official": "République française",
        "common": "France"
      }
    }
  },
  "tld": [
    ".fr"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "33"
  ],
  "capital": "Paris",
  "altSpellings": [
    "FR",
    "French Republic",
    "République française"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Französische Republik",
      "common": "Frankreich"
    },
    "fra": {
      "official": "République française",
      "common": "France"
    },
    "hrv": {
      "official": "Francuska Republika",
      "common": "Francuska"
    },
    "ita": {
      "official": "Repubblica francese",
      "common": "Francia"
    },
    "jpn": {
      "official": "フランス共和国",
      "common": "フランス"
    },
    "nld": {
      "official": "Franse Republiek",
      "common": "Frankrijk"
    },
    "por": {
      "official": "República Francesa",
      "common": "França"
    },
    "rus": {
      "official": "Французская Республика",
      "common": "Франция"
    },
    "spa": {
      "official": "República francés",
      "common": "Francia"
    },
    "fin": {
      "official": "Ranskan tasavalta",
      "common": "Ranska"
    }
  },
  "latlng": [
    46,
    2
  ],
  "demonym": "French",
  "landlocked": false,
  "borders": [
    "AND",
    "BEL",
    "DEU",
    "ITA",
    "LUX",
    "MCO",
    "ESP",
    "CHE"
  ],
  "area": 551695,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of France.svg",
  "codes": {
    "cca2": "FR",
    "ccn3": "250",
    "cca3": "FRA",
    "cioc": "FRA"
  },
  "provinces": [
    "Alsace",
    "Aquitaine",
    "Auvergne",
    "Basse-Normandie",
    "Bourgogne",
    "Bretagne",
    "Centre",
    "Champagne-Ardenne",
    "Corse",
    "Franche-Comte",
    "Haute-Normandie",
    "Ile-de-France",
    "Languedoc-Roussillon",
    "Limousin",
    "Lorraine",
    "Midi-Pyrenees",
    "Nord-Pas-de-Calais",
    "Pays de la Loire",
    "Picardie",
    "Poitou-Charentes",
    "Provence-Alpes-Cote d'Azur",
    "Rhone-Alpes"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "FRA",
        "properties": {
          "name": "France"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  9.560016,
                  42.152492
                ],
                [
                  9.229752,
                  41.380007
                ],
                [
                  8.775723,
                  41.583612
                ],
                [
                  8.544213,
                  42.256517
                ],
                [
                  8.746009,
                  42.628122
                ],
                [
                  9.390001,
                  43.009985
                ],
                [
                  9.560016,
                  42.152492
                ]
              ]
            ],
            [
              [
                [
                  3.588184,
                  50.378992
                ],
                [
                  4.286023,
                  49.907497
                ],
                [
                  4.799222,
                  49.985373
                ],
                [
                  5.674052,
                  49.529484
                ],
                [
                  5.897759,
                  49.442667
                ],
                [
                  6.18632,
                  49.463803
                ],
                [
                  6.65823,
                  49.201958
                ],
                [
                  8.099279,
                  49.017784
                ],
                [
                  7.593676,
                  48.333019
                ],
                [
                  7.466759,
                  47.620582
                ],
                [
                  7.192202,
                  47.449766
                ],
                [
                  6.736571,
                  47.541801
                ],
                [
                  6.768714,
                  47.287708
                ],
                [
                  6.037389,
                  46.725779
                ],
                [
                  6.022609,
                  46.27299
                ],
                [
                  6.5001,
                  46.429673
                ],
                [
                  6.843593,
                  45.991147
                ],
                [
                  6.802355,
                  45.70858
                ],
                [
                  7.096652,
                  45.333099
                ],
                [
                  6.749955,
                  45.028518
                ],
                [
                  7.007562,
                  44.254767
                ],
                [
                  7.549596,
                  44.127901
                ],
                [
                  7.435185,
                  43.693845
                ],
                [
                  6.529245,
                  43.128892
                ],
                [
                  4.556963,
                  43.399651
                ],
                [
                  3.100411,
                  43.075201
                ],
                [
                  2.985999,
                  42.473015
                ],
                [
                  1.826793,
                  42.343385
                ],
                [
                  0.701591,
                  42.795734
                ],
                [
                  0.338047,
                  42.579546
                ],
                [
                  -1.502771,
                  43.034014
                ],
                [
                  -1.901351,
                  43.422802
                ],
                [
                  -1.384225,
                  44.02261
                ],
                [
                  -1.193798,
                  46.014918
                ],
                [
                  -2.225724,
                  47.064363
                ],
                [
                  -2.963276,
                  47.570327
                ],
                [
                  -4.491555,
                  47.954954
                ],
                [
                  -4.59235,
                  48.68416
                ],
                [
                  -3.295814,
                  48.901692
                ],
                [
                  -1.616511,
                  48.644421
                ],
                [
                  -1.933494,
                  49.776342
                ],
                [
                  -0.989469,
                  49.347376
                ],
                [
                  1.338761,
                  50.127173
                ],
                [
                  1.639001,
                  50.946606
                ],
                [
                  2.513573,
                  51.148506
                ],
                [
                  2.658422,
                  50.796848
                ],
                [
                  3.123252,
                  50.780363
                ],
                [
                  3.588184,
                  50.378992
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],75:[function(require,module,exports){
module.exports={
  "name": {
    "common": "French Guiana",
    "official": "Guiana",
    "native": {
      "fra": {
        "official": "Guyanes",
        "common": "Guyane française"
      }
    }
  },
  "tld": [
    ".gf"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "594"
  ],
  "capital": "Cayenne",
  "altSpellings": [
    "GF",
    "Guiana",
    "Guyane"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Guayana",
      "common": "Französisch Guyana"
    },
    "fra": {
      "official": "Guyane",
      "common": "Guyane"
    },
    "hrv": {
      "official": "Gijana",
      "common": "Francuska Gvajana"
    },
    "ita": {
      "official": "Guiana",
      "common": "Guyana francese"
    },
    "jpn": {
      "official": "ギアナ",
      "common": "フランス領ギアナ"
    },
    "nld": {
      "official": "Guyana",
      "common": "Frans-Guyana"
    },
    "por": {
      "official": "Guiana",
      "common": "Guiana Francesa"
    },
    "rus": {
      "official": "Гвиана",
      "common": "Французская Гвиана"
    },
    "spa": {
      "official": "Guayana",
      "common": "Guayana Francesa"
    },
    "fin": {
      "official": "Ranskan Guayana",
      "common": "Ranskan Guayana"
    }
  },
  "latlng": [
    4,
    -53
  ],
  "demonym": "",
  "landlocked": false,
  "borders": [
    "BRA",
    "SUR"
  ],
  "area": 83534,
  "codes": {
    "cca2": "GF",
    "ccn3": "254",
    "cca3": "GUF",
    "cioc": ""
  },
  "provinces": [
    "French Guiana"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GUF",
        "properties": {
          "name": "French Guiana"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -52.556425,
                2.504705
              ],
              [
                -52.939657,
                2.124858
              ],
              [
                -53.418465,
                2.053389
              ],
              [
                -53.554839,
                2.334897
              ],
              [
                -53.778521,
                2.376703
              ],
              [
                -54.088063,
                2.105557
              ],
              [
                -54.524754,
                2.311849
              ],
              [
                -54.27123,
                2.738748
              ],
              [
                -54.184284,
                3.194172
              ],
              [
                -54.011504,
                3.62257
              ],
              [
                -54.399542,
                4.212611
              ],
              [
                -54.478633,
                4.896756
              ],
              [
                -53.958045,
                5.756548
              ],
              [
                -53.618453,
                5.646529
              ],
              [
                -52.882141,
                5.409851
              ],
              [
                -51.823343,
                4.565768
              ],
              [
                -51.657797,
                4.156232
              ],
              [
                -52.249338,
                3.241094
              ],
              [
                -52.556425,
                2.504705
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],76:[function(require,module,exports){
module.exports={
  "name": {
    "common": "French Polynesia",
    "official": "French Polynesia",
    "native": {
      "fra": {
        "official": "Polynésie française",
        "common": "Polynésie française"
      }
    }
  },
  "tld": [
    ".pf"
  ],
  "currency": [
    "XPF"
  ],
  "callingCode": [
    "689"
  ],
  "capital": "Papeetē",
  "altSpellings": [
    "PF",
    "Polynésie française",
    "French Polynesia",
    "Pōrīnetia Farāni"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Französisch-Polynesien",
      "common": "Französisch-Polynesien"
    },
    "fra": {
      "official": "Polynésie française",
      "common": "Polynésie française"
    },
    "hrv": {
      "official": "Francuska Polinezija",
      "common": "Francuska Polinezija"
    },
    "ita": {
      "official": "Polinesia Francese",
      "common": "Polinesia Francese"
    },
    "jpn": {
      "official": "フランス領ポリネシア",
      "common": "フランス領ポリネシア"
    },
    "nld": {
      "official": "Frans-Polynesië",
      "common": "Frans-Polynesië"
    },
    "por": {
      "official": "Polinésia Francesa",
      "common": "Polinésia Francesa"
    },
    "rus": {
      "official": "Французская Полинезия",
      "common": "Французская Полинезия"
    },
    "spa": {
      "official": "Polinesia francés",
      "common": "Polinesia Francesa"
    },
    "fin": {
      "official": "Ranskan Polynesia",
      "common": "Ranskan Polynesia"
    }
  },
  "latlng": [
    -15,
    -140
  ],
  "demonym": "French Polynesian",
  "landlocked": false,
  "borders": [],
  "area": 4167,
  "codes": {
    "cca2": "PF",
    "ccn3": "258",
    "cca3": "PYF",
    "cioc": ""
  },
  "provinces": [
    "Archipel des Marquises",
    "Archipel des Tuamotu",
    "Archipel des Tubuai",
    "Iles du Vent",
    "Iles Sous-le-Vent"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],77:[function(require,module,exports){
module.exports={
  "name": {
    "common": "French Southern and Antarctic Lands",
    "official": "Territory of the French Southern and Antarctic Lands",
    "native": {
      "fra": {
        "official": "Territoire des Terres australes et antarctiques françaises",
        "common": "Terres australes et antarctiques françaises"
      }
    }
  },
  "tld": [
    ".tf"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [],
  "capital": "Port-aux-Français",
  "altSpellings": [
    "TF",
    "French Southern Territories"
  ],
  "region": "",
  "subregion": "",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Gebiet der Französisch Süd-und Antarktisgebiete",
      "common": "Französische Süd-und Antarktisgebiete"
    },
    "fra": {
      "official": "Territoire des Terres australes et antarctiques françaises",
      "common": "Terres australes et antarctiques françaises"
    },
    "hrv": {
      "official": "Teritoriju Francuski južni i antarktički teritoriji",
      "common": "Francuski južni i antarktički teritoriji"
    },
    "ita": {
      "official": "Territorio della australi e antartiche francesi Terre",
      "common": "Territori Francesi del Sud"
    },
    "jpn": {
      "official": "フランス領南方·南極地域の領土",
      "common": "フランス領南方・南極地域"
    },
    "nld": {
      "official": "Grondgebied van de Franse Zuidelijke en Antarctische gebieden",
      "common": "Franse Gebieden in de zuidelijke Indische Oceaan"
    },
    "por": {
      "official": "Território do Sul e Antártica Francesa",
      "common": "Terras Austrais e Antárticas Francesas"
    },
    "rus": {
      "official": "Территория Французские Южные и Антарктические земли",
      "common": "Французские Южные и Антарктические территории"
    },
    "spa": {
      "official": "Territorio del Francés Tierras australes y antárticas",
      "common": "Tierras Australes y Antárticas Francesas"
    },
    "fin": {
      "official": "Ranskan eteläiset ja antarktiset alueet",
      "common": "Ranskan eteläiset ja antarktiset alueet"
    }
  },
  "latlng": [
    -49.25,
    69.167
  ],
  "demonym": "French",
  "landlocked": false,
  "borders": [],
  "area": 7747,
  "codes": {
    "cca2": "TF",
    "ccn3": "260",
    "cca3": "ATF",
    "cioc": ""
  },
  "provinces": [
    "Adelie Land",
    "Ile Crozet",
    "Iles Kerguelen",
    "Iles Saint-Paul et Amsterdam"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ATF",
        "properties": {
          "name": "French Southern and Antarctic Lands"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                68.935,
                -48.625
              ],
              [
                69.58,
                -48.94
              ],
              [
                70.525,
                -49.065
              ],
              [
                70.56,
                -49.255
              ],
              [
                70.28,
                -49.71
              ],
              [
                68.745,
                -49.775
              ],
              [
                68.72,
                -49.2425
              ],
              [
                68.8675,
                -48.83
              ],
              [
                68.935,
                -48.625
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],78:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Gabon",
    "official": "Gabonese Republic",
    "native": {
      "fra": {
        "official": "République gabonaise",
        "common": "Gabon"
      }
    }
  },
  "tld": [
    ".ga"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "241"
  ],
  "capital": "Libreville",
  "altSpellings": [
    "GA",
    "Gabonese Republic",
    "République Gabonaise"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Gabunische Republik",
      "common": "Gabun"
    },
    "fra": {
      "official": "République gabonaise",
      "common": "Gabon"
    },
    "hrv": {
      "official": "Gabon Republika",
      "common": "Gabon"
    },
    "ita": {
      "official": "Repubblica gabonese",
      "common": "Gabon"
    },
    "jpn": {
      "official": "ガボン共和国",
      "common": "ガボン"
    },
    "nld": {
      "official": "Republiek Gabon",
      "common": "Gabon"
    },
    "por": {
      "official": "República do Gabão",
      "common": "Gabão"
    },
    "rus": {
      "official": "Габона Республика",
      "common": "Габон"
    },
    "spa": {
      "official": "República de Gabón",
      "common": "Gabón"
    },
    "fin": {
      "official": "Gabonin tasavalta",
      "common": "Gabon"
    }
  },
  "latlng": [
    -1,
    11.75
  ],
  "demonym": "Gabonese",
  "landlocked": false,
  "borders": [
    "CMR",
    "COG",
    "GNQ"
  ],
  "area": 267668,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Gabon.svg",
  "codes": {
    "cca2": "GA",
    "ccn3": "266",
    "cca3": "GAB",
    "cioc": "GAB"
  },
  "provinces": [
    "Estuaire",
    "Haut-Ogooue",
    "Moyen-Ogooue",
    "Ngounie",
    "Nyanga",
    "Ogooue-Ivindo",
    "Ogooue-Lolo",
    "Ogooue-Maritime",
    "Woleu-Ntem"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GAB",
        "properties": {
          "name": "Gabon"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                11.093773,
                -3.978827
              ],
              [
                10.066135,
                -2.969483
              ],
              [
                9.405245,
                -2.144313
              ],
              [
                8.797996,
                -1.111301
              ],
              [
                8.830087,
                -0.779074
              ],
              [
                9.04842,
                -0.459351
              ],
              [
                9.291351,
                0.268666
              ],
              [
                9.492889,
                1.01012
              ],
              [
                9.830284,
                1.067894
              ],
              [
                11.285079,
                1.057662
              ],
              [
                11.276449,
                2.261051
              ],
              [
                11.751665,
                2.326758
              ],
              [
                12.35938,
                2.192812
              ],
              [
                12.951334,
                2.321616
              ],
              [
                13.075822,
                2.267097
              ],
              [
                13.003114,
                1.830896
              ],
              [
                13.282631,
                1.314184
              ],
              [
                14.026669,
                1.395677
              ],
              [
                14.276266,
                1.19693
              ],
              [
                13.843321,
                0.038758
              ],
              [
                14.316418,
                -0.552627
              ],
              [
                14.425456,
                -1.333407
              ],
              [
                14.29921,
                -1.998276
              ],
              [
                13.992407,
                -2.470805
              ],
              [
                13.109619,
                -2.42874
              ],
              [
                12.575284,
                -1.948511
              ],
              [
                12.495703,
                -2.391688
              ],
              [
                11.820964,
                -2.514161
              ],
              [
                11.478039,
                -2.765619
              ],
              [
                11.855122,
                -3.426871
              ],
              [
                11.093773,
                -3.978827
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],79:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Gambia",
    "official": "Republic of the Gambia",
    "native": {
      "eng": {
        "official": "Republic of the Gambia",
        "common": "Gambia"
      }
    }
  },
  "tld": [
    ".gm"
  ],
  "currency": [
    "GMD"
  ],
  "callingCode": [
    "220"
  ],
  "capital": "Banjul",
  "altSpellings": [
    "GM",
    "Republic of the Gambia"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Gambia",
      "common": "Gambia"
    },
    "fra": {
      "official": "République de Gambie",
      "common": "Gambie"
    },
    "hrv": {
      "official": "Republika Gambija",
      "common": "Gambija"
    },
    "ita": {
      "official": "Repubblica del Gambia",
      "common": "Gambia"
    },
    "jpn": {
      "official": "ガンビア共和国",
      "common": "ガンビア"
    },
    "nld": {
      "official": "Republiek Gambia",
      "common": "Gambia"
    },
    "por": {
      "official": "República da Gâmbia",
      "common": "Gâmbia"
    },
    "rus": {
      "official": "Республика Гамбия",
      "common": "Гамбия"
    },
    "spa": {
      "official": "República de Gambia",
      "common": "Gambia"
    },
    "fin": {
      "official": "Gambian tasavalta",
      "common": "Gambia"
    }
  },
  "latlng": [
    13.46666666,
    -16.56666666
  ],
  "demonym": "Gambian",
  "landlocked": false,
  "borders": [
    "SEN"
  ],
  "area": 10689,
  "codes": {
    "cca2": "GM",
    "ccn3": "270",
    "cca3": "GMB",
    "cioc": "GAM"
  }
}
},{}],80:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Georgia",
    "official": "Georgia",
    "native": {
      "kat": {
        "official": "საქართველო",
        "common": "საქართველო"
      }
    }
  },
  "tld": [
    ".ge"
  ],
  "currency": [
    "GEL"
  ],
  "callingCode": [
    "995"
  ],
  "capital": "Tbilisi",
  "altSpellings": [
    "GE",
    "Sakartvelo"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "kat": "Georgian"
  },
  "translations": {
    "deu": {
      "official": "Georgia",
      "common": "Georgien"
    },
    "fra": {
      "official": "République de Géorgie",
      "common": "Géorgie"
    },
    "hrv": {
      "official": "Gruzija",
      "common": "Gruzija"
    },
    "ita": {
      "official": "Georgia",
      "common": "Georgia"
    },
    "jpn": {
      "official": "グルジア",
      "common": "グルジア"
    },
    "nld": {
      "official": "Georgia",
      "common": "Georgië"
    },
    "por": {
      "official": "Georgia",
      "common": "Geórgia"
    },
    "rus": {
      "official": "Грузия",
      "common": "Грузия"
    },
    "spa": {
      "official": "Georgia",
      "common": "Georgia"
    },
    "fin": {
      "official": "Georgia",
      "common": "Georgia"
    }
  },
  "latlng": [
    42,
    43.5
  ],
  "demonym": "Georgian",
  "landlocked": false,
  "borders": [
    "ARM",
    "AZE",
    "RUS",
    "TUR"
  ],
  "area": 69700,
  "codes": {
    "cca2": "GE",
    "ccn3": "268",
    "cca3": "GEO",
    "cioc": "GEO"
  },
  "provinces": [
    "Abashis",
    "Abkhazia or Ap'khazet'is Avtonomiuri Respublika (Sokhumi)",
    "Adigenis",
    "Ajaria or Acharis Avtonomiuri Respublika (Bat'umi)",
    "Akhalgoris",
    "Akhalk'alak'is",
    "Akhalts'ikhis",
    "Akhmetis",
    "Ambrolauris",
    "Aspindzis",
    "Baghdat'is",
    "Bolnisis",
    "Borjomis",
    "Ch'khorotsqus",
    "Ch'okhatauris",
    "Chiat'ura",
    "Dedop'listsqaros",
    "Dmanisis",
    "Dushet'is",
    "Gardabanis",
    "Gori",
    "Goris",
    "Gurjaanis",
    "Javis",
    "K'arelis",
    "K'ut'aisi",
    "Kaspis",
    "Kharagaulis",
    "Khashuris",
    "Khobis",
    "Khonis",
    "Lagodekhis",
    "Lanch'khut'is",
    "Lentekhis",
    "Marneulis",
    "Martvilis",
    "Mestiis",
    "Mts'khet'is",
    "Ninotsmindis",
    "Onis",
    "Ozurget'is",
    "P'ot'i",
    "Qazbegis",
    "Qvarlis",
    "Rust'avi",
    "Sach'kheris",
    "Sagarejos",
    "Samtrediis",
    "Senakis",
    "Sighnaghis",
    "T'bilisi",
    "T'elavis",
    "T'erjolis",
    "T'et'ritsqaros",
    "T'ianet'is",
    "Tqibuli",
    "Ts'ageris",
    "Tsalenjikhis",
    "Tsalkis",
    "Tsqaltubo",
    "Vanis",
    "Zestap'onis",
    "Zugdidi",
    "Zugdidis"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GEO",
        "properties": {
          "name": "Georgia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                41.554084,
                41.535656
              ],
              [
                41.703171,
                41.962943
              ],
              [
                41.45347,
                42.645123
              ],
              [
                40.875469,
                43.013628
              ],
              [
                40.321394,
                43.128634
              ],
              [
                39.955009,
                43.434998
              ],
              [
                40.076965,
                43.553104
              ],
              [
                40.922185,
                43.382159
              ],
              [
                42.394395,
                43.220308
              ],
              [
                43.756017,
                42.740828
              ],
              [
                43.9312,
                42.554974
              ],
              [
                44.537623,
                42.711993
              ],
              [
                45.470279,
                42.502781
              ],
              [
                45.77641,
                42.092444
              ],
              [
                46.404951,
                41.860675
              ],
              [
                46.145432,
                41.722802
              ],
              [
                46.637908,
                41.181673
              ],
              [
                46.501637,
                41.064445
              ],
              [
                45.962601,
                41.123873
              ],
              [
                45.217426,
                41.411452
              ],
              [
                44.97248,
                41.248129
              ],
              [
                43.582746,
                41.092143
              ],
              [
                42.619549,
                41.583173
              ],
              [
                41.554084,
                41.535656
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],81:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Germany",
    "official": "Federal Republic of Germany",
    "native": {
      "deu": {
        "official": "Bundesrepublik Deutschland",
        "common": "Deutschland"
      }
    }
  },
  "tld": [
    ".de"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "49"
  ],
  "capital": "Berlin",
  "altSpellings": [
    "DE",
    "Federal Republic of Germany",
    "Bundesrepublik Deutschland"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "deu": "German"
  },
  "translations": {
    "deu": {
      "official": "Bundesrepublik Deutschland",
      "common": "Deutschland"
    },
    "fra": {
      "official": "République fédérale d'Allemagne",
      "common": "Allemagne"
    },
    "hrv": {
      "official": "Njemačka Federativna Republika",
      "common": "Njemačka"
    },
    "ita": {
      "official": "Repubblica federale di Germania",
      "common": "Germania"
    },
    "jpn": {
      "official": "ドイツ連邦共和国",
      "common": "ドイツ"
    },
    "nld": {
      "official": "Bondsrepubliek Duitsland",
      "common": "Duitsland"
    },
    "por": {
      "official": "República Federal da Alemanha",
      "common": "Alemanha"
    },
    "rus": {
      "official": "Федеративная Республика Германия",
      "common": "Германия"
    },
    "spa": {
      "official": "República Federal de Alemania",
      "common": "Alemania"
    },
    "fin": {
      "official": "Saksan liittotasavalta",
      "common": "Saksa"
    }
  },
  "latlng": [
    51,
    9
  ],
  "demonym": "German",
  "landlocked": false,
  "borders": [
    "AUT",
    "BEL",
    "CZE",
    "DNK",
    "FRA",
    "LUX",
    "NLD",
    "POL",
    "CHE"
  ],
  "area": 357114,
  "codes": {
    "cca2": "DE",
    "ccn3": "276",
    "cca3": "DEU",
    "cioc": "GER"
  },
  "provinces": [
    "Baden-Wuerttemberg",
    "Bayern",
    "Berlin",
    "Brandenburg",
    "Bremen",
    "Hamburg",
    "Hessen",
    "Mecklenburg-Vorpommern",
    "Niedersachsen",
    "Nordrhein-Westfalen",
    "Rheinland-Pfalz",
    "Saarland",
    "Sachsen",
    "Sachsen-Anhalt",
    "Schleswig-Holstein",
    "Thueringen"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "DEU",
        "properties": {
          "name": "Germany"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                9.921906,
                54.983104
              ],
              [
                9.93958,
                54.596642
              ],
              [
                10.950112,
                54.363607
              ],
              [
                10.939467,
                54.008693
              ],
              [
                11.956252,
                54.196486
              ],
              [
                12.51844,
                54.470371
              ],
              [
                13.647467,
                54.075511
              ],
              [
                14.119686,
                53.757029
              ],
              [
                14.353315,
                53.248171
              ],
              [
                14.074521,
                52.981263
              ],
              [
                14.4376,
                52.62485
              ],
              [
                14.685026,
                52.089947
              ],
              [
                14.607098,
                51.745188
              ],
              [
                15.016996,
                51.106674
              ],
              [
                14.570718,
                51.002339
              ],
              [
                14.307013,
                51.117268
              ],
              [
                14.056228,
                50.926918
              ],
              [
                13.338132,
                50.733234
              ],
              [
                12.966837,
                50.484076
              ],
              [
                12.240111,
                50.266338
              ],
              [
                12.415191,
                49.969121
              ],
              [
                12.521024,
                49.547415
              ],
              [
                13.031329,
                49.307068
              ],
              [
                13.595946,
                48.877172
              ],
              [
                13.243357,
                48.416115
              ],
              [
                12.884103,
                48.289146
              ],
              [
                13.025851,
                47.637584
              ],
              [
                12.932627,
                47.467646
              ],
              [
                12.62076,
                47.672388
              ],
              [
                12.141357,
                47.703083
              ],
              [
                11.426414,
                47.523766
              ],
              [
                10.544504,
                47.566399
              ],
              [
                10.402084,
                47.302488
              ],
              [
                9.896068,
                47.580197
              ],
              [
                9.594226,
                47.525058
              ],
              [
                8.522612,
                47.830828
              ],
              [
                8.317301,
                47.61358
              ],
              [
                7.466759,
                47.620582
              ],
              [
                7.593676,
                48.333019
              ],
              [
                8.099279,
                49.017784
              ],
              [
                6.65823,
                49.201958
              ],
              [
                6.18632,
                49.463803
              ],
              [
                6.242751,
                49.902226
              ],
              [
                6.043073,
                50.128052
              ],
              [
                6.156658,
                50.803721
              ],
              [
                5.988658,
                51.851616
              ],
              [
                6.589397,
                51.852029
              ],
              [
                6.84287,
                52.22844
              ],
              [
                7.092053,
                53.144043
              ],
              [
                6.90514,
                53.482162
              ],
              [
                7.100425,
                53.693932
              ],
              [
                7.936239,
                53.748296
              ],
              [
                8.121706,
                53.527792
              ],
              [
                8.800734,
                54.020786
              ],
              [
                8.572118,
                54.395646
              ],
              [
                8.526229,
                54.962744
              ],
              [
                9.282049,
                54.830865
              ],
              [
                9.921906,
                54.983104
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],82:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ghana",
    "official": "Republic of Ghana",
    "native": {
      "eng": {
        "official": "Republic of Ghana",
        "common": "Ghana"
      }
    }
  },
  "tld": [
    ".gh"
  ],
  "currency": [
    "GHS"
  ],
  "callingCode": [
    "233"
  ],
  "capital": "Accra",
  "altSpellings": [
    "GH"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Ghana",
      "common": "Ghana"
    },
    "fra": {
      "official": "République du Ghana",
      "common": "Ghana"
    },
    "hrv": {
      "official": "Republika Gana",
      "common": "Gana"
    },
    "ita": {
      "official": "Repubblica del Ghana",
      "common": "Ghana"
    },
    "jpn": {
      "official": "ガーナ共和国",
      "common": "ガーナ"
    },
    "nld": {
      "official": "Republiek Ghana",
      "common": "Ghana"
    },
    "por": {
      "official": "República do Gana",
      "common": "Gana"
    },
    "rus": {
      "official": "Республика Гана",
      "common": "Гана"
    },
    "spa": {
      "official": "República de Ghana",
      "common": "Ghana"
    },
    "fin": {
      "official": "Ghanan tasavalta",
      "common": "Ghana"
    }
  },
  "latlng": [
    8,
    -2
  ],
  "demonym": "Ghanaian",
  "landlocked": false,
  "borders": [
    "BFA",
    "CIV",
    "TGO"
  ],
  "area": 238533,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Ghana.svg",
  "codes": {
    "cca2": "GH",
    "ccn3": "288",
    "cca3": "GHA",
    "cioc": "GHA"
  },
  "provinces": [
    "Ashanti",
    "Brong-Ahafo",
    "Central",
    "Eastern",
    "Greater Accra",
    "Northern",
    "Upper East",
    "Upper West",
    "Volta",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GHA",
        "properties": {
          "name": "Ghana"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                1.060122,
                5.928837
              ],
              [
                -0.507638,
                5.343473
              ],
              [
                -1.063625,
                5.000548
              ],
              [
                -1.964707,
                4.710462
              ],
              [
                -2.856125,
                4.994476
              ],
              [
                -2.810701,
                5.389051
              ],
              [
                -3.24437,
                6.250472
              ],
              [
                -2.983585,
                7.379705
              ],
              [
                -2.56219,
                8.219628
              ],
              [
                -2.827496,
                9.642461
              ],
              [
                -2.963896,
                10.395335
              ],
              [
                -2.940409,
                10.96269
              ],
              [
                -1.203358,
                11.009819
              ],
              [
                -0.761576,
                10.93693
              ],
              [
                -0.438702,
                11.098341
              ],
              [
                0.023803,
                11.018682
              ],
              [
                -0.049785,
                10.706918
              ],
              [
                0.36758,
                10.191213
              ],
              [
                0.365901,
                9.465004
              ],
              [
                0.461192,
                8.677223
              ],
              [
                0.712029,
                8.312465
              ],
              [
                0.490957,
                7.411744
              ],
              [
                0.570384,
                6.914359
              ],
              [
                0.836931,
                6.279979
              ],
              [
                1.060122,
                5.928837
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],83:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Gibraltar",
    "official": "Gibraltar",
    "native": {
      "eng": {
        "official": "Gibraltar",
        "common": "Gibraltar"
      }
    }
  },
  "tld": [
    ".gi"
  ],
  "currency": [
    "GIP"
  ],
  "callingCode": [
    "350"
  ],
  "capital": "Gibraltar",
  "altSpellings": [
    "GI"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "fra": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "hrv": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "ita": {
      "official": "Gibilterra",
      "common": "Gibilterra"
    },
    "jpn": {
      "official": "ジブラルタル",
      "common": "ジブラルタル"
    },
    "nld": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "por": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "rus": {
      "official": "Гибралтар",
      "common": "Гибралтар"
    },
    "spa": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "fin": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    }
  },
  "latlng": [
    36.13333333,
    -5.35
  ],
  "demonym": "Gibraltar",
  "landlocked": false,
  "borders": [
    "ESP"
  ],
  "area": 6,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Gibraltar.svg",
  "codes": {
    "cca2": "GI",
    "ccn3": "292",
    "cca3": "GIB",
    "cioc": ""
  },
  "provinces": [
    "Gibraltar"
  ],
  "geoJSON": {}
}
},{}],84:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Greece",
    "official": "Hellenic Republic",
    "native": {
      "ell": {
        "official": "Ελληνική Δημοκρατία",
        "common": "Ελλάδα"
      }
    }
  },
  "tld": [
    ".gr"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "30"
  ],
  "capital": "Athens",
  "altSpellings": [
    "GR",
    "Elláda",
    "Hellenic Republic",
    "Ελληνική Δημοκρατία"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "ell": "Greek"
  },
  "translations": {
    "deu": {
      "official": "Hellenische Republik",
      "common": "Griechenland"
    },
    "fra": {
      "official": "République hellénique",
      "common": "Grèce"
    },
    "hrv": {
      "official": "Helenska Republika",
      "common": "Grčka"
    },
    "ita": {
      "official": "Repubblica ellenica",
      "common": "Grecia"
    },
    "jpn": {
      "official": "ギリシャ共和国",
      "common": "ギリシャ"
    },
    "nld": {
      "official": "Helleense Republiek",
      "common": "Griekenland"
    },
    "por": {
      "official": "República Helénica",
      "common": "Grécia"
    },
    "rus": {
      "official": "Греческая Республика",
      "common": "Греция"
    },
    "spa": {
      "official": "República Helénica",
      "common": "Grecia"
    },
    "fin": {
      "official": "Helleenien tasavalta",
      "common": "Kreikka"
    }
  },
  "latlng": [
    39,
    22
  ],
  "demonym": "Greek",
  "landlocked": false,
  "borders": [
    "ALB",
    "BGR",
    "TUR",
    "MKD"
  ],
  "area": 131990,
  "codes": {
    "cca2": "GR",
    "ccn3": "300",
    "cca3": "GRC",
    "cioc": "GRE"
  },
  "provinces": [
    "Aitolia kai Akarnania",
    "Akhaia",
    "Argolis",
    "Arkadhia",
    "Arta",
    "Attiki",
    "Ayion Oros (Mt. Athos)",
    "Dhodhekanisos",
    "Drama",
    "Evritania",
    "Evros",
    "Evvoia",
    "Florina",
    "Fokis",
    "Fthiotis",
    "Grevena",
    "Ilia",
    "Imathia",
    "Ioannina",
    "Irakleion",
    "Kardhitsa",
    "Kastoria",
    "Kavala",
    "Kefallinia",
    "Kerkyra",
    "Khalkidhiki",
    "Khania",
    "Khios",
    "Kikladhes",
    "Kilkis",
    "Korinthia",
    "Kozani",
    "Lakonia",
    "Larisa",
    "Lasithi",
    "Lesvos",
    "Levkas",
    "Magnisia",
    "Messinia",
    "Pella",
    "Pieria",
    "Preveza",
    "Rethimni",
    "Rodhopi",
    "Samos",
    "Serrai",
    "Thesprotia",
    "Thessaloniki",
    "Trikala",
    "Voiotia",
    "Xanthi",
    "Zakinthos"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GRC",
        "properties": {
          "name": "Greece"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  23.69998,
                  35.705004
                ],
                [
                  24.246665,
                  35.368022
                ],
                [
                  25.025015,
                  35.424996
                ],
                [
                  25.769208,
                  35.354018
                ],
                [
                  25.745023,
                  35.179998
                ],
                [
                  26.290003,
                  35.29999
                ],
                [
                  26.164998,
                  35.004995
                ],
                [
                  24.724982,
                  34.919988
                ],
                [
                  24.735007,
                  35.084991
                ],
                [
                  23.514978,
                  35.279992
                ],
                [
                  23.69998,
                  35.705004
                ]
              ]
            ],
            [
              [
                [
                  26.604196,
                  41.562115
                ],
                [
                  26.294602,
                  40.936261
                ],
                [
                  26.056942,
                  40.824123
                ],
                [
                  25.447677,
                  40.852545
                ],
                [
                  24.925848,
                  40.947062
                ],
                [
                  23.714811,
                  40.687129
                ],
                [
                  24.407999,
                  40.124993
                ],
                [
                  23.899968,
                  39.962006
                ],
                [
                  23.342999,
                  39.960998
                ],
                [
                  22.813988,
                  40.476005
                ],
                [
                  22.626299,
                  40.256561
                ],
                [
                  22.849748,
                  39.659311
                ],
                [
                  23.350027,
                  39.190011
                ],
                [
                  22.973099,
                  38.970903
                ],
                [
                  23.530016,
                  38.510001
                ],
                [
                  24.025025,
                  38.219993
                ],
                [
                  24.040011,
                  37.655015
                ],
                [
                  23.115003,
                  37.920011
                ],
                [
                  23.409972,
                  37.409991
                ],
                [
                  22.774972,
                  37.30501
                ],
                [
                  23.154225,
                  36.422506
                ],
                [
                  22.490028,
                  36.41
                ],
                [
                  21.670026,
                  36.844986
                ],
                [
                  21.295011,
                  37.644989
                ],
                [
                  21.120034,
                  38.310323
                ],
                [
                  20.730032,
                  38.769985
                ],
                [
                  20.217712,
                  39.340235
                ],
                [
                  20.150016,
                  39.624998
                ],
                [
                  20.615,
                  40.110007
                ],
                [
                  20.674997,
                  40.435
                ],
                [
                  20.99999,
                  40.580004
                ],
                [
                  21.02004,
                  40.842727
                ],
                [
                  21.674161,
                  40.931275
                ],
                [
                  22.055378,
                  41.149866
                ],
                [
                  22.597308,
                  41.130487
                ],
                [
                  22.76177,
                  41.3048
                ],
                [
                  22.952377,
                  41.337994
                ],
                [
                  23.692074,
                  41.309081
                ],
                [
                  24.492645,
                  41.583896
                ],
                [
                  25.197201,
                  41.234486
                ],
                [
                  26.106138,
                  41.328899
                ],
                [
                  26.117042,
                  41.826905
                ],
                [
                  26.604196,
                  41.562115
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],85:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Greenland",
    "official": "Greenland",
    "native": {
      "kal": {
        "official": "Kalaallit Nunaat",
        "common": "Kalaallit Nunaat"
      }
    }
  },
  "tld": [
    ".gl"
  ],
  "currency": [
    "DKK"
  ],
  "callingCode": [
    "299"
  ],
  "capital": "Nuuk",
  "altSpellings": [
    "GL",
    "Grønland"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "kal": "Greenlandic"
  },
  "translations": {
    "deu": {
      "official": "Grönland",
      "common": "Grönland"
    },
    "fra": {
      "official": "Groenland",
      "common": "Groenland"
    },
    "hrv": {
      "official": "Grenland",
      "common": "Grenland"
    },
    "ita": {
      "official": "Groenlandia",
      "common": "Groenlandia"
    },
    "jpn": {
      "official": "グリーンランド",
      "common": "グリーンランド"
    },
    "nld": {
      "official": "Groenland",
      "common": "Groenland"
    },
    "por": {
      "official": "Groenlândia",
      "common": "Gronelândia"
    },
    "rus": {
      "official": "Гренландия",
      "common": "Гренландия"
    },
    "spa": {
      "official": "Groenlandia",
      "common": "Groenlandia"
    },
    "fin": {
      "official": "Groönlanti",
      "common": "Groönlanti"
    }
  },
  "latlng": [
    72,
    -40
  ],
  "demonym": "Greenlandic",
  "landlocked": false,
  "borders": [],
  "area": 2166086,
  "codes": {
    "cca2": "GL",
    "ccn3": "304",
    "cca3": "GRL",
    "cioc": ""
  },
  "provinces": [
    "Avannaa (Nordgronland)",
    "Kitaa (Vestgronland)",
    "Tunu (Ostgronland)"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GRL",
        "properties": {
          "name": "Greenland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -46.76379,
                82.62796
              ],
              [
                -43.40644,
                83.22516
              ],
              [
                -39.89753,
                83.18018
              ],
              [
                -38.62214,
                83.54905
              ],
              [
                -35.08787,
                83.64513
              ],
              [
                -27.10046,
                83.51966
              ],
              [
                -20.84539,
                82.72669
              ],
              [
                -22.69182,
                82.34165
              ],
              [
                -26.51753,
                82.29765
              ],
              [
                -31.9,
                82.2
              ],
              [
                -31.39646,
                82.02154
              ],
              [
                -27.85666,
                82.13178
              ],
              [
                -24.84448,
                81.78697
              ],
              [
                -22.90328,
                82.09317
              ],
              [
                -22.07175,
                81.73449
              ],
              [
                -23.16961,
                81.15271
              ],
              [
                -20.62363,
                81.52462
              ],
              [
                -15.76818,
                81.91245
              ],
              [
                -12.77018,
                81.71885
              ],
              [
                -12.20855,
                81.29154
              ],
              [
                -16.28533,
                80.58004
              ],
              [
                -16.85,
                80.35
              ],
              [
                -20.04624,
                80.17708
              ],
              [
                -17.73035,
                80.12912
              ],
              [
                -18.9,
                79.4
              ],
              [
                -19.70499,
                78.75128
              ],
              [
                -19.67353,
                77.63859
              ],
              [
                -18.47285,
                76.98565
              ],
              [
                -20.03503,
                76.94434
              ],
              [
                -21.67944,
                76.62795
              ],
              [
                -19.83407,
                76.09808
              ],
              [
                -19.59896,
                75.24838
              ],
              [
                -20.66818,
                75.15585
              ],
              [
                -19.37281,
                74.29561
              ],
              [
                -21.59422,
                74.22382
              ],
              [
                -20.43454,
                73.81713
              ],
              [
                -20.76234,
                73.46436
              ],
              [
                -22.17221,
                73.30955
              ],
              [
                -23.56593,
                73.30663
              ],
              [
                -22.31311,
                72.62928
              ],
              [
                -22.29954,
                72.18409
              ],
              [
                -24.27834,
                72.59788
              ],
              [
                -24.79296,
                72.3302
              ],
              [
                -23.44296,
                72.08016
              ],
              [
                -22.13281,
                71.46898
              ],
              [
                -21.75356,
                70.66369
              ],
              [
                -23.53603,
                70.471
              ],
              [
                -24.30702,
                70.85649
              ],
              [
                -25.54341,
                71.43094
              ],
              [
                -25.20135,
                70.75226
              ],
              [
                -26.36276,
                70.22646
              ],
              [
                -23.72742,
                70.18401
              ],
              [
                -22.34902,
                70.12946
              ],
              [
                -25.02927,
                69.2588
              ],
              [
                -27.74737,
                68.47046
              ],
              [
                -30.67371,
                68.12503
              ],
              [
                -31.77665,
                68.12078
              ],
              [
                -32.81105,
                67.73547
              ],
              [
                -34.20196,
                66.67974
              ],
              [
                -36.35284,
                65.9789
              ],
              [
                -37.04378,
                65.93768
              ],
              [
                -38.37505,
                65.69213
              ],
              [
                -39.81222,
                65.45848
              ],
              [
                -40.66899,
                64.83997
              ],
              [
                -40.68281,
                64.13902
              ],
              [
                -41.1887,
                63.48246
              ],
              [
                -42.81938,
                62.68233
              ],
              [
                -42.41666,
                61.90093
              ],
              [
                -42.86619,
                61.07404
              ],
              [
                -43.3784,
                60.09772
              ],
              [
                -44.7875,
                60.03676
              ],
              [
                -46.26364,
                60.85328
              ],
              [
                -48.26294,
                60.85843
              ],
              [
                -49.23308,
                61.40681
              ],
              [
                -49.90039,
                62.38336
              ],
              [
                -51.63325,
                63.62691
              ],
              [
                -52.14014,
                64.27842
              ],
              [
                -52.27659,
                65.1767
              ],
              [
                -53.66166,
                66.09957
              ],
              [
                -53.30161,
                66.8365
              ],
              [
                -53.96911,
                67.18899
              ],
              [
                -52.9804,
                68.35759
              ],
              [
                -51.47536,
                68.72958
              ],
              [
                -51.08041,
                69.14781
              ],
              [
                -50.87122,
                69.9291
              ],
              [
                -52.013585,
                69.574925
              ],
              [
                -52.55792,
                69.42616
              ],
              [
                -53.45629,
                69.283625
              ],
              [
                -54.68336,
                69.61003
              ],
              [
                -54.75001,
                70.28932
              ],
              [
                -54.35884,
                70.821315
              ],
              [
                -53.431315,
                70.835755
              ],
              [
                -51.39014,
                70.56978
              ],
              [
                -53.10937,
                71.20485
              ],
              [
                -54.00422,
                71.54719
              ],
              [
                -55,
                71.406537
              ],
              [
                -55.83468,
                71.65444
              ],
              [
                -54.71819,
                72.58625
              ],
              [
                -55.32634,
                72.95861
              ],
              [
                -56.12003,
                73.64977
              ],
              [
                -57.32363,
                74.71026
              ],
              [
                -58.59679,
                75.09861
              ],
              [
                -58.58516,
                75.51727
              ],
              [
                -61.26861,
                76.10238
              ],
              [
                -63.39165,
                76.1752
              ],
              [
                -66.06427,
                76.13486
              ],
              [
                -68.50438,
                76.06141
              ],
              [
                -69.66485,
                76.37975
              ],
              [
                -71.40257,
                77.00857
              ],
              [
                -68.77671,
                77.32312
              ],
              [
                -66.76397,
                77.37595
              ],
              [
                -71.04293,
                77.63595
              ],
              [
                -73.297,
                78.04419
              ],
              [
                -73.15938,
                78.43271
              ],
              [
                -69.37345,
                78.91388
              ],
              [
                -65.7107,
                79.39436
              ],
              [
                -65.3239,
                79.75814
              ],
              [
                -68.02298,
                80.11721
              ],
              [
                -67.15129,
                80.51582
              ],
              [
                -63.68925,
                81.21396
              ],
              [
                -62.23444,
                81.3211
              ],
              [
                -62.65116,
                81.77042
              ],
              [
                -60.28249,
                82.03363
              ],
              [
                -57.20744,
                82.19074
              ],
              [
                -54.13442,
                82.19962
              ],
              [
                -53.04328,
                81.88833
              ],
              [
                -50.39061,
                82.43883
              ],
              [
                -48.00386,
                82.06481
              ],
              [
                -46.59984,
                81.985945
              ],
              [
                -44.523,
                81.6607
              ],
              [
                -46.9007,
                82.19979
              ],
              [
                -46.76379,
                82.62796
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],86:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Grenada",
    "official": "Grenada",
    "native": {
      "eng": {
        "official": "Grenada",
        "common": "Grenada"
      }
    }
  },
  "tld": [
    ".gd"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1473"
  ],
  "capital": "St. George's",
  "altSpellings": [
    "GD"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "fra": {
      "official": "Grenade",
      "common": "Grenade"
    },
    "hrv": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "ita": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "jpn": {
      "official": "グレナダ",
      "common": "グレナダ"
    },
    "nld": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "por": {
      "official": "Grenada",
      "common": "Granada"
    },
    "rus": {
      "official": "Гренада",
      "common": "Гренада"
    },
    "spa": {
      "official": "Granada",
      "common": "Grenada"
    },
    "fin": {
      "official": "Grenada",
      "common": "Grenada"
    }
  },
  "latlng": [
    12.11666666,
    -61.66666666
  ],
  "demonym": "Grenadian",
  "landlocked": false,
  "borders": [],
  "area": 344,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Grenada.svg",
  "codes": {
    "cca2": "GD",
    "ccn3": "308",
    "cca3": "GRD",
    "cioc": "GRN"
  },
  "provinces": [
    "Carriacou and Petit Martinique",
    "Saint Andrew",
    "Saint David",
    "Saint George",
    "Saint John",
    "Saint Mark",
    "Saint Patrick"
  ],
  "geoJSON": {}
}
},{}],87:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guadeloupe",
    "official": "Guadeloupe",
    "native": {
      "fra": {
        "official": "Guadeloupe",
        "common": "Guadeloupe"
      }
    }
  },
  "tld": [
    ".gp"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "590"
  ],
  "capital": "Basse-Terre",
  "altSpellings": [
    "GP",
    "Gwadloup"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Guadeloupe",
      "common": "Guadeloupe"
    },
    "fra": {
      "official": "Guadeloupe",
      "common": "Guadeloupe"
    },
    "hrv": {
      "official": "Gvadalupa",
      "common": "Gvadalupa"
    },
    "ita": {
      "official": "Guadeloupe",
      "common": "Guadeloupa"
    },
    "jpn": {
      "official": "グアドループ島",
      "common": "グアドループ"
    },
    "nld": {
      "official": "Guadeloupe",
      "common": "Guadeloupe"
    },
    "por": {
      "official": "Guadalupe",
      "common": "Guadalupe"
    },
    "rus": {
      "official": "Гваделупа",
      "common": "Гваделупа"
    },
    "spa": {
      "official": "Guadalupe",
      "common": "Guadalupe"
    },
    "fin": {
      "official": "Guadeloupen departmentti",
      "common": "Guadeloupe"
    }
  },
  "latlng": [
    16.25,
    -61.583333
  ],
  "demonym": "Guadeloupian",
  "landlocked": false,
  "borders": [],
  "area": 1628,
  "codes": {
    "cca2": "GP",
    "ccn3": "312",
    "cca3": "GLP",
    "cioc": ""
  },
  "provinces": [
    "Basse-Terre",
    "Grande-Terre",
    "Iles de la Petite Terre",
    "Iles des Saintes",
    "Marie-Galante"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],88:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guam",
    "official": "Guam",
    "native": {
      "cha": {
        "official": "Guåhån",
        "common": "Guåhån"
      },
      "eng": {
        "official": "Guam",
        "common": "Guam"
      },
      "spa": {
        "official": "Guam",
        "common": "Guam"
      }
    }
  },
  "tld": [
    ".gu"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1671"
  ],
  "capital": "Hagåtña",
  "altSpellings": [
    "GU",
    "Guåhån"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "cha": "Chamorro",
    "eng": "English",
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Guam",
      "common": "Guam"
    },
    "fra": {
      "official": "Guam",
      "common": "Guam"
    },
    "hrv": {
      "official": "Guam",
      "common": "Guam"
    },
    "ita": {
      "official": "Guam",
      "common": "Guam"
    },
    "jpn": {
      "official": "グアム",
      "common": "グアム"
    },
    "nld": {
      "official": "Guam",
      "common": "Guam"
    },
    "por": {
      "official": "Guam",
      "common": "Guam"
    },
    "rus": {
      "official": "Гуам",
      "common": "Гуам"
    },
    "spa": {
      "official": "Guam",
      "common": "Guam"
    },
    "fin": {
      "official": "Guam",
      "common": "Guam"
    }
  },
  "latlng": [
    13.46666666,
    144.78333333
  ],
  "demonym": "Guamanian",
  "landlocked": false,
  "borders": [],
  "area": 549,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Guam.svg",
  "codes": {
    "cca2": "GU",
    "ccn3": "316",
    "cca3": "GUM",
    "cioc": "GUM"
  },
  "provinces": [
    "Guam"
  ],
  "geoJSON": {}
}
},{}],89:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guatemala",
    "official": "Republic of Guatemala",
    "native": {
      "spa": {
        "official": "República de Guatemala",
        "common": "Guatemala"
      }
    }
  },
  "tld": [
    ".gt"
  ],
  "currency": [
    "GTQ"
  ],
  "callingCode": [
    "502"
  ],
  "capital": "Guatemala City",
  "altSpellings": [
    "GT"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Guatemala",
      "common": "Guatemala"
    },
    "fra": {
      "official": "République du Guatemala",
      "common": "Guatemala"
    },
    "hrv": {
      "official": "Republika Gvatemala",
      "common": "Gvatemala"
    },
    "ita": {
      "official": "Repubblica del Guatemala",
      "common": "Guatemala"
    },
    "jpn": {
      "official": "グアテマラ共和国",
      "common": "グアテマラ"
    },
    "nld": {
      "official": "Republiek Guatemala",
      "common": "Guatemala"
    },
    "por": {
      "official": "República da Guatemala",
      "common": "Guatemala"
    },
    "rus": {
      "official": "Республика Гватемала",
      "common": "Гватемала"
    },
    "spa": {
      "official": "República de Guatemala",
      "common": "Guatemala"
    },
    "fin": {
      "official": "Guatemalan tasavalta",
      "common": "Guatemala"
    }
  },
  "latlng": [
    15.5,
    -90.25
  ],
  "demonym": "Guatemalan",
  "landlocked": false,
  "borders": [
    "BLZ",
    "SLV",
    "HND",
    "MEX"
  ],
  "area": 108889,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Guatemala.svg",
  "codes": {
    "cca2": "GT",
    "ccn3": "320",
    "cca3": "GTM",
    "cioc": "GUA"
  },
  "provinces": [
    "Alta Verapaz",
    "Baja Verapaz",
    "Chimaltenango",
    "Chiquimula",
    "El Progreso",
    "Escuintla",
    "Guatemala",
    "Huehuetenango",
    "Izabal",
    "Jalapa",
    "Jutiapa",
    "Peten",
    "Quetzaltenango",
    "Quiche",
    "Retalhuleu",
    "Sacatepequez",
    "San Marcos",
    "Santa Rosa",
    "Solola",
    "Suchitepequez",
    "Totonicapan",
    "Zacapa"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GTM",
        "properties": {
          "name": "Guatemala"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.095555,
                13.735338
              ],
              [
                -90.608624,
                13.909771
              ],
              [
                -91.23241,
                13.927832
              ],
              [
                -91.689747,
                14.126218
              ],
              [
                -92.22775,
                14.538829
              ],
              [
                -92.20323,
                14.830103
              ],
              [
                -92.087216,
                15.064585
              ],
              [
                -92.229249,
                15.251447
              ],
              [
                -91.74796,
                16.066565
              ],
              [
                -90.464473,
                16.069562
              ],
              [
                -90.438867,
                16.41011
              ],
              [
                -90.600847,
                16.470778
              ],
              [
                -90.711822,
                16.687483
              ],
              [
                -91.08167,
                16.918477
              ],
              [
                -91.453921,
                17.252177
              ],
              [
                -91.002269,
                17.254658
              ],
              [
                -91.00152,
                17.817595
              ],
              [
                -90.067934,
                17.819326
              ],
              [
                -89.14308,
                17.808319
              ],
              [
                -89.150806,
                17.015577
              ],
              [
                -89.229122,
                15.886938
              ],
              [
                -88.930613,
                15.887273
              ],
              [
                -88.604586,
                15.70638
              ],
              [
                -88.518364,
                15.855389
              ],
              [
                -88.225023,
                15.727722
              ],
              [
                -88.68068,
                15.346247
              ],
              [
                -89.154811,
                15.066419
              ],
              [
                -89.22522,
                14.874286
              ],
              [
                -89.145535,
                14.678019
              ],
              [
                -89.353326,
                14.424133
              ],
              [
                -89.587343,
                14.362586
              ],
              [
                -89.534219,
                14.244816
              ],
              [
                -89.721934,
                14.134228
              ],
              [
                -90.064678,
                13.88197
              ],
              [
                -90.095555,
                13.735338
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],90:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guernsey",
    "official": "Bailiwick of Guernsey",
    "native": {
      "eng": {
        "official": "Bailiwick of Guernsey",
        "common": "Guernsey"
      },
      "fra": {
        "official": "Bailliage de Guernesey",
        "common": "Guernesey"
      },
      "nfr": {
        "official": "Dgèrnésiais",
        "common": "Dgèrnésiais"
      }
    }
  },
  "tld": [
    ".gg"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "capital": "St. Peter Port",
  "altSpellings": [
    "GG",
    "Bailiwick of Guernsey",
    "Bailliage de Guernesey"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "eng": "English",
    "fra": "French",
    "nfr": "Guernésiais"
  },
  "translations": {
    "deu": {
      "official": "Guernsey",
      "common": "Guernsey"
    },
    "fra": {
      "official": "Bailliage de Guernesey",
      "common": "Guernesey"
    },
    "hrv": {
      "official": "Struka Guernsey",
      "common": "Guernsey"
    },
    "ita": {
      "official": "Baliato di Guernsey",
      "common": "Guernsey"
    },
    "jpn": {
      "official": "ガーンジーの得意分野",
      "common": "ガーンジー"
    },
    "nld": {
      "official": "Baljuwschap Guernsey",
      "common": "Guernsey"
    },
    "por": {
      "official": "Bailiado de Guernsey",
      "common": "Guernsey"
    },
    "rus": {
      "official": "Коронное владение Гернси",
      "common": "Гернси"
    },
    "spa": {
      "official": "Bailía de Guernsey",
      "common": "Guernsey"
    },
    "fin": {
      "official": "Guernsey",
      "common": "Guernsey"
    }
  },
  "latlng": [
    49.46666666,
    -2.58333333
  ],
  "demonym": "Channel Islander",
  "landlocked": false,
  "borders": [],
  "area": 78,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Guernsey.svg",
  "codes": {
    "cca2": "GG",
    "ccn3": "831",
    "cca3": "GGY",
    "cioc": ""
  },
  "provinces": [
    "Castel",
    "Forest",
    "St. Andrew",
    "St. Martin",
    "St. Peter Port",
    "St. Pierre du Bois",
    "St. Sampson",
    "St. Saviour",
    "Torteval",
    "Vale"
  ],
  "geoJSON": {}
}
},{}],91:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guinea",
    "official": "Republic of Guinea",
    "native": {
      "fra": {
        "official": "République de Guinée",
        "common": "Guinée"
      }
    }
  },
  "tld": [
    ".gn"
  ],
  "currency": [
    "GNF"
  ],
  "callingCode": [
    "224"
  ],
  "capital": "Conakry",
  "altSpellings": [
    "GN",
    "Republic of Guinea",
    "République de Guinée"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Guinea",
      "common": "Guinea"
    },
    "fra": {
      "official": "République de Guinée",
      "common": "Guinée"
    },
    "hrv": {
      "official": "Republika Gvineja",
      "common": "Gvineja"
    },
    "ita": {
      "official": "Repubblica di Guinea",
      "common": "Guinea"
    },
    "jpn": {
      "official": "ギニア共和国",
      "common": "ギニア"
    },
    "nld": {
      "official": "Republiek Guinee",
      "common": "Guinee"
    },
    "por": {
      "official": "República da Guiné",
      "common": "Guiné"
    },
    "rus": {
      "official": "Республика Гвинея",
      "common": "Гвинея"
    },
    "spa": {
      "official": "República de Guinea",
      "common": "Guinea"
    },
    "fin": {
      "official": "Guinean tasavalta",
      "common": "Guinea"
    }
  },
  "latlng": [
    11,
    -10
  ],
  "demonym": "Guinean",
  "landlocked": false,
  "borders": [
    "CIV",
    "GNB",
    "LBR",
    "MLI",
    "SEN",
    "SLE"
  ],
  "area": 245857,
  "codes": {
    "cca2": "GN",
    "ccn3": "324",
    "cca3": "GIN",
    "cioc": "GUI"
  },
  "provinces": [
    "Beyla",
    "Boffa",
    "Boke",
    "Conakry",
    "Coyah",
    "Dabola",
    "Dalaba",
    "Dinguiraye",
    "Dubreka",
    "Faranah",
    "Forecariah",
    "Fria",
    "Gaoual",
    "Gueckedou",
    "Kankan",
    "Kerouane",
    "Kindia",
    "Kissidougou",
    "Koubia",
    "Koundara",
    "Kouroussa",
    "Labe",
    "Lelouma",
    "Lola",
    "Macenta",
    "Mali",
    "Mamou",
    "Mandiana",
    "Nzerekore",
    "Pita",
    "Siguiri",
    "Telimele",
    "Tougue",
    "Yomou"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GIN",
        "properties": {
          "name": "Guinea"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -8.439298,
                7.686043
              ],
              [
                -8.722124,
                7.711674
              ],
              [
                -8.926065,
                7.309037
              ],
              [
                -9.208786,
                7.313921
              ],
              [
                -9.403348,
                7.526905
              ],
              [
                -9.33728,
                7.928534
              ],
              [
                -9.755342,
                8.541055
              ],
              [
                -10.016567,
                8.428504
              ],
              [
                -10.230094,
                8.406206
              ],
              [
                -10.505477,
                8.348896
              ],
              [
                -10.494315,
                8.715541
              ],
              [
                -10.65477,
                8.977178
              ],
              [
                -10.622395,
                9.26791
              ],
              [
                -10.839152,
                9.688246
              ],
              [
                -11.117481,
                10.045873
              ],
              [
                -11.917277,
                10.046984
              ],
              [
                -12.150338,
                9.858572
              ],
              [
                -12.425929,
                9.835834
              ],
              [
                -12.596719,
                9.620188
              ],
              [
                -12.711958,
                9.342712
              ],
              [
                -13.24655,
                8.903049
              ],
              [
                -13.685154,
                9.494744
              ],
              [
                -14.074045,
                9.886167
              ],
              [
                -14.330076,
                10.01572
              ],
              [
                -14.579699,
                10.214467
              ],
              [
                -14.693232,
                10.656301
              ],
              [
                -14.839554,
                10.876572
              ],
              [
                -15.130311,
                11.040412
              ],
              [
                -14.685687,
                11.527824
              ],
              [
                -14.382192,
                11.509272
              ],
              [
                -14.121406,
                11.677117
              ],
              [
                -13.9008,
                11.678719
              ],
              [
                -13.743161,
                11.811269
              ],
              [
                -13.828272,
                12.142644
              ],
              [
                -13.718744,
                12.247186
              ],
              [
                -13.700476,
                12.586183
              ],
              [
                -13.217818,
                12.575874
              ],
              [
                -12.499051,
                12.33209
              ],
              [
                -12.278599,
                12.35444
              ],
              [
                -12.203565,
                12.465648
              ],
              [
                -11.658301,
                12.386583
              ],
              [
                -11.513943,
                12.442988
              ],
              [
                -11.456169,
                12.076834
              ],
              [
                -11.297574,
                12.077971
              ],
              [
                -11.036556,
                12.211245
              ],
              [
                -10.87083,
                12.177887
              ],
              [
                -10.593224,
                11.923975
              ],
              [
                -10.165214,
                11.844084
              ],
              [
                -9.890993,
                12.060479
              ],
              [
                -9.567912,
                12.194243
              ],
              [
                -9.327616,
                12.334286
              ],
              [
                -9.127474,
                12.30806
              ],
              [
                -8.905265,
                12.088358
              ],
              [
                -8.786099,
                11.812561
              ],
              [
                -8.376305,
                11.393646
              ],
              [
                -8.581305,
                11.136246
              ],
              [
                -8.620321,
                10.810891
              ],
              [
                -8.407311,
                10.909257
              ],
              [
                -8.282357,
                10.792597
              ],
              [
                -8.335377,
                10.494812
              ],
              [
                -8.029944,
                10.206535
              ],
              [
                -8.229337,
                10.12902
              ],
              [
                -8.309616,
                9.789532
              ],
              [
                -8.079114,
                9.376224
              ],
              [
                -7.8321,
                8.575704
              ],
              [
                -8.203499,
                8.455453
              ],
              [
                -8.299049,
                8.316444
              ],
              [
                -8.221792,
                8.123329
              ],
              [
                -8.280703,
                7.68718
              ],
              [
                -8.439298,
                7.686043
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],92:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guinea-Bissau",
    "official": "Republic of Guinea-Bissau",
    "native": {
      "por": {
        "official": "República da Guiné-Bissau",
        "common": "Guiné-Bissau"
      }
    }
  },
  "tld": [
    ".gw"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "245"
  ],
  "capital": "Bissau",
  "altSpellings": [
    "GW",
    "Republic of Guinea-Bissau",
    "República da Guiné-Bissau"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "deu": {
      "official": "Republik Guinea-Bissau",
      "common": "Guinea-Bissau"
    },
    "fra": {
      "official": "République de Guinée-Bissau",
      "common": "Guinée-Bissau"
    },
    "hrv": {
      "official": "Republika Gvineja Bisau",
      "common": "Gvineja Bisau"
    },
    "ita": {
      "official": "Repubblica di Guinea-Bissau",
      "common": "Guinea-Bissau"
    },
    "jpn": {
      "official": "ギニアビサウ共和国",
      "common": "ギニアビサウ"
    },
    "nld": {
      "official": "Republiek Guinee-Bissau",
      "common": "Guinee-Bissau"
    },
    "por": {
      "official": "República da Guiné-Bissau",
      "common": "Guiné-Bissau"
    },
    "rus": {
      "official": "Республика Гвинея -Бисау",
      "common": "Гвинея-Бисау"
    },
    "spa": {
      "official": "República de Guinea-Bissau",
      "common": "Guinea-Bisáu"
    },
    "fin": {
      "official": "Guinea-Bissaun tasavalta",
      "common": "Guinea-Bissau"
    }
  },
  "latlng": [
    12,
    -15
  ],
  "demonym": "Guinea-Bissauan",
  "landlocked": false,
  "borders": [
    "GIN",
    "SEN"
  ],
  "area": 36125,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Guinea-Bissau.svg",
  "codes": {
    "cca2": "GW",
    "ccn3": "624",
    "cca3": "GNB",
    "cioc": "GBS"
  },
  "provinces": [
    "Bafata",
    "Biombo",
    "Bissau",
    "Bolama-Bijagos",
    "Cacheu",
    "Gabu",
    "Oio",
    "Quinara",
    "Tombali"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GNB",
        "properties": {
          "name": "Guinea Bissau"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -15.130311,
                11.040412
              ],
              [
                -15.66418,
                11.458474
              ],
              [
                -16.085214,
                11.524594
              ],
              [
                -16.314787,
                11.806515
              ],
              [
                -16.308947,
                11.958702
              ],
              [
                -16.613838,
                12.170911
              ],
              [
                -16.677452,
                12.384852
              ],
              [
                -16.147717,
                12.547762
              ],
              [
                -15.816574,
                12.515567
              ],
              [
                -15.548477,
                12.62817
              ],
              [
                -13.700476,
                12.586183
              ],
              [
                -13.718744,
                12.247186
              ],
              [
                -13.828272,
                12.142644
              ],
              [
                -13.743161,
                11.811269
              ],
              [
                -13.9008,
                11.678719
              ],
              [
                -14.121406,
                11.677117
              ],
              [
                -14.382192,
                11.509272
              ],
              [
                -14.685687,
                11.527824
              ],
              [
                -15.130311,
                11.040412
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],93:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guyana",
    "official": "Co-operative Republic of Guyana",
    "native": {
      "eng": {
        "official": "Co-operative Republic of Guyana",
        "common": "Guyana"
      }
    }
  },
  "tld": [
    ".gy"
  ],
  "currency": [
    "GYD"
  ],
  "callingCode": [
    "592"
  ],
  "capital": "Georgetown",
  "altSpellings": [
    "GY",
    "Co-operative Republic of Guyana"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Kooperative Republik Guyana",
      "common": "Guyana"
    },
    "fra": {
      "official": "République coopérative de Guyana",
      "common": "Guyana"
    },
    "hrv": {
      "official": "Zadruga Republika Gvajana",
      "common": "Gvajana"
    },
    "ita": {
      "official": "Co -operative Republic of Guyana",
      "common": "Guyana"
    },
    "jpn": {
      "official": "ガイアナの協同共和国",
      "common": "ガイアナ"
    },
    "nld": {
      "official": "Coöperatieve Republiek Guyana",
      "common": "Guyana"
    },
    "por": {
      "official": "Co -operative República da Guiana",
      "common": "Guiana"
    },
    "rus": {
      "official": "Кооперативная Республика Гайана",
      "common": "Гайана"
    },
    "spa": {
      "official": "República Cooperativa de Guyana",
      "common": "Guyana"
    },
    "fin": {
      "official": "Guayanan osuustoiminnallinen tasavalta",
      "common": "Guayana"
    }
  },
  "latlng": [
    5,
    -59
  ],
  "demonym": "Guyanese",
  "landlocked": false,
  "borders": [
    "BRA",
    "SUR",
    "VEN"
  ],
  "area": 214969,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Guyana.svg",
  "codes": {
    "cca2": "GY",
    "ccn3": "328",
    "cca3": "GUY",
    "cioc": "GUY"
  },
  "provinces": [
    "Barima-Waini",
    "Cuyuni-Mazaruni",
    "Demerara-Mahaica",
    "East Berbice-Corentyne",
    "Essequibo Islands-West Demerara",
    "Mahaica-Berbice",
    "Pomeroon-Supenaam",
    "Potaro-Siparuni",
    "Upper Demerara-Berbice",
    "Upper Takutu-Upper Essequibo"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GUY",
        "properties": {
          "name": "Guyana"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -59.758285,
                8.367035
              ],
              [
                -59.101684,
                7.999202
              ],
              [
                -58.482962,
                7.347691
              ],
              [
                -58.454876,
                6.832787
              ],
              [
                -58.078103,
                6.809094
              ],
              [
                -57.542219,
                6.321268
              ],
              [
                -57.147436,
                5.97315
              ],
              [
                -57.307246,
                5.073567
              ],
              [
                -57.914289,
                4.812626
              ],
              [
                -57.86021,
                4.576801
              ],
              [
                -58.044694,
                4.060864
              ],
              [
                -57.601569,
                3.334655
              ],
              [
                -57.281433,
                3.333492
              ],
              [
                -57.150098,
                2.768927
              ],
              [
                -56.539386,
                1.899523
              ],
              [
                -56.782704,
                1.863711
              ],
              [
                -57.335823,
                1.948538
              ],
              [
                -57.660971,
                1.682585
              ],
              [
                -58.11345,
                1.507195
              ],
              [
                -58.429477,
                1.463942
              ],
              [
                -58.540013,
                1.268088
              ],
              [
                -59.030862,
                1.317698
              ],
              [
                -59.646044,
                1.786894
              ],
              [
                -59.718546,
                2.24963
              ],
              [
                -59.974525,
                2.755233
              ],
              [
                -59.815413,
                3.606499
              ],
              [
                -59.53804,
                3.958803
              ],
              [
                -59.767406,
                4.423503
              ],
              [
                -60.111002,
                4.574967
              ],
              [
                -59.980959,
                5.014061
              ],
              [
                -60.213683,
                5.244486
              ],
              [
                -60.733574,
                5.200277
              ],
              [
                -61.410303,
                5.959068
              ],
              [
                -61.139415,
                6.234297
              ],
              [
                -61.159336,
                6.696077
              ],
              [
                -60.543999,
                6.856584
              ],
              [
                -60.295668,
                7.043911
              ],
              [
                -60.637973,
                7.415
              ],
              [
                -60.550588,
                7.779603
              ],
              [
                -59.758285,
                8.367035
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],94:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Haiti",
    "official": "Republic of Haiti",
    "native": {
      "fra": {
        "official": "République d'Haïti",
        "common": "Haïti"
      },
      "hat": {
        "official": "Repiblik Ayiti",
        "common": "Ayiti"
      }
    }
  },
  "tld": [
    ".ht"
  ],
  "currency": [
    "HTG",
    "USD"
  ],
  "callingCode": [
    "509"
  ],
  "capital": "Port-au-Prince",
  "altSpellings": [
    "HT",
    "Republic of Haiti",
    "République d'Haïti",
    "Repiblik Ayiti"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French",
    "hat": "Haitian Creole"
  },
  "translations": {
    "deu": {
      "official": "Republik Haiti",
      "common": "Haiti"
    },
    "fra": {
      "official": "République d'Haïti",
      "common": "Haïti"
    },
    "hrv": {
      "official": "Republika Haiti",
      "common": "Haiti"
    },
    "ita": {
      "official": "Repubblica di Haiti",
      "common": "Haiti"
    },
    "jpn": {
      "official": "ハイチ共和国",
      "common": "ハイチ"
    },
    "nld": {
      "official": "Republiek Haïti",
      "common": "Haïti"
    },
    "por": {
      "official": "República do Haiti",
      "common": "Haiti"
    },
    "rus": {
      "official": "Республика Гаити",
      "common": "Гаити"
    },
    "spa": {
      "official": "República de Haití",
      "common": "Haiti"
    },
    "fin": {
      "official": "Haitin tasavalta",
      "common": "Haiti"
    }
  },
  "latlng": [
    19,
    -72.41666666
  ],
  "demonym": "Haitian",
  "landlocked": false,
  "borders": [
    "DOM"
  ],
  "area": 27750,
  "codes": {
    "cca2": "HT",
    "ccn3": "332",
    "cca3": "HTI",
    "cioc": "HAI"
  },
  "provinces": [
    "Artibonite",
    "Centre",
    "Grand'Anse",
    "Nord",
    "Nord-Est",
    "Nord-Ouest",
    "Ouest",
    "Sud",
    "Sud-Est"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "HTI",
        "properties": {
          "name": "Haiti"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -73.189791,
                19.915684
              ],
              [
                -72.579673,
                19.871501
              ],
              [
                -71.712361,
                19.714456
              ],
              [
                -71.624873,
                19.169838
              ],
              [
                -71.701303,
                18.785417
              ],
              [
                -71.945112,
                18.6169
              ],
              [
                -71.687738,
                18.31666
              ],
              [
                -71.708305,
                18.044997
              ],
              [
                -72.372476,
                18.214961
              ],
              [
                -72.844411,
                18.145611
              ],
              [
                -73.454555,
                18.217906
              ],
              [
                -73.922433,
                18.030993
              ],
              [
                -74.458034,
                18.34255
              ],
              [
                -74.369925,
                18.664908
              ],
              [
                -73.449542,
                18.526053
              ],
              [
                -72.694937,
                18.445799
              ],
              [
                -72.334882,
                18.668422
              ],
              [
                -72.79165,
                19.101625
              ],
              [
                -72.784105,
                19.483591
              ],
              [
                -73.415022,
                19.639551
              ],
              [
                -73.189791,
                19.915684
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],95:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Heard Island and McDonald Islands",
    "official": "Heard Island and McDonald Islands",
    "native": {
      "eng": {
        "official": "Heard Island and McDonald Islands",
        "common": "Heard Island and McDonald Islands"
      }
    }
  },
  "tld": [
    ".hm",
    ".aq"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "HM",
    "Heard Island and McDonald Mcdonald Islands"
  ],
  "region": "",
  "subregion": "",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Heard und McDonaldinseln",
      "common": "Heard und die McDonaldinseln"
    },
    "fra": {
      "official": "Des îles Heard et McDonald",
      "common": "Îles Heard-et-MacDonald"
    },
    "hrv": {
      "official": "Otok Heard i otočje McDonald",
      "common": "Otok Heard i otočje McDonald"
    },
    "ita": {
      "official": "Isole Heard e McDonald",
      "common": "Isole Heard e McDonald"
    },
    "jpn": {
      "official": "ハード島とマクドナルド諸島",
      "common": "ハード島とマクドナルド諸島"
    },
    "nld": {
      "official": "Heard en McDonaldeilanden",
      "common": "Heard-en McDonaldeilanden"
    },
    "por": {
      "official": "Ilha Heard e Ilhas McDonald",
      "common": "Ilha Heard e Ilhas McDonald"
    },
    "rus": {
      "official": "Остров Херд и острова Макдональд",
      "common": "Остров Херд и острова Макдональд"
    },
    "spa": {
      "official": "Islas Heard y McDonald",
      "common": "Islas Heard y McDonald"
    },
    "fin": {
      "official": "Heard ja McDonaldinsaaret",
      "common": "Heard ja McDonaldinsaaret"
    }
  },
  "latlng": [
    -53.1,
    72.51666666
  ],
  "demonym": "Heard and McDonald Islander",
  "landlocked": false,
  "borders": [],
  "area": 412,
  "codes": {
    "cca2": "HM",
    "ccn3": "334",
    "cca3": "HMD",
    "cioc": ""
  }
}
},{}],96:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Honduras",
    "official": "Republic of Honduras",
    "native": {
      "spa": {
        "official": "República de Honduras",
        "common": "Honduras"
      }
    }
  },
  "tld": [
    ".hn"
  ],
  "currency": [
    "HNL"
  ],
  "callingCode": [
    "504"
  ],
  "capital": "Tegucigalpa",
  "altSpellings": [
    "HN",
    "Republic of Honduras",
    "República de Honduras"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Honduras",
      "common": "Honduras"
    },
    "fra": {
      "official": "République du Honduras",
      "common": "Honduras"
    },
    "hrv": {
      "official": "Republika Honduras",
      "common": "Honduras"
    },
    "ita": {
      "official": "Repubblica di Honduras",
      "common": "Honduras"
    },
    "jpn": {
      "official": "ホンジュラス共和国",
      "common": "ホンジュラス"
    },
    "nld": {
      "official": "Republiek Honduras",
      "common": "Honduras"
    },
    "por": {
      "official": "República de Honduras",
      "common": "Honduras"
    },
    "rus": {
      "official": "Республика Гондурас",
      "common": "Гондурас"
    },
    "spa": {
      "official": "República de Honduras",
      "common": "Honduras"
    },
    "fin": {
      "official": "Hondurasin tasavalta",
      "common": "Honduras"
    }
  },
  "latlng": [
    15,
    -86.5
  ],
  "demonym": "Honduran",
  "landlocked": false,
  "borders": [
    "GTM",
    "SLV",
    "NIC"
  ],
  "area": 112492,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Honduras.svg",
  "codes": {
    "cca2": "HN",
    "ccn3": "340",
    "cca3": "HND",
    "cioc": "HON"
  },
  "provinces": [
    "Atlantida",
    "Choluteca",
    "Colon",
    "Comayagua",
    "Copan",
    "Cortes",
    "El Paraiso",
    "Francisco Morazan",
    "Gracias a Dios",
    "Intibuca",
    "Islas de la Bahia",
    "La Paz",
    "Lempira",
    "Ocotepeque",
    "Olancho",
    "Santa Barbara",
    "Valle",
    "Yoro"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "HND",
        "properties": {
          "name": "Honduras"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -87.316654,
                12.984686
              ],
              [
                -87.489409,
                13.297535
              ],
              [
                -87.793111,
                13.38448
              ],
              [
                -87.723503,
                13.78505
              ],
              [
                -87.859515,
                13.893312
              ],
              [
                -88.065343,
                13.964626
              ],
              [
                -88.503998,
                13.845486
              ],
              [
                -88.541231,
                13.980155
              ],
              [
                -88.843073,
                14.140507
              ],
              [
                -89.058512,
                14.340029
              ],
              [
                -89.353326,
                14.424133
              ],
              [
                -89.145535,
                14.678019
              ],
              [
                -89.22522,
                14.874286
              ],
              [
                -89.154811,
                15.066419
              ],
              [
                -88.68068,
                15.346247
              ],
              [
                -88.225023,
                15.727722
              ],
              [
                -88.121153,
                15.688655
              ],
              [
                -87.901813,
                15.864458
              ],
              [
                -87.61568,
                15.878799
              ],
              [
                -87.522921,
                15.797279
              ],
              [
                -87.367762,
                15.84694
              ],
              [
                -86.903191,
                15.756713
              ],
              [
                -86.440946,
                15.782835
              ],
              [
                -86.119234,
                15.893449
              ],
              [
                -86.001954,
                16.005406
              ],
              [
                -85.683317,
                15.953652
              ],
              [
                -85.444004,
                15.885749
              ],
              [
                -85.182444,
                15.909158
              ],
              [
                -84.983722,
                15.995923
              ],
              [
                -84.52698,
                15.857224
              ],
              [
                -84.368256,
                15.835158
              ],
              [
                -84.063055,
                15.648244
              ],
              [
                -83.773977,
                15.424072
              ],
              [
                -83.410381,
                15.270903
              ],
              [
                -83.147219,
                14.995829
              ],
              [
                -83.489989,
                15.016267
              ],
              [
                -83.628585,
                14.880074
              ],
              [
                -83.975721,
                14.749436
              ],
              [
                -84.228342,
                14.748764
              ],
              [
                -84.449336,
                14.621614
              ],
              [
                -84.649582,
                14.666805
              ],
              [
                -84.820037,
                14.819587
              ],
              [
                -84.924501,
                14.790493
              ],
              [
                -85.052787,
                14.551541
              ],
              [
                -85.148751,
                14.560197
              ],
              [
                -85.165365,
                14.35437
              ],
              [
                -85.514413,
                14.079012
              ],
              [
                -85.698665,
                13.960078
              ],
              [
                -85.801295,
                13.836055
              ],
              [
                -86.096264,
                14.038187
              ],
              [
                -86.312142,
                13.771356
              ],
              [
                -86.520708,
                13.778487
              ],
              [
                -86.755087,
                13.754845
              ],
              [
                -86.733822,
                13.263093
              ],
              [
                -86.880557,
                13.254204
              ],
              [
                -87.005769,
                13.025794
              ],
              [
                -87.316654,
                12.984686
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],97:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Hong Kong",
    "official": "Hong Kong Special Administrative Region of the People's Republic of China",
    "native": {
      "eng": {
        "official": "Hong Kong Special Administrative Region of the People's Republic of China",
        "common": "Hong Kong"
      },
      "zho": {
        "official": "香港中国特别行政区的人民共和国",
        "common": "香港"
      }
    }
  },
  "tld": [
    ".hk",
    ".香港"
  ],
  "currency": [
    "HKD"
  ],
  "callingCode": [
    "852"
  ],
  "capital": "City of Victoria",
  "altSpellings": [
    "HK"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "eng": "English",
    "zho": "Chinese"
  },
  "translations": {
    "deu": {
      "official": "Sonderverwaltungszone der Volksrepublik China",
      "common": "Hongkong"
    },
    "fra": {
      "official": "Région administrative spéciale de Hong Kong de la République populaire de Chine",
      "common": "Hong Kong"
    },
    "hrv": {
      "official": "Hong Kong Posebnog upravnog područjaNarodne Republike Kine",
      "common": "Hong Kong"
    },
    "ita": {
      "official": "Hong Kong Regione amministrativa speciale della Repubblica Popolare Cinese",
      "common": "Hong Kong"
    },
    "jpn": {
      "official": "中華人民共和国香港特別行政区",
      "common": "香港"
    },
    "nld": {
      "official": "Hong Kong Speciale Administratieve Regio van de Volksrepubliek China",
      "common": "Hongkong"
    },
    "por": {
      "official": "Hong Kong Região Administrativa Especial da República Popular da China",
      "common": "Hong Kong"
    },
    "rus": {
      "official": "Hong Kong Специальный административный район Китайской Народной Республики Китая",
      "common": "Гонконг"
    },
    "spa": {
      "official": "Hong Kong Región Administrativa Especial de la República Popular China",
      "common": "Hong Kong"
    },
    "fin": {
      "official": "Hong Kongin erityishallintoalue",
      "common": "Hongkong"
    }
  },
  "latlng": [
    22.267,
    114.188
  ],
  "demonym": "Hong Konger",
  "landlocked": false,
  "borders": [
    "CHN"
  ],
  "area": 1104,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Hong Kong.svg",
  "codes": {
    "cca2": "HK",
    "ccn3": "344",
    "cca3": "HKG",
    "cioc": "HKG"
  },
  "provinces": [
    "Hong Kong"
  ],
  "geoJSON": {}
}
},{}],98:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Hungary",
    "official": "Hungary",
    "native": {
      "hun": {
        "official": "Magyarország",
        "common": "Magyarország"
      }
    }
  },
  "tld": [
    ".hu"
  ],
  "currency": [
    "HUF"
  ],
  "callingCode": [
    "36"
  ],
  "capital": "Budapest",
  "altSpellings": [
    "HU"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "hun": "Hungarian"
  },
  "translations": {
    "deu": {
      "official": "Ungarn",
      "common": "Ungarn"
    },
    "fra": {
      "official": "Hongrie",
      "common": "Hongrie"
    },
    "hrv": {
      "official": "Madžarska",
      "common": "Mađarska"
    },
    "ita": {
      "official": "Ungheria",
      "common": "Ungheria"
    },
    "jpn": {
      "official": "ハンガリー",
      "common": "ハンガリー"
    },
    "nld": {
      "official": "Hongarije",
      "common": "Hongarije"
    },
    "por": {
      "official": "Hungria",
      "common": "Hungria"
    },
    "rus": {
      "official": "Венгрия",
      "common": "Венгрия"
    },
    "spa": {
      "official": "Hungría",
      "common": "Hungría"
    },
    "fin": {
      "official": "Unkari",
      "common": "Unkari"
    }
  },
  "latlng": [
    47,
    20
  ],
  "demonym": "Hungarian",
  "landlocked": true,
  "borders": [
    "AUT",
    "HRV",
    "ROU",
    "SRB",
    "SVK",
    "SVN",
    "UKR"
  ],
  "area": 93028,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Hungary.svg",
  "codes": {
    "cca2": "HU",
    "ccn3": "348",
    "cca3": "HUN",
    "cioc": "HUN"
  },
  "provinces": [
    "Bacs-Kiskun",
    "Baranya",
    "Bekes",
    "Bekescsaba",
    "Borsod-Abauj-Zemplen",
    "Budapest",
    "Csongrad",
    "Debrecen",
    "Dunaujvaros",
    "Eger",
    "Fejer",
    "Gyor",
    "Gyor-Moson-Sopron",
    "Hajdu-Bihar",
    "Heves",
    "Hodmezovasarhely",
    "Jasz-Nagykun-Szolnok",
    "Kaposvar",
    "Kecskemet",
    "Komarom-Esztergom",
    "Miskolc",
    "Nagykanizsa",
    "Nograd",
    "Nyiregyhaza",
    "Pecs",
    "Pest",
    "Somogy",
    "Sopron",
    "Szabolcs-Szatmar-Bereg",
    "Szeged",
    "Szekesfehervar",
    "Szolnok",
    "Szombathely",
    "Tatabanya",
    "Tolna",
    "Vas",
    "Veszprem",
    "Veszprem",
    "Zala",
    "Zalaegerszeg"
  ],
  "geoJSON": {}
}
},{}],99:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Iceland",
    "official": "Iceland",
    "native": {
      "isl": {
        "official": "Ísland",
        "common": "Ísland"
      }
    }
  },
  "tld": [
    ".is"
  ],
  "currency": [
    "ISK"
  ],
  "callingCode": [
    "354"
  ],
  "capital": "Reykjavik",
  "altSpellings": [
    "IS",
    "Island",
    "Republic of Iceland",
    "Lýðveldið Ísland"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "isl": "Icelandic"
  },
  "translations": {
    "deu": {
      "official": "Island",
      "common": "Island"
    },
    "fra": {
      "official": "République d'Islande",
      "common": "Islande"
    },
    "hrv": {
      "official": "Island",
      "common": "Island"
    },
    "ita": {
      "official": "Islanda",
      "common": "Islanda"
    },
    "jpn": {
      "official": "アイスランド",
      "common": "アイスランド"
    },
    "nld": {
      "official": "IJsland",
      "common": "IJsland"
    },
    "por": {
      "official": "Islândia",
      "common": "Islândia"
    },
    "rus": {
      "official": "Исландия",
      "common": "Исландия"
    },
    "spa": {
      "official": "Islandia",
      "common": "Islandia"
    },
    "fin": {
      "official": "Islanti",
      "common": "Islanti"
    }
  },
  "latlng": [
    65,
    -18
  ],
  "demonym": "Icelander",
  "landlocked": false,
  "borders": [],
  "area": 103000,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Iceland.svg",
  "codes": {
    "cca2": "IS",
    "ccn3": "352",
    "cca3": "ISL",
    "cioc": "ISL"
  },
  "provinces": [
    "Akranes",
    "Akureyri",
    "Arnessysla",
    "Austur-Bardhastrandarsysla",
    "Austur-Hunavatnssysla",
    "Austur-Skaftafellssysla",
    "Borgarfjardharsysla",
    "Dalasysla",
    "Eyjafjardharsysla",
    "Gullbringusysla",
    "Hafnarfjordhur",
    "Husavik",
    "Isafjordhur",
    "Keflavik",
    "Kjosarsysla",
    "Kopavogur",
    "Myrasysla",
    "Neskaupstadhur",
    "Nordhur-Isafjardharsysla",
    "Nordhur-Mulasys-la",
    "Nordhur-Thingeyjarsysla",
    "Olafsfjordhur",
    "Rangarvallasysla",
    "Reykjavik",
    "Saudharkrokur",
    "Seydhisfjordhur",
    "Siglufjordhur",
    "Skagafjardharsysla",
    "Snaefellsnes-og Hnappadalssysla",
    "Strandasysla",
    "Sudhur-Mulasysla",
    "Sudhur-Thingeyjarsysla",
    "Vesttmannaeyjar",
    "Vestur-Bardhastrandarsysla",
    "Vestur-Hunavatnssysla",
    "Vestur-Isafjardharsysla",
    "Vestur-Skaftafellssysla"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ISL",
        "properties": {
          "name": "Iceland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -14.508695,
                66.455892
              ],
              [
                -14.739637,
                65.808748
              ],
              [
                -13.609732,
                65.126671
              ],
              [
                -14.909834,
                64.364082
              ],
              [
                -17.794438,
                63.678749
              ],
              [
                -18.656246,
                63.496383
              ],
              [
                -19.972755,
                63.643635
              ],
              [
                -22.762972,
                63.960179
              ],
              [
                -21.778484,
                64.402116
              ],
              [
                -23.955044,
                64.89113
              ],
              [
                -22.184403,
                65.084968
              ],
              [
                -22.227423,
                65.378594
              ],
              [
                -24.326184,
                65.611189
              ],
              [
                -23.650515,
                66.262519
              ],
              [
                -22.134922,
                66.410469
              ],
              [
                -20.576284,
                65.732112
              ],
              [
                -19.056842,
                66.276601
              ],
              [
                -17.798624,
                65.993853
              ],
              [
                -16.167819,
                66.526792
              ],
              [
                -14.508695,
                66.455892
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],100:[function(require,module,exports){
module.exports={
  "name": {
    "common": "India",
    "official": "Republic of India",
    "native": {
      "eng": {
        "official": "Republic of India",
        "common": "India"
      },
      "hin": {
        "official": "भारत गणराज्य",
        "common": "भारत"
      },
      "tam": {
        "official": "இந்தியக் குடியரசு",
        "common": "இந்தியா"
      }
    }
  },
  "tld": [
    ".in"
  ],
  "currency": [
    "INR"
  ],
  "callingCode": [
    "91"
  ],
  "capital": "New Delhi",
  "altSpellings": [
    "IN",
    "Bhārat",
    "Republic of India",
    "Bharat Ganrajya",
    "இந்தியா"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "eng": "English",
    "hin": "Hindi",
    "tam": "Tamil"
  },
  "translations": {
    "deu": {
      "official": "Republik Indien",
      "common": "Indien"
    },
    "fra": {
      "official": "République de l'Inde",
      "common": "Inde"
    },
    "hrv": {
      "official": "Republika Indija",
      "common": "Indija"
    },
    "ita": {
      "official": "Repubblica dell'India",
      "common": "India"
    },
    "jpn": {
      "official": "インド共和国",
      "common": "インド"
    },
    "nld": {
      "official": "Republiek India",
      "common": "India"
    },
    "por": {
      "official": "República da Índia",
      "common": "Índia"
    },
    "rus": {
      "official": "Республика Индия",
      "common": "Индия"
    },
    "spa": {
      "official": "República de la India",
      "common": "India"
    },
    "fin": {
      "official": "Intian tasavalta",
      "common": "Intia"
    }
  },
  "latlng": [
    20,
    77
  ],
  "demonym": "Indian",
  "landlocked": false,
  "borders": [
    "AFG",
    "BGD",
    "BTN",
    "MMR",
    "CHN",
    "NPL",
    "PAK",
    "LKA"
  ],
  "area": 3287590,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of India.svg",
  "codes": {
    "cca2": "IN",
    "ccn3": "356",
    "cca3": "IND",
    "cioc": "IND"
  },
  "provinces": [
    "Andaman and Nicobar Islands",
    "Andhra Pradesh",
    "Arunachal Pradesh",
    "Assam",
    "Bihar",
    "Chandigarh",
    "Chhattisgarh",
    "Dadra and Nagar Haveli",
    "Daman and Diu",
    "Delhi",
    "Goa",
    "Gujarat",
    "Haryana",
    "Himachal Pradesh",
    "Jammu and Kashmir",
    "Jharkhand",
    "Karnataka",
    "Kerala",
    "Lakshadweep",
    "Madhya Pradesh",
    "Maharashtra",
    "Manipur",
    "Meghalaya",
    "Mizoram",
    "Nagaland",
    "Orissa",
    "Pondicherry",
    "Punjab",
    "Rajasthan",
    "Sikkim",
    "Tamil Nadu",
    "Tripura",
    "Uttar Pradesh",
    "Uttaranchal",
    "West Bengal"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "IND",
        "properties": {
          "name": "India"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                77.837451,
                35.49401
              ],
              [
                78.912269,
                34.321936
              ],
              [
                78.811086,
                33.506198
              ],
              [
                79.208892,
                32.994395
              ],
              [
                79.176129,
                32.48378
              ],
              [
                78.458446,
                32.618164
              ],
              [
                78.738894,
                31.515906
              ],
              [
                79.721367,
                30.882715
              ],
              [
                81.111256,
                30.183481
              ],
              [
                80.476721,
                29.729865
              ],
              [
                80.088425,
                28.79447
              ],
              [
                81.057203,
                28.416095
              ],
              [
                81.999987,
                27.925479
              ],
              [
                83.304249,
                27.364506
              ],
              [
                84.675018,
                27.234901
              ],
              [
                85.251779,
                26.726198
              ],
              [
                86.024393,
                26.630985
              ],
              [
                87.227472,
                26.397898
              ],
              [
                88.060238,
                26.414615
              ],
              [
                88.174804,
                26.810405
              ],
              [
                88.043133,
                27.445819
              ],
              [
                88.120441,
                27.876542
              ],
              [
                88.730326,
                28.086865
              ],
              [
                88.814248,
                27.299316
              ],
              [
                88.835643,
                27.098966
              ],
              [
                89.744528,
                26.719403
              ],
              [
                90.373275,
                26.875724
              ],
              [
                91.217513,
                26.808648
              ],
              [
                92.033484,
                26.83831
              ],
              [
                92.103712,
                27.452614
              ],
              [
                91.696657,
                27.771742
              ],
              [
                92.503119,
                27.896876
              ],
              [
                93.413348,
                28.640629
              ],
              [
                94.56599,
                29.277438
              ],
              [
                95.404802,
                29.031717
              ],
              [
                96.117679,
                29.452802
              ],
              [
                96.586591,
                28.83098
              ],
              [
                96.248833,
                28.411031
              ],
              [
                97.327114,
                28.261583
              ],
              [
                97.402561,
                27.882536
              ],
              [
                97.051989,
                27.699059
              ],
              [
                97.133999,
                27.083774
              ],
              [
                96.419366,
                27.264589
              ],
              [
                95.124768,
                26.573572
              ],
              [
                95.155153,
                26.001307
              ],
              [
                94.603249,
                25.162495
              ],
              [
                94.552658,
                24.675238
              ],
              [
                94.106742,
                23.850741
              ],
              [
                93.325188,
                24.078556
              ],
              [
                93.286327,
                23.043658
              ],
              [
                93.060294,
                22.703111
              ],
              [
                93.166128,
                22.27846
              ],
              [
                92.672721,
                22.041239
              ],
              [
                92.146035,
                23.627499
              ],
              [
                91.869928,
                23.624346
              ],
              [
                91.706475,
                22.985264
              ],
              [
                91.158963,
                23.503527
              ],
              [
                91.46773,
                24.072639
              ],
              [
                91.915093,
                24.130414
              ],
              [
                92.376202,
                24.976693
              ],
              [
                91.799596,
                25.147432
              ],
              [
                90.872211,
                25.132601
              ],
              [
                89.920693,
                25.26975
              ],
              [
                89.832481,
                25.965082
              ],
              [
                89.355094,
                26.014407
              ],
              [
                88.563049,
                26.446526
              ],
              [
                88.209789,
                25.768066
              ],
              [
                88.931554,
                25.238692
              ],
              [
                88.306373,
                24.866079
              ],
              [
                88.084422,
                24.501657
              ],
              [
                88.69994,
                24.233715
              ],
              [
                88.52977,
                23.631142
              ],
              [
                88.876312,
                22.879146
              ],
              [
                89.031961,
                22.055708
              ],
              [
                88.888766,
                21.690588
              ],
              [
                88.208497,
                21.703172
              ],
              [
                86.975704,
                21.495562
              ],
              [
                87.033169,
                20.743308
              ],
              [
                86.499351,
                20.151638
              ],
              [
                85.060266,
                19.478579
              ],
              [
                83.941006,
                18.30201
              ],
              [
                83.189217,
                17.671221
              ],
              [
                82.192792,
                17.016636
              ],
              [
                82.191242,
                16.556664
              ],
              [
                81.692719,
                16.310219
              ],
              [
                80.791999,
                15.951972
              ],
              [
                80.324896,
                15.899185
              ],
              [
                80.025069,
                15.136415
              ],
              [
                80.233274,
                13.835771
              ],
              [
                80.286294,
                13.006261
              ],
              [
                79.862547,
                12.056215
              ],
              [
                79.857999,
                10.357275
              ],
              [
                79.340512,
                10.308854
              ],
              [
                78.885345,
                9.546136
              ],
              [
                79.18972,
                9.216544
              ],
              [
                78.277941,
                8.933047
              ],
              [
                77.941165,
                8.252959
              ],
              [
                77.539898,
                7.965535
              ],
              [
                76.592979,
                8.899276
              ],
              [
                76.130061,
                10.29963
              ],
              [
                75.746467,
                11.308251
              ],
              [
                75.396101,
                11.781245
              ],
              [
                74.864816,
                12.741936
              ],
              [
                74.616717,
                13.992583
              ],
              [
                74.443859,
                14.617222
              ],
              [
                73.534199,
                15.990652
              ],
              [
                73.119909,
                17.92857
              ],
              [
                72.820909,
                19.208234
              ],
              [
                72.824475,
                20.419503
              ],
              [
                72.630533,
                21.356009
              ],
              [
                71.175273,
                20.757441
              ],
              [
                70.470459,
                20.877331
              ],
              [
                69.16413,
                22.089298
              ],
              [
                69.644928,
                22.450775
              ],
              [
                69.349597,
                22.84318
              ],
              [
                68.176645,
                23.691965
              ],
              [
                68.842599,
                24.359134
              ],
              [
                71.04324,
                24.356524
              ],
              [
                70.844699,
                25.215102
              ],
              [
                70.282873,
                25.722229
              ],
              [
                70.168927,
                26.491872
              ],
              [
                69.514393,
                26.940966
              ],
              [
                70.616496,
                27.989196
              ],
              [
                71.777666,
                27.91318
              ],
              [
                72.823752,
                28.961592
              ],
              [
                73.450638,
                29.976413
              ],
              [
                74.42138,
                30.979815
              ],
              [
                74.405929,
                31.692639
              ],
              [
                75.258642,
                32.271105
              ],
              [
                74.451559,
                32.7649
              ],
              [
                74.104294,
                33.441473
              ],
              [
                73.749948,
                34.317699
              ],
              [
                74.240203,
                34.748887
              ],
              [
                75.757061,
                34.504923
              ],
              [
                76.871722,
                34.653544
              ],
              [
                77.837451,
                35.49401
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],101:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Indonesia",
    "official": "Republic of Indonesia",
    "native": {
      "ind": {
        "official": "Republik Indonesia",
        "common": "Indonesia"
      }
    }
  },
  "tld": [
    ".id"
  ],
  "currency": [
    "IDR"
  ],
  "callingCode": [
    "62"
  ],
  "capital": "Jakarta",
  "altSpellings": [
    "ID",
    "Republic of Indonesia",
    "Republik Indonesia"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "ind": "Indonesian"
  },
  "translations": {
    "deu": {
      "official": "Republik Indonesien",
      "common": "Indonesien"
    },
    "fra": {
      "official": "République d'Indonésie",
      "common": "Indonésie"
    },
    "hrv": {
      "official": "Republika Indonezija",
      "common": "Indonezija"
    },
    "ita": {
      "official": "Repubblica di Indonesia",
      "common": "Indonesia"
    },
    "jpn": {
      "official": "インドネシア共和国",
      "common": "インドネシア"
    },
    "nld": {
      "official": "Republiek Indonesië",
      "common": "Indonesië"
    },
    "por": {
      "official": "República da Indonésia",
      "common": "Indonésia"
    },
    "rus": {
      "official": "Республика Индонезия",
      "common": "Индонезия"
    },
    "spa": {
      "official": "República de Indonesia",
      "common": "Indonesia"
    },
    "fin": {
      "official": "Indonesian tasavalta",
      "common": "Indonesia"
    }
  },
  "latlng": [
    -5,
    120
  ],
  "demonym": "Indonesian",
  "landlocked": false,
  "borders": [
    "TLS",
    "MYS",
    "PNG"
  ],
  "area": 1904569,
  "codes": {
    "cca2": "ID",
    "ccn3": "360",
    "cca3": "IDN",
    "cioc": "INA"
  },
  "provinces": [
    "Aceh",
    "Bali",
    "Banten",
    "Bengkulu",
    "Gorontalo",
    "Jakarta",
    "Jambi",
    "Jawa Barat",
    "Jawa Tengah",
    "Jawa Timur",
    "Kalimantan Barat",
    "Kalimantan Selatan",
    "Kalimantan Tengah",
    "Kalimantan Timur",
    "Kalimantan Utara",
    "Kepulauan Bangka Belitung",
    "Kepulauan Riau",
    "Lampung",
    "Maluku",
    "Maluku Utara",
    "Nusa Tenggara Barat",
    "Nusa Tenggara Timur",
    "Papua",
    "Papua Barat",
    "Riau",
    "Sulawesi Barat",
    "Sulawesi Selatan",
    "Sulawesi Tengah",
    "Sulawesi Utara",
    "Sumatera Barat",
    "Sumatera Selatan",
    "Sumatera Utara",
    "Yogyakarta"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "IDN",
        "properties": {
          "name": "Indonesia"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  120.715609,
                  -10.239581
                ],
                [
                  120.295014,
                  -10.25865
                ],
                [
                  118.967808,
                  -9.557969
                ],
                [
                  119.90031,
                  -9.36134
                ],
                [
                  120.425756,
                  -9.665921
                ],
                [
                  120.775502,
                  -9.969675
                ],
                [
                  120.715609,
                  -10.239581
                ]
              ]
            ],
            [
              [
                [
                  124.43595,
                  -10.140001
                ],
                [
                  123.579982,
                  -10.359987
                ],
                [
                  123.459989,
                  -10.239995
                ],
                [
                  123.550009,
                  -9.900016
                ],
                [
                  123.980009,
                  -9.290027
                ],
                [
                  124.968682,
                  -8.89279
                ],
                [
                  125.07002,
                  -9.089987
                ],
                [
                  125.08852,
                  -9.393173
                ],
                [
                  124.43595,
                  -10.140001
                ]
              ]
            ],
            [
              [
                [
                  117.900018,
                  -8.095681
                ],
                [
                  118.260616,
                  -8.362383
                ],
                [
                  118.87846,
                  -8.280683
                ],
                [
                  119.126507,
                  -8.705825
                ],
                [
                  117.970402,
                  -8.906639
                ],
                [
                  117.277731,
                  -9.040895
                ],
                [
                  116.740141,
                  -9.032937
                ],
                [
                  117.083737,
                  -8.457158
                ],
                [
                  117.632024,
                  -8.449303
                ],
                [
                  117.900018,
                  -8.095681
                ]
              ]
            ],
            [
              [
                [
                  122.903537,
                  -8.094234
                ],
                [
                  122.756983,
                  -8.649808
                ],
                [
                  121.254491,
                  -8.933666
                ],
                [
                  119.924391,
                  -8.810418
                ],
                [
                  119.920929,
                  -8.444859
                ],
                [
                  120.715092,
                  -8.236965
                ],
                [
                  121.341669,
                  -8.53674
                ],
                [
                  122.007365,
                  -8.46062
                ],
                [
                  122.903537,
                  -8.094234
                ]
              ]
            ],
            [
              [
                [
                  108.623479,
                  -6.777674
                ],
                [
                  110.539227,
                  -6.877358
                ],
                [
                  110.759576,
                  -6.465186
                ],
                [
                  112.614811,
                  -6.946036
                ],
                [
                  112.978768,
                  -7.594213
                ],
                [
                  114.478935,
                  -7.776528
                ],
                [
                  115.705527,
                  -8.370807
                ],
                [
                  114.564511,
                  -8.751817
                ],
                [
                  113.464734,
                  -8.348947
                ],
                [
                  112.559672,
                  -8.376181
                ],
                [
                  111.522061,
                  -8.302129
                ],
                [
                  110.58615,
                  -8.122605
                ],
                [
                  109.427667,
                  -7.740664
                ],
                [
                  108.693655,
                  -7.6416
                ],
                [
                  108.277763,
                  -7.766657
                ],
                [
                  106.454102,
                  -7.3549
                ],
                [
                  106.280624,
                  -6.9249
                ],
                [
                  105.365486,
                  -6.851416
                ],
                [
                  106.051646,
                  -5.895919
                ],
                [
                  107.265009,
                  -5.954985
                ],
                [
                  108.072091,
                  -6.345762
                ],
                [
                  108.486846,
                  -6.421985
                ],
                [
                  108.623479,
                  -6.777674
                ]
              ]
            ],
            [
              [
                [
                  134.724624,
                  -6.214401
                ],
                [
                  134.210134,
                  -6.895238
                ],
                [
                  134.112776,
                  -6.142467
                ],
                [
                  134.290336,
                  -5.783058
                ],
                [
                  134.499625,
                  -5.445042
                ],
                [
                  134.727002,
                  -5.737582
                ],
                [
                  134.724624,
                  -6.214401
                ]
              ]
            ],
            [
              [
                [
                  127.249215,
                  -3.459065
                ],
                [
                  126.874923,
                  -3.790983
                ],
                [
                  126.183802,
                  -3.607376
                ],
                [
                  125.989034,
                  -3.177273
                ],
                [
                  127.000651,
                  -3.129318
                ],
                [
                  127.249215,
                  -3.459065
                ]
              ]
            ],
            [
              [
                [
                  130.471344,
                  -3.093764
                ],
                [
                  130.834836,
                  -3.858472
                ],
                [
                  129.990547,
                  -3.446301
                ],
                [
                  129.155249,
                  -3.362637
                ],
                [
                  128.590684,
                  -3.428679
                ],
                [
                  127.898891,
                  -3.393436
                ],
                [
                  128.135879,
                  -2.84365
                ],
                [
                  129.370998,
                  -2.802154
                ],
                [
                  130.471344,
                  -3.093764
                ]
              ]
            ],
            [
              [
                [
                  134.143368,
                  -1.151867
                ],
                [
                  134.422627,
                  -2.769185
                ],
                [
                  135.457603,
                  -3.367753
                ],
                [
                  136.293314,
                  -2.307042
                ],
                [
                  137.440738,
                  -1.703513
                ],
                [
                  138.329727,
                  -1.702686
                ],
                [
                  139.184921,
                  -2.051296
                ],
                [
                  139.926684,
                  -2.409052
                ],
                [
                  141.00021,
                  -2.600151
                ],
                [
                  141.017057,
                  -5.859022
                ],
                [
                  141.033852,
                  -9.117893
                ],
                [
                  140.143415,
                  -8.297168
                ],
                [
                  139.127767,
                  -8.096043
                ],
                [
                  138.881477,
                  -8.380935
                ],
                [
                  137.614474,
                  -8.411683
                ],
                [
                  138.039099,
                  -7.597882
                ],
                [
                  138.668621,
                  -7.320225
                ],
                [
                  138.407914,
                  -6.232849
                ],
                [
                  137.92784,
                  -5.393366
                ],
                [
                  135.98925,
                  -4.546544
                ],
                [
                  135.164598,
                  -4.462931
                ],
                [
                  133.66288,
                  -3.538853
                ],
                [
                  133.367705,
                  -4.024819
                ],
                [
                  132.983956,
                  -4.112979
                ],
                [
                  132.756941,
                  -3.746283
                ],
                [
                  132.753789,
                  -3.311787
                ],
                [
                  131.989804,
                  -2.820551
                ],
                [
                  133.066845,
                  -2.460418
                ],
                [
                  133.780031,
                  -2.479848
                ],
                [
                  133.696212,
                  -2.214542
                ],
                [
                  132.232373,
                  -2.212526
                ],
                [
                  131.836222,
                  -1.617162
                ],
                [
                  130.94284,
                  -1.432522
                ],
                [
                  130.519558,
                  -0.93772
                ],
                [
                  131.867538,
                  -0.695461
                ],
                [
                  132.380116,
                  -0.369538
                ],
                [
                  133.985548,
                  -0.78021
                ],
                [
                  134.143368,
                  -1.151867
                ]
              ]
            ],
            [
              [
                [
                  125.240501,
                  1.419836
                ],
                [
                  124.437035,
                  0.427881
                ],
                [
                  123.685505,
                  0.235593
                ],
                [
                  122.723083,
                  0.431137
                ],
                [
                  121.056725,
                  0.381217
                ],
                [
                  120.183083,
                  0.237247
                ],
                [
                  120.04087,
                  -0.519658
                ],
                [
                  120.935905,
                  -1.408906
                ],
                [
                  121.475821,
                  -0.955962
                ],
                [
                  123.340565,
                  -0.615673
                ],
                [
                  123.258399,
                  -1.076213
                ],
                [
                  122.822715,
                  -0.930951
                ],
                [
                  122.38853,
                  -1.516858
                ],
                [
                  121.508274,
                  -1.904483
                ],
                [
                  122.454572,
                  -3.186058
                ],
                [
                  122.271896,
                  -3.5295
                ],
                [
                  123.170963,
                  -4.683693
                ],
                [
                  123.162333,
                  -5.340604
                ],
                [
                  122.628515,
                  -5.634591
                ],
                [
                  122.236394,
                  -5.282933
                ],
                [
                  122.719569,
                  -4.464172
                ],
                [
                  121.738234,
                  -4.851331
                ],
                [
                  121.489463,
                  -4.574553
                ],
                [
                  121.619171,
                  -4.188478
                ],
                [
                  120.898182,
                  -3.602105
                ],
                [
                  120.972389,
                  -2.627643
                ],
                [
                  120.305453,
                  -2.931604
                ],
                [
                  120.390047,
                  -4.097579
                ],
                [
                  120.430717,
                  -5.528241
                ],
                [
                  119.796543,
                  -5.6734
                ],
                [
                  119.366906,
                  -5.379878
                ],
                [
                  119.653606,
                  -4.459417
                ],
                [
                  119.498835,
                  -3.494412
                ],
                [
                  119.078344,
                  -3.487022
                ],
                [
                  118.767769,
                  -2.801999
                ],
                [
                  119.180974,
                  -2.147104
                ],
                [
                  119.323394,
                  -1.353147
                ],
                [
                  119.825999,
                  0.154254
                ],
                [
                  120.035702,
                  0.566477
                ],
                [
                  120.885779,
                  1.309223
                ],
                [
                  121.666817,
                  1.013944
                ],
                [
                  122.927567,
                  0.875192
                ],
                [
                  124.077522,
                  0.917102
                ],
                [
                  125.065989,
                  1.643259
                ],
                [
                  125.240501,
                  1.419836
                ]
              ]
            ],
            [
              [
                [
                  128.688249,
                  1.132386
                ],
                [
                  128.635952,
                  0.258486
                ],
                [
                  128.12017,
                  0.356413
                ],
                [
                  127.968034,
                  -0.252077
                ],
                [
                  128.379999,
                  -0.780004
                ],
                [
                  128.100016,
                  -0.899996
                ],
                [
                  127.696475,
                  -0.266598
                ],
                [
                  127.39949,
                  1.011722
                ],
                [
                  127.600512,
                  1.810691
                ],
                [
                  127.932378,
                  2.174596
                ],
                [
                  128.004156,
                  1.628531
                ],
                [
                  128.594559,
                  1.540811
                ],
                [
                  128.688249,
                  1.132386
                ]
              ]
            ],
            [
              [
                [
                  117.875627,
                  1.827641
                ],
                [
                  118.996747,
                  0.902219
                ],
                [
                  117.811858,
                  0.784242
                ],
                [
                  117.478339,
                  0.102475
                ],
                [
                  117.521644,
                  -0.803723
                ],
                [
                  116.560048,
                  -1.487661
                ],
                [
                  116.533797,
                  -2.483517
                ],
                [
                  116.148084,
                  -4.012726
                ],
                [
                  116.000858,
                  -3.657037
                ],
                [
                  114.864803,
                  -4.106984
                ],
                [
                  114.468652,
                  -3.495704
                ],
                [
                  113.755672,
                  -3.43917
                ],
                [
                  113.256994,
                  -3.118776
                ],
                [
                  112.068126,
                  -3.478392
                ],
                [
                  111.703291,
                  -2.994442
                ],
                [
                  111.04824,
                  -3.049426
                ],
                [
                  110.223846,
                  -2.934032
                ],
                [
                  110.070936,
                  -1.592874
                ],
                [
                  109.571948,
                  -1.314907
                ],
                [
                  109.091874,
                  -0.459507
                ],
                [
                  108.952658,
                  0.415375
                ],
                [
                  109.069136,
                  1.341934
                ],
                [
                  109.66326,
                  2.006467
                ],
                [
                  109.830227,
                  1.338136
                ],
                [
                  110.514061,
                  0.773131
                ],
                [
                  111.159138,
                  0.976478
                ],
                [
                  111.797548,
                  0.904441
                ],
                [
                  112.380252,
                  1.410121
                ],
                [
                  112.859809,
                  1.49779
                ],
                [
                  113.80585,
                  1.217549
                ],
                [
                  114.621355,
                  1.430688
                ],
                [
                  115.134037,
                  2.821482
                ],
                [
                  115.519078,
                  3.169238
                ],
                [
                  115.865517,
                  4.306559
                ],
                [
                  117.015214,
                  4.306094
                ],
                [
                  117.882035,
                  4.137551
                ],
                [
                  117.313232,
                  3.234428
                ],
                [
                  118.04833,
                  2.28769
                ],
                [
                  117.875627,
                  1.827641
                ]
              ]
            ],
            [
              [
                [
                  105.817655,
                  -5.852356
                ],
                [
                  104.710384,
                  -5.873285
                ],
                [
                  103.868213,
                  -5.037315
                ],
                [
                  102.584261,
                  -4.220259
                ],
                [
                  102.156173,
                  -3.614146
                ],
                [
                  101.399113,
                  -2.799777
                ],
                [
                  100.902503,
                  -2.050262
                ],
                [
                  100.141981,
                  -0.650348
                ],
                [
                  99.26374,
                  0.183142
                ],
                [
                  98.970011,
                  1.042882
                ],
                [
                  98.601351,
                  1.823507
                ],
                [
                  97.699598,
                  2.453184
                ],
                [
                  97.176942,
                  3.308791
                ],
                [
                  96.424017,
                  3.86886
                ],
                [
                  95.380876,
                  4.970782
                ],
                [
                  95.293026,
                  5.479821
                ],
                [
                  95.936863,
                  5.439513
                ],
                [
                  97.484882,
                  5.246321
                ],
                [
                  98.369169,
                  4.26837
                ],
                [
                  99.142559,
                  3.59035
                ],
                [
                  99.693998,
                  3.174329
                ],
                [
                  100.641434,
                  2.099381
                ],
                [
                  101.658012,
                  2.083697
                ],
                [
                  102.498271,
                  1.3987
                ],
                [
                  103.07684,
                  0.561361
                ],
                [
                  103.838396,
                  0.104542
                ],
                [
                  103.437645,
                  -0.711946
                ],
                [
                  104.010789,
                  -1.059212
                ],
                [
                  104.369991,
                  -1.084843
                ],
                [
                  104.53949,
                  -1.782372
                ],
                [
                  104.887893,
                  -2.340425
                ],
                [
                  105.622111,
                  -2.428844
                ],
                [
                  106.108593,
                  -3.061777
                ],
                [
                  105.857446,
                  -4.305525
                ],
                [
                  105.817655,
                  -5.852356
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],102:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Iran",
    "official": "Islamic Republic of Iran",
    "native": {
      "fas": {
        "official": "جمهوری اسلامی ایران",
        "common": "ایران"
      }
    }
  },
  "tld": [
    ".ir",
    "ایران."
  ],
  "currency": [
    "IRR"
  ],
  "callingCode": [
    "98"
  ],
  "capital": "Tehran",
  "altSpellings": [
    "IR",
    "Islamic Republic of Iran",
    "Iran, Islamic Republic of",
    "Jomhuri-ye Eslāmi-ye Irān"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "fas": "Persian"
  },
  "translations": {
    "deu": {
      "official": "Islamische Republik Iran",
      "common": "Iran"
    },
    "fra": {
      "official": "République islamique d'Iran",
      "common": "Iran"
    },
    "hrv": {
      "official": "Islamska Republika Iran",
      "common": "Iran"
    },
    "jpn": {
      "official": "イラン·イスラム共和国",
      "common": "イラン・イスラム共和国"
    },
    "nld": {
      "official": "Islamitische Republiek Iran",
      "common": "Iran"
    },
    "por": {
      "official": "República Islâmica do Irã",
      "common": "Irão"
    },
    "rus": {
      "official": "Исламская Республика Иран",
      "common": "Иран"
    },
    "spa": {
      "official": "República Islámica de Irán",
      "common": "Iran"
    },
    "fin": {
      "official": "Iranin islamilainen tasavalta",
      "common": "Iran"
    }
  },
  "latlng": [
    32,
    53
  ],
  "demonym": "Iranian",
  "landlocked": false,
  "borders": [
    "AFG",
    "ARM",
    "AZE",
    "IRQ",
    "PAK",
    "TUR",
    "TKM"
  ],
  "area": 1648195,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Iran.svg",
  "codes": {
    "cca2": "IR",
    "ccn3": "364",
    "cca3": "IRN",
    "cioc": "IRI"
  },
  "provinces": [
    "Ardabil",
    "Azarbayjan-e Gharbi",
    "Azarbayjan-e Sharqi",
    "Bushehr",
    "Chahar Mahall va Bakhtiari",
    "Esfahan",
    "Fars",
    "Gilan",
    "Golestan",
    "Hamadan",
    "Hormozgan",
    "Ilam",
    "Kerman",
    "Kermanshah",
    "Khorasan",
    "Khuzestan",
    "Kohgiluyeh va Buyer Ahmad",
    "Kordestan",
    "Lorestan",
    "Markazi",
    "Mazandaran",
    "Qazvin",
    "Qom",
    "Semnan",
    "Sistan va Baluchestan",
    "Tehran",
    "Yazd",
    "Zanjan"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "IRN",
        "properties": {
          "name": "Iran"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.921598,
                37.198918
              ],
              [
                54.800304,
                37.392421
              ],
              [
                55.511578,
                37.964117
              ],
              [
                56.180375,
                37.935127
              ],
              [
                56.619366,
                38.121394
              ],
              [
                57.330434,
                38.029229
              ],
              [
                58.436154,
                37.522309
              ],
              [
                59.234762,
                37.412988
              ],
              [
                60.377638,
                36.527383
              ],
              [
                61.123071,
                36.491597
              ],
              [
                61.210817,
                35.650072
              ],
              [
                60.803193,
                34.404102
              ],
              [
                60.52843,
                33.676446
              ],
              [
                60.9637,
                33.528832
              ],
              [
                60.536078,
                32.981269
              ],
              [
                60.863655,
                32.18292
              ],
              [
                60.941945,
                31.548075
              ],
              [
                61.699314,
                31.379506
              ],
              [
                61.781222,
                30.73585
              ],
              [
                60.874248,
                29.829239
              ],
              [
                61.369309,
                29.303276
              ],
              [
                61.771868,
                28.699334
              ],
              [
                62.72783,
                28.259645
              ],
              [
                62.755426,
                27.378923
              ],
              [
                63.233898,
                27.217047
              ],
              [
                63.316632,
                26.756532
              ],
              [
                61.874187,
                26.239975
              ],
              [
                61.497363,
                25.078237
              ],
              [
                59.616134,
                25.380157
              ],
              [
                58.525761,
                25.609962
              ],
              [
                57.397251,
                25.739902
              ],
              [
                56.970766,
                26.966106
              ],
              [
                56.492139,
                27.143305
              ],
              [
                55.72371,
                26.964633
              ],
              [
                54.71509,
                26.480658
              ],
              [
                53.493097,
                26.812369
              ],
              [
                52.483598,
                27.580849
              ],
              [
                51.520763,
                27.86569
              ],
              [
                50.852948,
                28.814521
              ],
              [
                50.115009,
                30.147773
              ],
              [
                49.57685,
                29.985715
              ],
              [
                48.941333,
                30.31709
              ],
              [
                48.567971,
                29.926778
              ],
              [
                48.014568,
                30.452457
              ],
              [
                48.004698,
                30.985137
              ],
              [
                47.685286,
                30.984853
              ],
              [
                47.849204,
                31.709176
              ],
              [
                47.334661,
                32.469155
              ],
              [
                46.109362,
                33.017287
              ],
              [
                45.416691,
                33.967798
              ],
              [
                45.64846,
                34.748138
              ],
              [
                46.151788,
                35.093259
              ],
              [
                46.07634,
                35.677383
              ],
              [
                45.420618,
                35.977546
              ],
              [
                44.77267,
                37.17045
              ],
              [
                44.225756,
                37.971584
              ],
              [
                44.421403,
                38.281281
              ],
              [
                44.109225,
                39.428136
              ],
              [
                44.79399,
                39.713003
              ],
              [
                44.952688,
                39.335765
              ],
              [
                45.457722,
                38.874139
              ],
              [
                46.143623,
                38.741201
              ],
              [
                46.50572,
                38.770605
              ],
              [
                47.685079,
                39.508364
              ],
              [
                48.060095,
                39.582235
              ],
              [
                48.355529,
                39.288765
              ],
              [
                48.010744,
                38.794015
              ],
              [
                48.634375,
                38.270378
              ],
              [
                48.883249,
                38.320245
              ],
              [
                49.199612,
                37.582874
              ],
              [
                50.147771,
                37.374567
              ],
              [
                50.842354,
                36.872814
              ],
              [
                52.264025,
                36.700422
              ],
              [
                53.82579,
                36.965031
              ],
              [
                53.921598,
                37.198918
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],103:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Iraq",
    "official": "Republic of Iraq",
    "native": {
      "ara": {
        "official": "جمهورية العراق",
        "common": "العراق"
      },
      "arc": {
        "official": "ܩܘܼܛܢܵܐ ܐܝܼܪܲܩ",
        "common": "ܩܘܼܛܢܵܐ"
      },
      "ckb": {
        "official": "کۆماری عێراق",
        "common": "کۆماری"
      }
    }
  },
  "tld": [
    ".iq"
  ],
  "currency": [
    "IQD"
  ],
  "callingCode": [
    "964"
  ],
  "capital": "Baghdad",
  "altSpellings": [
    "IQ",
    "Republic of Iraq",
    "Jumhūriyyat al-‘Irāq"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic",
    "arc": "Aramaic",
    "ckb": "Sorani"
  },
  "translations": {
    "deu": {
      "official": "Republik Irak",
      "common": "Irak"
    },
    "fra": {
      "official": "République d'Irak",
      "common": "Irak"
    },
    "hrv": {
      "official": "Republika Irak",
      "common": "Irak"
    },
    "ita": {
      "official": "Repubblica dell'Iraq",
      "common": "Iraq"
    },
    "jpn": {
      "official": "イラク共和国",
      "common": "イラク"
    },
    "nld": {
      "official": "Republiek Irak",
      "common": "Irak"
    },
    "por": {
      "official": "República do Iraque",
      "common": "Iraque"
    },
    "rus": {
      "official": "Республика Ирак",
      "common": "Ирак"
    },
    "spa": {
      "official": "República de Irak",
      "common": "Irak"
    },
    "fin": {
      "official": "Irakin tasavalta",
      "common": "Irak"
    }
  },
  "latlng": [
    33,
    44
  ],
  "demonym": "Iraqi",
  "landlocked": false,
  "borders": [
    "IRN",
    "JOR",
    "KWT",
    "SAU",
    "SYR",
    "TUR"
  ],
  "area": 438317,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Iraq.svg",
  "codes": {
    "cca2": "IQ",
    "ccn3": "368",
    "cca3": "IRQ",
    "cioc": "IRQ"
  },
  "provinces": [
    "Al Anbar",
    "Al Basrah",
    "Al Muthanna",
    "Al Qadisiyah",
    "An Najaf",
    "Arbil",
    "As Sulaymaniyah",
    "At Ta'mim",
    "Babil",
    "Baghdad",
    "Dahuk",
    "Dhi Qar",
    "Diyala",
    "Karbala'",
    "Maysan",
    "Ninawa",
    "Salah ad Din",
    "Wasit"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "IRQ",
        "properties": {
          "name": "Iraq"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                45.420618,
                35.977546
              ],
              [
                46.07634,
                35.677383
              ],
              [
                46.151788,
                35.093259
              ],
              [
                45.64846,
                34.748138
              ],
              [
                45.416691,
                33.967798
              ],
              [
                46.109362,
                33.017287
              ],
              [
                47.334661,
                32.469155
              ],
              [
                47.849204,
                31.709176
              ],
              [
                47.685286,
                30.984853
              ],
              [
                48.004698,
                30.985137
              ],
              [
                48.014568,
                30.452457
              ],
              [
                48.567971,
                29.926778
              ],
              [
                47.974519,
                29.975819
              ],
              [
                47.302622,
                30.05907
              ],
              [
                46.568713,
                29.099025
              ],
              [
                44.709499,
                29.178891
              ],
              [
                41.889981,
                31.190009
              ],
              [
                40.399994,
                31.889992
              ],
              [
                39.195468,
                32.161009
              ],
              [
                38.792341,
                33.378686
              ],
              [
                41.006159,
                34.419372
              ],
              [
                41.383965,
                35.628317
              ],
              [
                41.289707,
                36.358815
              ],
              [
                41.837064,
                36.605854
              ],
              [
                42.349591,
                37.229873
              ],
              [
                42.779126,
                37.385264
              ],
              [
                43.942259,
                37.256228
              ],
              [
                44.293452,
                37.001514
              ],
              [
                44.772699,
                37.170445
              ],
              [
                45.420618,
                35.977546
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],104:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ireland",
    "official": "Republic of Ireland",
    "native": {
      "eng": {
        "official": "Republic of Ireland",
        "common": "Ireland"
      },
      "gle": {
        "official": "Poblacht na hÉireann",
        "common": "Éire"
      }
    }
  },
  "tld": [
    ".ie"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "353"
  ],
  "capital": "Dublin",
  "altSpellings": [
    "IE",
    "Éire",
    "Republic of Ireland",
    "Poblacht na hÉireann"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "eng": "English",
    "gle": "Irish"
  },
  "translations": {
    "deu": {
      "official": "Republik Irland",
      "common": "Irland"
    },
    "fra": {
      "official": "République d'Irlande",
      "common": "Irlande"
    },
    "hrv": {
      "official": "Republika Irska",
      "common": "Irska"
    },
    "ita": {
      "official": "Repubblica d'Irlanda",
      "common": "Irlanda"
    },
    "jpn": {
      "official": "アイルランド共和国",
      "common": "アイルランド"
    },
    "nld": {
      "official": "Republic of Ireland",
      "common": "Ierland"
    },
    "por": {
      "official": "República da Irlanda",
      "common": "Irlanda"
    },
    "rus": {
      "official": "Ирландия",
      "common": "Ирландия"
    },
    "spa": {
      "official": "República de Irlanda",
      "common": "Irlanda"
    },
    "fin": {
      "official": "Irlannin tasavalta",
      "common": "Irlanti"
    }
  },
  "latlng": [
    53,
    -8
  ],
  "demonym": "Irish",
  "landlocked": false,
  "borders": [
    "GBR"
  ],
  "area": 70273,
  "codes": {
    "cca2": "IE",
    "ccn3": "372",
    "cca3": "IRL",
    "cioc": "IRL"
  },
  "provinces": [
    "Carlow",
    "Cavan",
    "Clare",
    "Cork",
    "Donegal",
    "Dublin",
    "Galway",
    "Kerry",
    "Kildare",
    "Kilkenny",
    "Laois",
    "Leitrim",
    "Limerick",
    "Longford",
    "Louth",
    "Mayo",
    "Meath",
    "Monaghan",
    "Offaly",
    "Roscommon",
    "Sligo",
    "Tipperary",
    "Waterford",
    "Westmeath",
    "Wexford",
    "Wicklow"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "IRL",
        "properties": {
          "name": "Ireland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -6.197885,
                53.867565
              ],
              [
                -6.032985,
                53.153164
              ],
              [
                -6.788857,
                52.260118
              ],
              [
                -8.561617,
                51.669301
              ],
              [
                -9.977086,
                51.820455
              ],
              [
                -9.166283,
                52.864629
              ],
              [
                -9.688525,
                53.881363
              ],
              [
                -8.327987,
                54.664519
              ],
              [
                -7.572168,
                55.131622
              ],
              [
                -7.366031,
                54.595841
              ],
              [
                -7.572168,
                54.059956
              ],
              [
                -6.95373,
                54.073702
              ],
              [
                -6.197885,
                53.867565
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],105:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Isle of Man",
    "official": "Isle of Man",
    "native": {
      "eng": {
        "official": "Isle of Man",
        "common": "Isle of Man"
      },
      "glv": {
        "official": "Ellan Vannin or Mannin",
        "common": "Mannin"
      }
    }
  },
  "tld": [
    ".im"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "capital": "Douglas",
  "altSpellings": [
    "IM",
    "Ellan Vannin",
    "Mann",
    "Mannin"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "eng": "English",
    "glv": "Manx"
  },
  "translations": {
    "deu": {
      "official": "Isle of Man",
      "common": "Insel Man"
    },
    "fra": {
      "official": "Isle of Man",
      "common": "Île de Man"
    },
    "hrv": {
      "official": "Mana ostrvo",
      "common": "Otok Man"
    },
    "ita": {
      "official": "Isola di Man",
      "common": "Isola di Man"
    },
    "jpn": {
      "official": "マン島",
      "common": "マン島"
    },
    "nld": {
      "official": "Isle of Man",
      "common": "Isle of Man"
    },
    "por": {
      "official": "Isle of Man",
      "common": "Ilha de Man"
    },
    "rus": {
      "official": "Остров Мэн",
      "common": "Остров Мэн"
    },
    "spa": {
      "official": "Isla de Man",
      "common": "Isla de Man"
    },
    "fin": {
      "official": "Mansaari",
      "common": "Mansaari"
    }
  },
  "latlng": [
    54.25,
    -4.5
  ],
  "demonym": "Manx",
  "landlocked": false,
  "borders": [],
  "area": 572,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Isle of Mann.svg",
  "codes": {
    "cca2": "IM",
    "ccn3": "833",
    "cca3": "IMN",
    "cioc": ""
  }
}
},{}],106:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Israel",
    "official": "State of Israel",
    "native": {
      "ara": {
        "official": "دولة إسرائيل",
        "common": "إسرائيل"
      },
      "heb": {
        "official": "מדינת ישראל",
        "common": "ישראל"
      }
    }
  },
  "tld": [
    ".il"
  ],
  "currency": [
    "ILS"
  ],
  "callingCode": [
    "972"
  ],
  "capital": "Jerusalem",
  "altSpellings": [
    "IL",
    "State of Israel",
    "Medīnat Yisrā'el"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic",
    "heb": "Hebrew"
  },
  "translations": {
    "deu": {
      "official": "Staat Israel",
      "common": "Israel"
    },
    "fra": {
      "official": "État d'Israël",
      "common": "Israël"
    },
    "hrv": {
      "official": "Država Izrael",
      "common": "Izrael"
    },
    "ita": {
      "official": "Stato di Israele",
      "common": "Israele"
    },
    "jpn": {
      "official": "イスラエル国",
      "common": "イスラエル"
    },
    "nld": {
      "official": "Staat Israël",
      "common": "Israël"
    },
    "por": {
      "official": "Estado de Israel",
      "common": "Israel"
    },
    "rus": {
      "official": "Государство Израиль",
      "common": "Израиль"
    },
    "spa": {
      "official": "Estado de Israel",
      "common": "Israel"
    },
    "fin": {
      "official": "Israelin valtio",
      "common": "Israel"
    }
  },
  "latlng": [
    31.47,
    35.13
  ],
  "demonym": "Israeli",
  "landlocked": false,
  "borders": [
    "EGY",
    "JOR",
    "LBN",
    "SYR"
  ],
  "area": 20770,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Israel.svg",
  "codes": {
    "cca2": "IL",
    "ccn3": "376",
    "cca3": "ISR",
    "cioc": "ISR"
  },
  "provinces": [
    "Central",
    "Haifa",
    "Jerusalem",
    "Northern",
    "Southern",
    "Tel Aviv"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ISR",
        "properties": {
          "name": "Israel"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                35.719918,
                32.709192
              ],
              [
                35.545665,
                32.393992
              ],
              [
                35.18393,
                32.532511
              ],
              [
                34.974641,
                31.866582
              ],
              [
                35.225892,
                31.754341
              ],
              [
                34.970507,
                31.616778
              ],
              [
                34.927408,
                31.353435
              ],
              [
                35.397561,
                31.489086
              ],
              [
                35.420918,
                31.100066
              ],
              [
                34.922603,
                29.501326
              ],
              [
                34.265433,
                31.219361
              ],
              [
                34.556372,
                31.548824
              ],
              [
                34.488107,
                31.605539
              ],
              [
                34.752587,
                32.072926
              ],
              [
                34.955417,
                32.827376
              ],
              [
                35.098457,
                33.080539
              ],
              [
                35.126053,
                33.0909
              ],
              [
                35.460709,
                33.08904
              ],
              [
                35.552797,
                33.264275
              ],
              [
                35.821101,
                33.277426
              ],
              [
                35.836397,
                32.868123
              ],
              [
                35.700798,
                32.716014
              ],
              [
                35.719918,
                32.709192
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],107:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Italy",
    "official": "Italian Republic",
    "native": {
      "bar": {
        "official": "Italienische Republik",
        "common": "Italien"
      },
      "ita": {
        "official": "Repubblica italiana",
        "common": "Italia"
      },
      "srd": {
        "official": "Repubbricanu Italia",
        "common": "Italia"
      }
    }
  },
  "tld": [
    ".it"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "39"
  ],
  "capital": "Rome",
  "altSpellings": [
    "IT",
    "Italian Republic",
    "Repubblica italiana"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "bar": "Austro-Bavarian German",
    "ita": "Italian",
    "srd": "Sardinian"
  },
  "translations": {
    "deu": {
      "official": "Italienische Republik",
      "common": "Italien"
    },
    "fra": {
      "official": "République italienne",
      "common": "Italie"
    },
    "hrv": {
      "official": "talijanska Republika",
      "common": "Italija"
    },
    "ita": {
      "official": "Repubblica italiana",
      "common": "Italia"
    },
    "jpn": {
      "official": "イタリア共和国",
      "common": "イタリア"
    },
    "nld": {
      "official": "Italiaanse Republiek",
      "common": "Italië"
    },
    "por": {
      "official": "República Italiana",
      "common": "Itália"
    },
    "rus": {
      "official": "итальянская Республика",
      "common": "Италия"
    },
    "spa": {
      "official": "República Italiana",
      "common": "Italia"
    },
    "fin": {
      "official": "Italian tasavalta",
      "common": "Italia"
    }
  },
  "latlng": [
    42.83333333,
    12.83333333
  ],
  "demonym": "Italian",
  "landlocked": false,
  "borders": [
    "AUT",
    "FRA",
    "SMR",
    "SVN",
    "CHE",
    "VAT"
  ],
  "area": 301336,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Italy.svg",
  "codes": {
    "cca2": "IT",
    "ccn3": "380",
    "cca3": "ITA",
    "cioc": "ITA"
  },
  "provinces": [
    "Abruzzo",
    "Basilicata",
    "Calabria",
    "Campania",
    "Emilia-Romagna",
    "Friuli-Venezia Giulia",
    "Lazio",
    "Liguria",
    "Lombardia",
    "Marche",
    "Molise",
    "Piemonte",
    "Puglia",
    "Sardegna",
    "Sicilia",
    "Toscana",
    "Trentino-Alto Adige",
    "Umbria",
    "Valle d'Aosta",
    "Veneto"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ITA",
        "properties": {
          "name": "Italy"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  15.520376,
                  38.231155
                ],
                [
                  15.160243,
                  37.444046
                ],
                [
                  15.309898,
                  37.134219
                ],
                [
                  15.099988,
                  36.619987
                ],
                [
                  14.335229,
                  36.996631
                ],
                [
                  13.826733,
                  37.104531
                ],
                [
                  12.431004,
                  37.61295
                ],
                [
                  12.570944,
                  38.126381
                ],
                [
                  13.741156,
                  38.034966
                ],
                [
                  14.761249,
                  38.143874
                ],
                [
                  15.520376,
                  38.231155
                ]
              ]
            ],
            [
              [
                [
                  9.210012,
                  41.209991
                ],
                [
                  9.809975,
                  40.500009
                ],
                [
                  9.669519,
                  39.177376
                ],
                [
                  9.214818,
                  39.240473
                ],
                [
                  8.806936,
                  38.906618
                ],
                [
                  8.428302,
                  39.171847
                ],
                [
                  8.388253,
                  40.378311
                ],
                [
                  8.159998,
                  40.950007
                ],
                [
                  8.709991,
                  40.899984
                ],
                [
                  9.210012,
                  41.209991
                ]
              ]
            ],
            [
              [
                [
                  12.376485,
                  46.767559
                ],
                [
                  13.806475,
                  46.509306
                ],
                [
                  13.69811,
                  46.016778
                ],
                [
                  13.93763,
                  45.591016
                ],
                [
                  13.141606,
                  45.736692
                ],
                [
                  12.328581,
                  45.381778
                ],
                [
                  12.383875,
                  44.885374
                ],
                [
                  12.261453,
                  44.600482
                ],
                [
                  12.589237,
                  44.091366
                ],
                [
                  13.526906,
                  43.587727
                ],
                [
                  14.029821,
                  42.761008
                ],
                [
                  15.14257,
                  41.95514
                ],
                [
                  15.926191,
                  41.961315
                ],
                [
                  16.169897,
                  41.740295
                ],
                [
                  15.889346,
                  41.541082
                ],
                [
                  16.785002,
                  41.179606
                ],
                [
                  17.519169,
                  40.877143
                ],
                [
                  18.376687,
                  40.355625
                ],
                [
                  18.480247,
                  40.168866
                ],
                [
                  18.293385,
                  39.810774
                ],
                [
                  17.73838,
                  40.277671
                ],
                [
                  16.869596,
                  40.442235
                ],
                [
                  16.448743,
                  39.795401
                ],
                [
                  17.17149,
                  39.4247
                ],
                [
                  17.052841,
                  38.902871
                ],
                [
                  16.635088,
                  38.843572
                ],
                [
                  16.100961,
                  37.985899
                ],
                [
                  15.684087,
                  37.908849
                ],
                [
                  15.687963,
                  38.214593
                ],
                [
                  15.891981,
                  38.750942
                ],
                [
                  16.109332,
                  38.964547
                ],
                [
                  15.718814,
                  39.544072
                ],
                [
                  15.413613,
                  40.048357
                ],
                [
                  14.998496,
                  40.172949
                ],
                [
                  14.703268,
                  40.60455
                ],
                [
                  14.060672,
                  40.786348
                ],
                [
                  13.627985,
                  41.188287
                ],
                [
                  12.888082,
                  41.25309
                ],
                [
                  12.106683,
                  41.704535
                ],
                [
                  11.191906,
                  42.355425
                ],
                [
                  10.511948,
                  42.931463
                ],
                [
                  10.200029,
                  43.920007
                ],
                [
                  9.702488,
                  44.036279
                ],
                [
                  8.888946,
                  44.366336
                ],
                [
                  8.428561,
                  44.231228
                ],
                [
                  7.850767,
                  43.767148
                ],
                [
                  7.435185,
                  43.693845
                ],
                [
                  7.549596,
                  44.127901
                ],
                [
                  7.007562,
                  44.254767
                ],
                [
                  6.749955,
                  45.028518
                ],
                [
                  7.096652,
                  45.333099
                ],
                [
                  6.802355,
                  45.70858
                ],
                [
                  6.843593,
                  45.991147
                ],
                [
                  7.273851,
                  45.776948
                ],
                [
                  7.755992,
                  45.82449
                ],
                [
                  8.31663,
                  46.163642
                ],
                [
                  8.489952,
                  46.005151
                ],
                [
                  8.966306,
                  46.036932
                ],
                [
                  9.182882,
                  46.440215
                ],
                [
                  9.922837,
                  46.314899
                ],
                [
                  10.363378,
                  46.483571
                ],
                [
                  10.442701,
                  46.893546
                ],
                [
                  11.048556,
                  46.751359
                ],
                [
                  11.164828,
                  46.941579
                ],
                [
                  12.153088,
                  47.115393
                ],
                [
                  12.376485,
                  46.767559
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],108:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ivory Coast",
    "official": "Republic of Côte d'Ivoire",
    "native": {
      "fra": {
        "official": "République de Côte d'Ivoire",
        "common": "Côte d'Ivoire"
      }
    }
  },
  "tld": [
    ".ci"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "225"
  ],
  "capital": "Yamoussoukro",
  "altSpellings": [
    "CI",
    "Côte d'Ivoire",
    "Ivory Coast",
    "Republic of Côte d'Ivoire",
    "République de Côte d'Ivoire"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Côte d'Ivoire",
      "common": "Elfenbeinküste"
    },
    "fra": {
      "official": "République de Côte d' Ivoire",
      "common": "Côte d'Ivoire"
    },
    "hrv": {
      "official": "Republika Côte d'Ivoire",
      "common": "Obala Bjelokosti"
    },
    "ita": {
      "official": "Repubblica della Costa d'Avorio",
      "common": "Costa d'Avorio"
    },
    "jpn": {
      "official": "コートジボワール共和国",
      "common": "コートジボワール"
    },
    "nld": {
      "official": "Republiek Ivoorkust",
      "common": "Ivoorkust"
    },
    "por": {
      "official": "República da Côte d'Ivoire",
      "common": "Costa do Marfim"
    },
    "rus": {
      "official": "Республика Кот-д'Ивуаре",
      "common": "Кот-д’Ивуар"
    },
    "spa": {
      "official": "República de Côte d'Ivoire",
      "common": "Costa de Marfil"
    },
    "fin": {
      "official": "Norsunluurannikon tasavalta",
      "common": "Norsunluurannikko"
    }
  },
  "latlng": [
    8,
    -5
  ],
  "demonym": "Ivorian",
  "landlocked": false,
  "borders": [
    "BFA",
    "GHA",
    "GIN",
    "LBR",
    "MLI"
  ],
  "area": 322463,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Côte d'Ivoire.svg",
  "codes": {
    "cca2": "CI",
    "ccn3": "384",
    "cca3": "CIV",
    "cioc": "CIV"
  }
}
},{}],109:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Jamaica",
    "official": "Jamaica",
    "native": {
      "eng": {
        "official": "Jamaica",
        "common": "Jamaica"
      },
      "jam": {
        "official": "Jamaica",
        "common": "Jamaica"
      }
    }
  },
  "tld": [
    ".jm"
  ],
  "currency": [
    "JMD"
  ],
  "callingCode": [
    "1876"
  ],
  "capital": "Kingston",
  "altSpellings": [
    "JM"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English",
    "jam": "Jamaican Patois"
  },
  "translations": {
    "deu": {
      "official": "Jamaika",
      "common": "Jamaika"
    },
    "fra": {
      "official": "Jamaïque",
      "common": "Jamaïque"
    },
    "hrv": {
      "official": "Jamajka",
      "common": "Jamajka"
    },
    "ita": {
      "official": "Giamaica",
      "common": "Giamaica"
    },
    "jpn": {
      "official": "ジャマイカ",
      "common": "ジャマイカ"
    },
    "nld": {
      "official": "Jamaica",
      "common": "Jamaica"
    },
    "por": {
      "official": "Jamaica",
      "common": "Jamaica"
    },
    "rus": {
      "official": "Ямайка",
      "common": "Ямайка"
    },
    "spa": {
      "official": "Jamaica",
      "common": "Jamaica"
    },
    "fin": {
      "official": "Jamaika",
      "common": "Jamaika"
    }
  },
  "latlng": [
    18.25,
    -77.5
  ],
  "demonym": "Jamaican",
  "landlocked": false,
  "borders": [],
  "area": 10991,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Jamaica.svg",
  "codes": {
    "cca2": "JM",
    "ccn3": "388",
    "cca3": "JAM",
    "cioc": "JAM"
  },
  "provinces": [
    "Clarendon",
    "Hanover",
    "Kingston",
    "Manchester",
    "Portland",
    "Saint Andrew",
    "Saint Ann",
    "Saint Catherine",
    "Saint Elizabeth",
    "Saint James",
    "Saint Mary",
    "Saint Thomas",
    "Trelawny",
    "Westmoreland"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "JAM",
        "properties": {
          "name": "Jamaica"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -77.569601,
                18.490525
              ],
              [
                -76.896619,
                18.400867
              ],
              [
                -76.365359,
                18.160701
              ],
              [
                -76.199659,
                17.886867
              ],
              [
                -76.902561,
                17.868238
              ],
              [
                -77.206341,
                17.701116
              ],
              [
                -77.766023,
                17.861597
              ],
              [
                -78.337719,
                18.225968
              ],
              [
                -78.217727,
                18.454533
              ],
              [
                -77.797365,
                18.524218
              ],
              [
                -77.569601,
                18.490525
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],110:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Japan",
    "official": "Japan",
    "native": {
      "jpn": {
        "official": "日本",
        "common": "日本"
      }
    }
  },
  "tld": [
    ".jp",
    ".みんな"
  ],
  "currency": [
    "JPY"
  ],
  "callingCode": [
    "81"
  ],
  "capital": "Tokyo",
  "altSpellings": [
    "JP",
    "Nippon",
    "Nihon"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "jpn": "Japanese"
  },
  "translations": {
    "deu": {
      "official": "Japan",
      "common": "Japan"
    },
    "fra": {
      "official": "Japon",
      "common": "Japon"
    },
    "hrv": {
      "official": "Japan",
      "common": "Japan"
    },
    "ita": {
      "official": "Giappone",
      "common": "Giappone"
    },
    "jpn": {
      "official": "日本",
      "common": "日本"
    },
    "nld": {
      "official": "Japan",
      "common": "Japan"
    },
    "por": {
      "official": "Japão",
      "common": "Japão"
    },
    "rus": {
      "official": "Япония",
      "common": "Япония"
    },
    "spa": {
      "official": "Japón",
      "common": "Japón"
    },
    "fin": {
      "official": "Japani",
      "common": "Japani"
    }
  },
  "latlng": [
    36,
    138
  ],
  "demonym": "Japanese",
  "landlocked": false,
  "borders": [],
  "area": 377930,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Japan.svg",
  "codes": {
    "cca2": "JP",
    "ccn3": "392",
    "cca3": "JPN",
    "cioc": "JPN"
  },
  "provinces": [
    "Aichi",
    "Akita",
    "Aomori",
    "Chiba",
    "Ehime",
    "Fukui",
    "Fukuoka",
    "Fukushima",
    "Gifu",
    "Gumma",
    "Hiroshima",
    "Hokkaido",
    "Hyogo",
    "Ibaraki",
    "Ishikawa",
    "Iwate",
    "Kagawa",
    "Kagoshima",
    "Kanagawa",
    "Kochi",
    "Kumamoto",
    "Kyoto",
    "Mie",
    "Miyagi",
    "Miyazaki",
    "Nagano",
    "Nagasaki",
    "Nara",
    "Niigata",
    "Oita",
    "Okayama",
    "Okinawa",
    "Osaka",
    "Saga",
    "Saitama",
    "Shiga",
    "Shimane",
    "Shizuoka",
    "Tochigi",
    "Tokushima",
    "Tokyo",
    "Tottori",
    "Toyama",
    "Wakayama",
    "Yamagata",
    "Yamaguchi",
    "Yamanashi"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "JPN",
        "properties": {
          "name": "Japan"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  134.638428,
                  34.149234
                ],
                [
                  134.766379,
                  33.806335
                ],
                [
                  134.203416,
                  33.201178
                ],
                [
                  133.79295,
                  33.521985
                ],
                [
                  133.280268,
                  33.28957
                ],
                [
                  133.014858,
                  32.704567
                ],
                [
                  132.363115,
                  32.989382
                ],
                [
                  132.371176,
                  33.463642
                ],
                [
                  132.924373,
                  34.060299
                ],
                [
                  133.492968,
                  33.944621
                ],
                [
                  133.904106,
                  34.364931
                ],
                [
                  134.638428,
                  34.149234
                ]
              ]
            ],
            [
              [
                [
                  140.976388,
                  37.142074
                ],
                [
                  140.59977,
                  36.343983
                ],
                [
                  140.774074,
                  35.842877
                ],
                [
                  140.253279,
                  35.138114
                ],
                [
                  138.975528,
                  34.6676
                ],
                [
                  137.217599,
                  34.606286
                ],
                [
                  135.792983,
                  33.464805
                ],
                [
                  135.120983,
                  33.849071
                ],
                [
                  135.079435,
                  34.596545
                ],
                [
                  133.340316,
                  34.375938
                ],
                [
                  132.156771,
                  33.904933
                ],
                [
                  130.986145,
                  33.885761
                ],
                [
                  132.000036,
                  33.149992
                ],
                [
                  131.33279,
                  31.450355
                ],
                [
                  130.686318,
                  31.029579
                ],
                [
                  130.20242,
                  31.418238
                ],
                [
                  130.447676,
                  32.319475
                ],
                [
                  129.814692,
                  32.61031
                ],
                [
                  129.408463,
                  33.296056
                ],
                [
                  130.353935,
                  33.604151
                ],
                [
                  130.878451,
                  34.232743
                ],
                [
                  131.884229,
                  34.749714
                ],
                [
                  132.617673,
                  35.433393
                ],
                [
                  134.608301,
                  35.731618
                ],
                [
                  135.677538,
                  35.527134
                ],
                [
                  136.723831,
                  37.304984
                ],
                [
                  137.390612,
                  36.827391
                ],
                [
                  138.857602,
                  37.827485
                ],
                [
                  139.426405,
                  38.215962
                ],
                [
                  140.05479,
                  39.438807
                ],
                [
                  139.883379,
                  40.563312
                ],
                [
                  140.305783,
                  41.195005
                ],
                [
                  141.368973,
                  41.37856
                ],
                [
                  141.914263,
                  39.991616
                ],
                [
                  141.884601,
                  39.180865
                ],
                [
                  140.959489,
                  38.174001
                ],
                [
                  140.976388,
                  37.142074
                ]
              ]
            ],
            [
              [
                [
                  143.910162,
                  44.1741
                ],
                [
                  144.613427,
                  43.960883
                ],
                [
                  145.320825,
                  44.384733
                ],
                [
                  145.543137,
                  43.262088
                ],
                [
                  144.059662,
                  42.988358
                ],
                [
                  143.18385,
                  41.995215
                ],
                [
                  141.611491,
                  42.678791
                ],
                [
                  141.067286,
                  41.584594
                ],
                [
                  139.955106,
                  41.569556
                ],
                [
                  139.817544,
                  42.563759
                ],
                [
                  140.312087,
                  43.333273
                ],
                [
                  141.380549,
                  43.388825
                ],
                [
                  141.671952,
                  44.772125
                ],
                [
                  141.967645,
                  45.551483
                ],
                [
                  143.14287,
                  44.510358
                ],
                [
                  143.910162,
                  44.1741
                ]
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],111:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Jersey",
    "official": "Bailiwick of Jersey",
    "native": {
      "eng": {
        "official": "Bailiwick of Jersey",
        "common": "Jersey"
      },
      "fra": {
        "official": "Bailliage de Jersey",
        "common": "Jersey"
      },
      "nrf": {
        "official": "Bailliage dé Jèrri",
        "common": "Jèrri"
      }
    }
  },
  "tld": [
    ".je"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "capital": "Saint Helier",
  "altSpellings": [
    "JE",
    "Bailiwick of Jersey",
    "Bailliage de Jersey",
    "Bailliage dé Jèrri"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "eng": "English",
    "fra": "French",
    "nrf": "Jèrriais"
  },
  "translations": {
    "deu": {
      "official": "Vogtei Jersey",
      "common": "Jersey"
    },
    "fra": {
      "official": "Bailliage de Jersey",
      "common": "Jersey"
    },
    "hrv": {
      "official": "Struka od Jersey",
      "common": "Jersey"
    },
    "ita": {
      "official": "Baliato di Jersey",
      "common": "Isola di Jersey"
    },
    "jpn": {
      "official": "ジャージの得意分野",
      "common": "ジャージー"
    },
    "nld": {
      "official": "Baljuwschap Jersey",
      "common": "Jersey"
    },
    "por": {
      "official": "Bailiado de Jersey",
      "common": "Jersey"
    },
    "rus": {
      "official": "Коронное владение Джерси",
      "common": "Джерси"
    },
    "spa": {
      "official": "Bailía de Jersey",
      "common": "Jersey"
    },
    "fin": {
      "official": "Jersey",
      "common": "Jersey"
    }
  },
  "latlng": [
    49.25,
    -2.16666666
  ],
  "demonym": "Channel Islander",
  "landlocked": false,
  "borders": [],
  "area": 116,
  "codes": {
    "cca2": "JE",
    "ccn3": "832",
    "cca3": "JEY",
    "cioc": ""
  },
  "provinces": [
    "Jersey"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],112:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Jordan",
    "official": "Hashemite Kingdom of Jordan",
    "native": {
      "ara": {
        "official": "المملكة الأردنية الهاشمية",
        "common": "الأردن"
      }
    }
  },
  "tld": [
    ".jo",
    "الاردن."
  ],
  "currency": [
    "JOD"
  ],
  "callingCode": [
    "962"
  ],
  "capital": "Amman",
  "altSpellings": [
    "JO",
    "Hashemite Kingdom of Jordan",
    "al-Mamlakah al-Urdunīyah al-Hāshimīyah"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Haschemitisches Königreich Jordanien",
      "common": "Jordanien"
    },
    "fra": {
      "official": "Royaume hachémite de Jordanie",
      "common": "Jordanie"
    },
    "hrv": {
      "official": "Hašemitske Kraljevine Jordan",
      "common": "Jordan"
    },
    "ita": {
      "official": "Regno hascemita di Giordania",
      "common": "Giordania"
    },
    "jpn": {
      "official": "ヨルダン·ハシミテ王国",
      "common": "ヨルダン"
    },
    "nld": {
      "official": "Hasjemitisch Koninkrijk Jordanië",
      "common": "Jordanië"
    },
    "por": {
      "official": "Reino Hachemita da Jordânia",
      "common": "Jordânia"
    },
    "rus": {
      "official": "Иорданского Хашимитского Королевства",
      "common": "Иордания"
    },
    "spa": {
      "official": "Reino Hachemita de Jordania",
      "common": "Jordania"
    },
    "fin": {
      "official": "Jordanian hašemiittinen kunigaskunta",
      "common": "Jordania"
    }
  },
  "latlng": [
    31,
    36
  ],
  "demonym": "Jordanian",
  "landlocked": false,
  "borders": [
    "IRQ",
    "ISR",
    "SAU",
    "SYR"
  ],
  "area": 89342,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Jordan.svg",
  "codes": {
    "cca2": "JO",
    "ccn3": "400",
    "cca3": "JOR",
    "cioc": "JOR"
  },
  "provinces": [
    "'Amman",
    "Ajlun",
    "Al 'Aqabah",
    "Al Balqa'",
    "Al Karak",
    "Al Mafraq",
    "At Tafilah",
    "Az Zarqa'",
    "Irbid",
    "Jarash",
    "Ma'an",
    "Madaba"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "JOR",
        "properties": {
          "name": "Jordan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                35.545665,
                32.393992
              ],
              [
                35.719918,
                32.709192
              ],
              [
                36.834062,
                32.312938
              ],
              [
                38.792341,
                33.378686
              ],
              [
                39.195468,
                32.161009
              ],
              [
                39.004886,
                32.010217
              ],
              [
                37.002166,
                31.508413
              ],
              [
                37.998849,
                30.5085
              ],
              [
                37.66812,
                30.338665
              ],
              [
                37.503582,
                30.003776
              ],
              [
                36.740528,
                29.865283
              ],
              [
                36.501214,
                29.505254
              ],
              [
                36.068941,
                29.197495
              ],
              [
                34.956037,
                29.356555
              ],
              [
                34.922603,
                29.501326
              ],
              [
                35.420918,
                31.100066
              ],
              [
                35.397561,
                31.489086
              ],
              [
                35.545252,
                31.782505
              ],
              [
                35.545665,
                32.393992
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],113:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kazakhstan",
    "official": "Republic of Kazakhstan",
    "native": {
      "kaz": {
        "official": "Қазақстан Республикасы",
        "common": "Қазақстан"
      },
      "rus": {
        "official": "Республика Казахстан",
        "common": "Казахстан"
      }
    }
  },
  "tld": [
    ".kz",
    ".қаз"
  ],
  "currency": [
    "KZT"
  ],
  "callingCode": [
    "76",
    "77"
  ],
  "capital": "Astana",
  "altSpellings": [
    "KZ",
    "Qazaqstan",
    "Казахстан",
    "Republic of Kazakhstan",
    "Қазақстан Республикасы",
    "Qazaqstan Respublïkası",
    "Республика Казахстан",
    "Respublika Kazakhstan"
  ],
  "region": "Asia",
  "subregion": "Central Asia",
  "languages": {
    "kaz": "Kazakh",
    "rus": "Russian"
  },
  "translations": {
    "deu": {
      "official": "Republik Kasachstan",
      "common": "Kasachstan"
    },
    "fra": {
      "official": "République du Kazakhstan",
      "common": "Kazakhstan"
    },
    "hrv": {
      "official": "Republika Kazahstan",
      "common": "Kazahstan"
    },
    "ita": {
      "official": "Repubblica del Kazakhstan",
      "common": "Kazakistan"
    },
    "jpn": {
      "official": "カザフスタン共和国",
      "common": "カザフスタン"
    },
    "nld": {
      "official": "Republiek Kazachstan",
      "common": "Kazachstan"
    },
    "por": {
      "official": "República do Cazaquistão",
      "common": "Cazaquistão"
    },
    "rus": {
      "official": "Республика Казахстан",
      "common": "Казахстан"
    },
    "spa": {
      "official": "República de Kazajstán",
      "common": "Kazajistán"
    },
    "fin": {
      "official": "Kazakstanin tasavalta",
      "common": "Kazakstan"
    }
  },
  "latlng": [
    48,
    68
  ],
  "demonym": "Kazakhstani",
  "landlocked": true,
  "borders": [
    "CHN",
    "KGZ",
    "RUS",
    "TKM",
    "UZB"
  ],
  "area": 2724900,
  "codes": {
    "cca2": "KZ",
    "ccn3": "398",
    "cca3": "KAZ",
    "cioc": "KAZ"
  },
  "provinces": [
    "Almaty",
    "Aqmola",
    "Aqtobe",
    "Astana",
    "Atyrau",
    "Batys Qazaqstan",
    "Bayqongyr",
    "Mangghystau",
    "Ongtustik Qazaqstan",
    "Pavlodar",
    "Qaraghandy",
    "Qostanay",
    "Qyzylorda",
    "Shyghys Qazaqstan",
    "Soltustik Qazaqstan",
    "Zhambyl"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "KAZ",
        "properties": {
          "name": "Kazakhstan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                70.962315,
                42.266154
              ],
              [
                70.388965,
                42.081308
              ],
              [
                69.070027,
                41.384244
              ],
              [
                68.632483,
                40.668681
              ],
              [
                68.259896,
                40.662325
              ],
              [
                67.985856,
                41.135991
              ],
              [
                66.714047,
                41.168444
              ],
              [
                66.510649,
                41.987644
              ],
              [
                66.023392,
                41.994646
              ],
              [
                66.098012,
                42.99766
              ],
              [
                64.900824,
                43.728081
              ],
              [
                63.185787,
                43.650075
              ],
              [
                62.0133,
                43.504477
              ],
              [
                61.05832,
                44.405817
              ],
              [
                60.239972,
                44.784037
              ],
              [
                58.689989,
                45.500014
              ],
              [
                58.503127,
                45.586804
              ],
              [
                55.928917,
                44.995858
              ],
              [
                55.968191,
                41.308642
              ],
              [
                55.455251,
                41.259859
              ],
              [
                54.755345,
                42.043971
              ],
              [
                54.079418,
                42.324109
              ],
              [
                52.944293,
                42.116034
              ],
              [
                52.50246,
                41.783316
              ],
              [
                52.446339,
                42.027151
              ],
              [
                52.692112,
                42.443895
              ],
              [
                52.501426,
                42.792298
              ],
              [
                51.342427,
                43.132975
              ],
              [
                50.891292,
                44.031034
              ],
              [
                50.339129,
                44.284016
              ],
              [
                50.305643,
                44.609836
              ],
              [
                51.278503,
                44.514854
              ],
              [
                51.316899,
                45.245998
              ],
              [
                52.16739,
                45.408391
              ],
              [
                53.040876,
                45.259047
              ],
              [
                53.220866,
                46.234646
              ],
              [
                53.042737,
                46.853006
              ],
              [
                52.042023,
                46.804637
              ],
              [
                51.191945,
                47.048705
              ],
              [
                50.034083,
                46.60899
              ],
              [
                49.10116,
                46.39933
              ],
              [
                48.593241,
                46.561034
              ],
              [
                48.694734,
                47.075628
              ],
              [
                48.057253,
                47.743753
              ],
              [
                47.315231,
                47.715847
              ],
              [
                46.466446,
                48.394152
              ],
              [
                47.043672,
                49.152039
              ],
              [
                46.751596,
                49.356006
              ],
              [
                47.54948,
                50.454698
              ],
              [
                48.577841,
                49.87476
              ],
              [
                48.702382,
                50.605128
              ],
              [
                50.766648,
                51.692762
              ],
              [
                52.328724,
                51.718652
              ],
              [
                54.532878,
                51.02624
              ],
              [
                55.716941,
                50.621717
              ],
              [
                56.777961,
                51.043551
              ],
              [
                58.363291,
                51.063653
              ],
              [
                59.642282,
                50.545442
              ],
              [
                59.932807,
                50.842194
              ],
              [
                61.337424,
                50.79907
              ],
              [
                61.588003,
                51.272659
              ],
              [
                59.967534,
                51.96042
              ],
              [
                60.927269,
                52.447548
              ],
              [
                60.739993,
                52.719986
              ],
              [
                61.699986,
                52.979996
              ],
              [
                60.978066,
                53.664993
              ],
              [
                61.436591,
                54.006265
              ],
              [
                65.178534,
                54.354228
              ],
              [
                65.666876,
                54.601267
              ],
              [
                68.1691,
                54.970392
              ],
              [
                69.068167,
                55.38525
              ],
              [
                70.865267,
                55.169734
              ],
              [
                71.180131,
                54.133285
              ],
              [
                72.22415,
                54.376655
              ],
              [
                73.508516,
                54.035617
              ],
              [
                73.425679,
                53.48981
              ],
              [
                74.384845,
                53.546861
              ],
              [
                76.8911,
                54.490524
              ],
              [
                76.525179,
                54.177003
              ],
              [
                77.800916,
                53.404415
              ],
              [
                80.03556,
                50.864751
              ],
              [
                80.568447,
                51.388336
              ],
              [
                81.945986,
                50.812196
              ],
              [
                83.383004,
                51.069183
              ],
              [
                83.935115,
                50.889246
              ],
              [
                84.416377,
                50.3114
              ],
              [
                85.11556,
                50.117303
              ],
              [
                85.54127,
                49.692859
              ],
              [
                86.829357,
                49.826675
              ],
              [
                87.35997,
                49.214981
              ],
              [
                86.598776,
                48.549182
              ],
              [
                85.768233,
                48.455751
              ],
              [
                85.720484,
                47.452969
              ],
              [
                85.16429,
                47.000956
              ],
              [
                83.180484,
                47.330031
              ],
              [
                82.458926,
                45.53965
              ],
              [
                81.947071,
                45.317027
              ],
              [
                79.966106,
                44.917517
              ],
              [
                80.866206,
                43.180362
              ],
              [
                80.18015,
                42.920068
              ],
              [
                80.25999,
                42.349999
              ],
              [
                79.643645,
                42.496683
              ],
              [
                79.142177,
                42.856092
              ],
              [
                77.658392,
                42.960686
              ],
              [
                76.000354,
                42.988022
              ],
              [
                75.636965,
                42.8779
              ],
              [
                74.212866,
                43.298339
              ],
              [
                73.645304,
                43.091272
              ],
              [
                73.489758,
                42.500894
              ],
              [
                71.844638,
                42.845395
              ],
              [
                71.186281,
                42.704293
              ],
              [
                70.962315,
                42.266154
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],114:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kenya",
    "official": "Republic of Kenya",
    "native": {
      "eng": {
        "official": "Republic of Kenya",
        "common": "Kenya"
      },
      "swa": {
        "official": "Republic of Kenya",
        "common": "Kenya"
      }
    }
  },
  "tld": [
    ".ke"
  ],
  "currency": [
    "KES"
  ],
  "callingCode": [
    "254"
  ],
  "capital": "Nairobi",
  "altSpellings": [
    "KE",
    "Republic of Kenya",
    "Jamhuri ya Kenya"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English",
    "swa": "Swahili"
  },
  "translations": {
    "deu": {
      "official": "Republik Kenia",
      "common": "Kenia"
    },
    "fra": {
      "official": "République du Kenya",
      "common": "Kenya"
    },
    "hrv": {
      "official": "Republika Kenija",
      "common": "Kenija"
    },
    "ita": {
      "official": "Repubblica del Kenya",
      "common": "Kenya"
    },
    "jpn": {
      "official": "ケニア共和国",
      "common": "ケニア"
    },
    "nld": {
      "official": "Republiek Kenia",
      "common": "Kenia"
    },
    "por": {
      "official": "República do Quénia",
      "common": "Quénia"
    },
    "rus": {
      "official": "Республика Кения",
      "common": "Кения"
    },
    "spa": {
      "official": "República de Kenya",
      "common": "Kenia"
    },
    "fin": {
      "official": "Kenian tasavalta",
      "common": "Kenia"
    }
  },
  "latlng": [
    1,
    38
  ],
  "demonym": "Kenyan",
  "landlocked": false,
  "borders": [
    "ETH",
    "SOM",
    "SSD",
    "TZA",
    "UGA"
  ],
  "area": 580367,
  "codes": {
    "cca2": "KE",
    "ccn3": "404",
    "cca3": "KEN",
    "cioc": "KEN"
  },
  "provinces": [
    "Central",
    "Coast",
    "Eastern",
    "Nairobi Area",
    "North Eastern",
    "Nyanza",
    "Rift Valley",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "KEN",
        "properties": {
          "name": "Kenya"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                40.993,
                -0.85829
              ],
              [
                41.58513,
                -1.68325
              ],
              [
                40.88477,
                -2.08255
              ],
              [
                40.63785,
                -2.49979
              ],
              [
                40.26304,
                -2.57309
              ],
              [
                40.12119,
                -3.27768
              ],
              [
                39.80006,
                -3.68116
              ],
              [
                39.60489,
                -4.34653
              ],
              [
                39.20222,
                -4.67677
              ],
              [
                37.7669,
                -3.67712
              ],
              [
                37.69869,
                -3.09699
              ],
              [
                34.07262,
                -1.05982
              ],
              [
                33.903711,
                -0.95
              ],
              [
                33.893569,
                0.109814
              ],
              [
                34.18,
                0.515
              ],
              [
                34.6721,
                1.17694
              ],
              [
                35.03599,
                1.90584
              ],
              [
                34.59607,
                3.05374
              ],
              [
                34.47913,
                3.5556
              ],
              [
                34.005,
                4.249885
              ],
              [
                34.620196,
                4.847123
              ],
              [
                35.298007,
                5.506
              ],
              [
                35.817448,
                5.338232
              ],
              [
                35.817448,
                4.776966
              ],
              [
                36.159079,
                4.447864
              ],
              [
                36.855093,
                4.447864
              ],
              [
                38.120915,
                3.598605
              ],
              [
                38.43697,
                3.58851
              ],
              [
                38.67114,
                3.61607
              ],
              [
                38.89251,
                3.50074
              ],
              [
                39.559384,
                3.42206
              ],
              [
                39.85494,
                3.83879
              ],
              [
                40.76848,
                4.25702
              ],
              [
                41.1718,
                3.91909
              ],
              [
                41.855083,
                3.918912
              ],
              [
                40.98105,
                2.78452
              ],
              [
                40.993,
                -0.85829
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],115:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kiribati",
    "official": "Independent and Sovereign Republic of Kiribati",
    "native": {
      "eng": {
        "official": "Independent and Sovereign Republic of Kiribati",
        "common": "Kiribati"
      },
      "gil": {
        "official": "Ribaberiki Kiribati",
        "common": "Kiribati"
      }
    }
  },
  "tld": [
    ".ki"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "686"
  ],
  "capital": "South Tarawa",
  "altSpellings": [
    "KI",
    "Republic of Kiribati",
    "Ribaberiki Kiribati"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "eng": "English",
    "gil": "Gilbertese"
  },
  "translations": {
    "deu": {
      "official": "Unabhängige und souveräne Republik Kiribati",
      "common": "Kiribati"
    },
    "fra": {
      "official": "République de Kiribati",
      "common": "Kiribati"
    },
    "hrv": {
      "official": "Samostalne i suverene Republike Kiribati",
      "common": "Kiribati"
    },
    "ita": {
      "official": "Repubblica indipendente e sovrano di Kiribati",
      "common": "Kiribati"
    },
    "jpn": {
      "official": "キリバスの独立と主権共和国",
      "common": "キリバス"
    },
    "nld": {
      "official": "Onafhankelijke en soevereine republiek Kiribati",
      "common": "Kiribati"
    },
    "por": {
      "official": "Independente e soberano República de Kiribati",
      "common": "Kiribati"
    },
    "rus": {
      "official": "Независимой и суверенной Республики Кирибати",
      "common": "Кирибати"
    },
    "spa": {
      "official": "República Independiente y Soberano de Kiribati",
      "common": "Kiribati"
    },
    "fin": {
      "official": "Kiribatin tasavalta",
      "common": "Kiribati"
    }
  },
  "latlng": [
    1.41666666,
    173
  ],
  "demonym": "I-Kiribati",
  "landlocked": false,
  "borders": [],
  "area": 811,
  "codes": {
    "cca2": "KI",
    "ccn3": "296",
    "cca3": "KIR",
    "cioc": "KIR"
  },
  "provinces": [
    "Abaiang",
    "Abemama",
    "Aranuka",
    "Arorae",
    "Banaba",
    "Banaba",
    "Beru",
    "Butaritari",
    "Central Gilberts",
    "Gilbert Islands",
    "Kanton",
    "Kiritimati",
    "Kuria",
    "Line Islands",
    "Line Islands",
    "Maiana",
    "Makin",
    "Marakei",
    "Nikunau",
    "Nonouti",
    "Northern Gilberts",
    "Onotoa",
    "Phoenix Islands",
    "Southern Gilberts",
    "Tabiteuea",
    "Tabuaeran",
    "Tamana",
    "Tarawa",
    "Tarawa",
    "Teraina"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],116:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kosovo",
    "official": "Republic of Kosovo",
    "native": {
      "sqi": {
        "official": "Republika e Kosovës",
        "common": "Kosova"
      },
      "srp": {
        "official": "Република Косово",
        "common": "Косово"
      }
    }
  },
  "tld": [],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "383"
  ],
  "capital": "Pristina",
  "altSpellings": [
    "XK",
    "Република Косово"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "sqi": "Albanian",
    "srp": "Serbian"
  },
  "translations": {
    "fra": {
      "official": "République du Kosovo",
      "common": "Kosovo"
    },
    "hrv": {
      "official": "Republika Kosovo",
      "common": "Kosovo"
    },
    "por": {
      "official": "República do Kosovo",
      "common": "Kosovo"
    },
    "rus": {
      "official": "Республика Косово",
      "common": "Республика Косово"
    },
    "spa": {
      "official": "República de Kosovo",
      "common": "Kosovo"
    },
    "fin": {
      "official": "Kosovon tasavalta",
      "common": "Kosovo"
    }
  },
  "latlng": [
    42.666667,
    21.166667
  ],
  "demonym": "Kosovar",
  "landlocked": true,
  "borders": [
    "ALB",
    "MKD",
    "MNE",
    "SRB"
  ],
  "area": 10908,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Kosovo.svg",
  "codes": {
    "cca2": "XK",
    "ccn3": "",
    "cca3": "UNK",
    "cioc": "KOS"
  }
}
},{}],117:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kuwait",
    "official": "State of Kuwait",
    "native": {
      "ara": {
        "official": "دولة الكويت",
        "common": "الكويت"
      }
    }
  },
  "tld": [
    ".kw"
  ],
  "currency": [
    "KWD"
  ],
  "callingCode": [
    "965"
  ],
  "capital": "Kuwait City",
  "altSpellings": [
    "KW",
    "State of Kuwait",
    "Dawlat al-Kuwait"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Staat Kuwait",
      "common": "Kuwait"
    },
    "fra": {
      "official": "État du Koweït",
      "common": "Koweït"
    },
    "hrv": {
      "official": "Država Kuvajt",
      "common": "Kuvajt"
    },
    "ita": {
      "official": "Stato del Kuwait",
      "common": "Kuwait"
    },
    "jpn": {
      "official": "クウェート国",
      "common": "クウェート"
    },
    "nld": {
      "official": "Staat Koeweit",
      "common": "Koeweit"
    },
    "por": {
      "official": "Estado do Kuwait",
      "common": "Kuwait"
    },
    "rus": {
      "official": "Государство Кувейт",
      "common": "Кувейт"
    },
    "spa": {
      "official": "Estado de Kuwait",
      "common": "Kuwait"
    },
    "fin": {
      "official": "Kuwaitin valtio",
      "common": "Kuwait"
    }
  },
  "latlng": [
    29.5,
    45.75
  ],
  "demonym": "Kuwaiti",
  "landlocked": false,
  "borders": [
    "IRQ",
    "SAU"
  ],
  "area": 17818,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Kuwait.svg",
  "codes": {
    "cca2": "KW",
    "ccn3": "414",
    "cca3": "KWT",
    "cioc": "KUW"
  },
  "provinces": [
    "Al 'Asimah",
    "Al Ahmadi",
    "Al Farwaniyah",
    "Al Jahra'",
    "Hawalli"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "KWT",
        "properties": {
          "name": "Kuwait"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                47.974519,
                29.975819
              ],
              [
                48.183189,
                29.534477
              ],
              [
                48.093943,
                29.306299
              ],
              [
                48.416094,
                28.552004
              ],
              [
                47.708851,
                28.526063
              ],
              [
                47.459822,
                29.002519
              ],
              [
                46.568713,
                29.099025
              ],
              [
                47.302622,
                30.05907
              ],
              [
                47.974519,
                29.975819
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],118:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kyrgyzstan",
    "official": "Kyrgyz Republic",
    "native": {
      "kir": {
        "official": "Кыргыз Республикасы",
        "common": "Кыргызстан"
      },
      "rus": {
        "official": "Кыргызская Республика",
        "common": "Киргизия"
      }
    }
  },
  "tld": [
    ".kg"
  ],
  "currency": [
    "KGS"
  ],
  "callingCode": [
    "996"
  ],
  "capital": "Bishkek",
  "altSpellings": [
    "KG",
    "Киргизия",
    "Kyrgyz Republic",
    "Кыргыз Республикасы",
    "Kyrgyz Respublikasy"
  ],
  "region": "Asia",
  "subregion": "Central Asia",
  "languages": {
    "kir": "Kyrgyz",
    "rus": "Russian"
  },
  "translations": {
    "deu": {
      "official": "Kirgisische Republik",
      "common": "Kirgisistan"
    },
    "fra": {
      "official": "République kirghize",
      "common": "Kirghizistan"
    },
    "hrv": {
      "official": "Kirgistanu",
      "common": "Kirgistan"
    },
    "ita": {
      "official": "Kirghizistan",
      "common": "Kirghizistan"
    },
    "jpn": {
      "official": "キルギス共和国",
      "common": "キルギス"
    },
    "nld": {
      "official": "Kirgizische Republiek",
      "common": "Kirgizië"
    },
    "por": {
      "official": "República do Quirguistão",
      "common": "Quirguistão"
    },
    "rus": {
      "official": "Кыргызская Республика",
      "common": "Киргизия"
    },
    "spa": {
      "official": "República Kirguisa",
      "common": "Kirguizistán"
    },
    "fin": {
      "official": "Kirgisian tasavalta",
      "common": "Kirgisia"
    }
  },
  "latlng": [
    41,
    75
  ],
  "demonym": "Kirghiz",
  "landlocked": true,
  "borders": [
    "CHN",
    "KAZ",
    "TJK",
    "UZB"
  ],
  "area": 199951,
  "codes": {
    "cca2": "KG",
    "ccn3": "417",
    "cca3": "KGZ",
    "cioc": "KGZ"
  },
  "provinces": [
    "Batken Oblasty",
    "Bishkek Shaary",
    "Chuy Oblasty (Bishkek)",
    "Jalal-Abad Oblasty",
    "Naryn Oblasty",
    "Osh Oblasty",
    "Talas Oblasty",
    "Ysyk-Kol Oblasty (Karakol)"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "KGZ",
        "properties": {
          "name": "Kyrgyzstan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                70.962315,
                42.266154
              ],
              [
                71.186281,
                42.704293
              ],
              [
                71.844638,
                42.845395
              ],
              [
                73.489758,
                42.500894
              ],
              [
                73.645304,
                43.091272
              ],
              [
                74.212866,
                43.298339
              ],
              [
                75.636965,
                42.8779
              ],
              [
                76.000354,
                42.988022
              ],
              [
                77.658392,
                42.960686
              ],
              [
                79.142177,
                42.856092
              ],
              [
                79.643645,
                42.496683
              ],
              [
                80.25999,
                42.349999
              ],
              [
                80.11943,
                42.123941
              ],
              [
                78.543661,
                41.582243
              ],
              [
                78.187197,
                41.185316
              ],
              [
                76.904484,
                41.066486
              ],
              [
                76.526368,
                40.427946
              ],
              [
                75.467828,
                40.562072
              ],
              [
                74.776862,
                40.366425
              ],
              [
                73.822244,
                39.893973
              ],
              [
                73.960013,
                39.660008
              ],
              [
                73.675379,
                39.431237
              ],
              [
                71.784694,
                39.279463
              ],
              [
                70.549162,
                39.604198
              ],
              [
                69.464887,
                39.526683
              ],
              [
                69.55961,
                40.103211
              ],
              [
                70.648019,
                39.935754
              ],
              [
                71.014198,
                40.244366
              ],
              [
                71.774875,
                40.145844
              ],
              [
                73.055417,
                40.866033
              ],
              [
                71.870115,
                41.3929
              ],
              [
                71.157859,
                41.143587
              ],
              [
                70.420022,
                41.519998
              ],
              [
                71.259248,
                42.167711
              ],
              [
                70.962315,
                42.266154
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],119:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Laos",
    "official": "Lao People's Democratic Republic",
    "native": {
      "lao": {
        "official": "ສາທາລະນະ ຊາທິປະໄຕ ຄົນລາວ ຂອງ",
        "common": "ສປປລາວ"
      }
    }
  },
  "tld": [
    ".la"
  ],
  "currency": [
    "LAK"
  ],
  "callingCode": [
    "856"
  ],
  "capital": "Vientiane",
  "altSpellings": [
    "LA",
    "Lao",
    "Lao People's Democratic Republic",
    "Sathalanalat Paxathipatai Paxaxon Lao"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "lao": "Lao"
  },
  "translations": {
    "deu": {
      "official": "Laos, Demokratische Volksrepublik",
      "common": "Laos"
    },
    "fra": {
      "official": "République démocratique populaire lao",
      "common": "Laos"
    },
    "hrv": {
      "official": "Narodna Demokratska Republika",
      "common": "Laos"
    },
    "ita": {
      "official": "Repubblica democratica popolare del Laos",
      "common": "Laos"
    },
    "jpn": {
      "official": "ラオス人民民主共和国",
      "common": "ラオス人民民主共和国"
    },
    "nld": {
      "official": "Lao Democratische Volksrepubliek",
      "common": "Laos"
    },
    "por": {
      "official": "Laos, República Democrática",
      "common": "Laos"
    },
    "rus": {
      "official": "Лаосская Народно-Демократическая Республика",
      "common": "Лаос"
    },
    "spa": {
      "official": "República Democrática Popular Lao",
      "common": "Laos"
    },
    "fin": {
      "official": "Laosin demokraattinen kansantasavalta",
      "common": "Laos"
    }
  },
  "latlng": [
    18,
    105
  ],
  "demonym": "Laotian",
  "landlocked": true,
  "borders": [
    "MMR",
    "KHM",
    "CHN",
    "THA",
    "VNM"
  ],
  "area": 236800,
  "codes": {
    "cca2": "LA",
    "ccn3": "418",
    "cca3": "LAO",
    "cioc": "LAO"
  },
  "provinces": [
    "Attapu",
    "Bokeo",
    "Bolikhamxai",
    "Champasak",
    "Houaphan",
    "Khammouan",
    "Louangnamtha",
    "Louangphabang",
    "Oudomxai",
    "Phongsali",
    "Salavan",
    "Savannakhet",
    "Viangchan",
    "Viangchan",
    "Xaignabouli",
    "Xaisomboun",
    "Xekong",
    "Xiangkhoang"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LAO",
        "properties": {
          "name": "Laos"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                105.218777,
                14.273212
              ],
              [
                105.544338,
                14.723934
              ],
              [
                105.589039,
                15.570316
              ],
              [
                104.779321,
                16.441865
              ],
              [
                104.716947,
                17.428859
              ],
              [
                103.956477,
                18.240954
              ],
              [
                103.200192,
                18.309632
              ],
              [
                102.998706,
                17.961695
              ],
              [
                102.413005,
                17.932782
              ],
              [
                102.113592,
                18.109102
              ],
              [
                101.059548,
                17.512497
              ],
              [
                101.035931,
                18.408928
              ],
              [
                101.282015,
                19.462585
              ],
              [
                100.606294,
                19.508344
              ],
              [
                100.548881,
                20.109238
              ],
              [
                100.115988,
                20.41785
              ],
              [
                100.329101,
                20.786122
              ],
              [
                101.180005,
                21.436573
              ],
              [
                101.270026,
                21.201652
              ],
              [
                101.80312,
                21.174367
              ],
              [
                101.652018,
                22.318199
              ],
              [
                102.170436,
                22.464753
              ],
              [
                102.754896,
                21.675137
              ],
              [
                103.203861,
                20.766562
              ],
              [
                104.435,
                20.758733
              ],
              [
                104.822574,
                19.886642
              ],
              [
                104.183388,
                19.624668
              ],
              [
                103.896532,
                19.265181
              ],
              [
                105.094598,
                18.666975
              ],
              [
                105.925762,
                17.485315
              ],
              [
                106.556008,
                16.604284
              ],
              [
                107.312706,
                15.908538
              ],
              [
                107.564525,
                15.202173
              ],
              [
                107.382727,
                14.202441
              ],
              [
                106.496373,
                14.570584
              ],
              [
                106.043946,
                13.881091
              ],
              [
                105.218777,
                14.273212
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],120:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Latvia",
    "official": "Republic of Latvia",
    "native": {
      "lav": {
        "official": "Latvijas Republikas",
        "common": "Latvija"
      }
    }
  },
  "tld": [
    ".lv"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "371"
  ],
  "capital": "Riga",
  "altSpellings": [
    "LV",
    "Republic of Latvia",
    "Latvijas Republika"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "lav": "Latvian"
  },
  "translations": {
    "deu": {
      "official": "Republik Lettland",
      "common": "Lettland"
    },
    "fra": {
      "official": "République de Lettonie",
      "common": "Lettonie"
    },
    "hrv": {
      "official": "Republika Latvija",
      "common": "Latvija"
    },
    "ita": {
      "official": "Repubblica di Lettonia",
      "common": "Lettonia"
    },
    "jpn": {
      "official": "ラトビア共和国",
      "common": "ラトビア"
    },
    "nld": {
      "official": "Republiek Letland",
      "common": "Letland"
    },
    "por": {
      "official": "República da Letónia",
      "common": "Letónia"
    },
    "rus": {
      "official": "Латвийская Республика",
      "common": "Латвия"
    },
    "spa": {
      "official": "República de Letonia",
      "common": "Letonia"
    },
    "fin": {
      "official": "Latvian tasavalta",
      "common": "Latvia"
    }
  },
  "latlng": [
    57,
    25
  ],
  "demonym": "Latvian",
  "landlocked": false,
  "borders": [
    "BLR",
    "EST",
    "LTU",
    "RUS"
  ],
  "area": 64559,
  "codes": {
    "cca2": "LV",
    "ccn3": "428",
    "cca3": "LVA",
    "cioc": "LAT"
  },
  "provinces": [
    "Aizkraukles Rajons",
    "Aluksnes Rajons",
    "Balvu Rajons",
    "Bauskas Rajons",
    "Cesu Rajons",
    "Daugavpils",
    "Daugavpils Rajons",
    "Dobeles Rajons",
    "Gulbenes Rajons",
    "Jekabpils Rajons",
    "Jelgava",
    "Jelgavas Rajons",
    "Jurmala",
    "Kraslavas Rajons",
    "Kuldigas Rajons",
    "Leipaja",
    "Liepajas Rajons",
    "Limbazu Rajons",
    "Ludzas Rajons",
    "Madonas Rajons",
    "Ogres Rajons",
    "Preilu Rajons",
    "Rezekne",
    "Rezeknes Rajons",
    "Riga",
    "Rigas Rajons",
    "Saldus Rajons",
    "Talsu Rajons",
    "Tukuma Rajons",
    "Valkas Rajons",
    "Valmieras Rajons",
    "Ventspils",
    "Ventspils Rajons"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LVA",
        "properties": {
          "name": "Latvia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                21.0558,
                56.031076
              ],
              [
                21.090424,
                56.783873
              ],
              [
                21.581866,
                57.411871
              ],
              [
                22.524341,
                57.753374
              ],
              [
                23.318453,
                57.006236
              ],
              [
                24.12073,
                57.025693
              ],
              [
                24.312863,
                57.793424
              ],
              [
                25.164594,
                57.970157
              ],
              [
                25.60281,
                57.847529
              ],
              [
                26.463532,
                57.476389
              ],
              [
                27.288185,
                57.474528
              ],
              [
                27.770016,
                57.244258
              ],
              [
                27.855282,
                56.759326
              ],
              [
                28.176709,
                56.16913
              ],
              [
                27.10246,
                55.783314
              ],
              [
                26.494331,
                55.615107
              ],
              [
                25.533047,
                56.100297
              ],
              [
                25.000934,
                56.164531
              ],
              [
                24.860684,
                56.372528
              ],
              [
                23.878264,
                56.273671
              ],
              [
                22.201157,
                56.337802
              ],
              [
                21.0558,
                56.031076
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],121:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Lebanon",
    "official": "Lebanese Republic",
    "native": {
      "ara": {
        "official": "الجمهورية اللبنانية",
        "common": "لبنان"
      },
      "fra": {
        "official": "République libanaise",
        "common": "Liban"
      }
    }
  },
  "tld": [
    ".lb"
  ],
  "currency": [
    "LBP"
  ],
  "callingCode": [
    "961"
  ],
  "capital": "Beirut",
  "altSpellings": [
    "LB",
    "Lebanese Republic",
    "Al-Jumhūrīyah Al-Libnānīyah"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic",
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Libanesische Republik",
      "common": "Libanon"
    },
    "fra": {
      "official": "République libanaise",
      "common": "Liban"
    },
    "hrv": {
      "official": "Libanonska Republika",
      "common": "Libanon"
    },
    "ita": {
      "official": "Repubblica libanese",
      "common": "Libano"
    },
    "jpn": {
      "official": "レバノン共和国",
      "common": "レバノン"
    },
    "nld": {
      "official": "Libanese Republiek",
      "common": "Libanon"
    },
    "por": {
      "official": "República Libanesa",
      "common": "Líbano"
    },
    "rus": {
      "official": "Ливанская Республика",
      "common": "Ливан"
    },
    "spa": {
      "official": "República Libanesa",
      "common": "Líbano"
    },
    "fin": {
      "official": "Libanonin tasavalta",
      "common": "Libanon"
    }
  },
  "latlng": [
    33.83333333,
    35.83333333
  ],
  "demonym": "Lebanese",
  "landlocked": false,
  "borders": [
    "ISR",
    "SYR"
  ],
  "area": 10452,
  "codes": {
    "cca2": "LB",
    "ccn3": "422",
    "cca3": "LBN",
    "cioc": "LIB"
  },
  "provinces": [
    "Beyrouth",
    "Ech Chimal",
    "Ej Jnoub",
    "El Bekaa",
    "Jabal Loubnane"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LBN",
        "properties": {
          "name": "Lebanon"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                35.821101,
                33.277426
              ],
              [
                35.552797,
                33.264275
              ],
              [
                35.460709,
                33.08904
              ],
              [
                35.126053,
                33.0909
              ],
              [
                35.482207,
                33.90545
              ],
              [
                35.979592,
                34.610058
              ],
              [
                35.998403,
                34.644914
              ],
              [
                36.448194,
                34.593935
              ],
              [
                36.61175,
                34.201789
              ],
              [
                36.06646,
                33.824912
              ],
              [
                35.821101,
                33.277426
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],122:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Lesotho",
    "official": "Kingdom of Lesotho",
    "native": {
      "eng": {
        "official": "Kingdom of Lesotho",
        "common": "Lesotho"
      },
      "sot": {
        "official": "Kingdom of Lesotho",
        "common": "Lesotho"
      }
    }
  },
  "tld": [
    ".ls"
  ],
  "currency": [
    "LSL",
    "ZAR"
  ],
  "callingCode": [
    "266"
  ],
  "capital": "Maseru",
  "altSpellings": [
    "LS",
    "Kingdom of Lesotho",
    "Muso oa Lesotho"
  ],
  "region": "Africa",
  "subregion": "Southern Africa",
  "languages": {
    "eng": "English",
    "sot": "Sotho"
  },
  "translations": {
    "deu": {
      "official": "Königreich Lesotho",
      "common": "Lesotho"
    },
    "fra": {
      "official": "Royaume du Lesotho",
      "common": "Lesotho"
    },
    "hrv": {
      "official": "Kraljevina Lesoto",
      "common": "Lesoto"
    },
    "ita": {
      "official": "Regno del Lesotho",
      "common": "Lesotho"
    },
    "jpn": {
      "official": "レソト王国",
      "common": "レソト"
    },
    "nld": {
      "official": "Koninkrijk Lesotho",
      "common": "Lesotho"
    },
    "por": {
      "official": "Reino do Lesoto",
      "common": "Lesoto"
    },
    "rus": {
      "official": "Королевство Лесото",
      "common": "Лесото"
    },
    "spa": {
      "official": "Reino de Lesotho",
      "common": "Lesotho"
    },
    "fin": {
      "official": "Lesothon kuningaskunta",
      "common": "Lesotho"
    }
  },
  "latlng": [
    -29.5,
    28.5
  ],
  "demonym": "Mosotho",
  "landlocked": true,
  "borders": [
    "ZAF"
  ],
  "area": 30355,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Lesotho.svg",
  "codes": {
    "cca2": "LS",
    "ccn3": "426",
    "cca3": "LSO",
    "cioc": "LES"
  },
  "provinces": [
    "Berea",
    "Butha-Buthe",
    "Leribe",
    "Mafeteng",
    "Maseru",
    "Mohales Hoek",
    "Mokhotlong",
    "Qacha's Nek",
    "Quthing",
    "Thaba-Tseka"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LSO",
        "properties": {
          "name": "Lesotho"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                28.978263,
                -28.955597
              ],
              [
                29.325166,
                -29.257387
              ],
              [
                29.018415,
                -29.743766
              ],
              [
                28.8484,
                -30.070051
              ],
              [
                28.291069,
                -30.226217
              ],
              [
                28.107205,
                -30.545732
              ],
              [
                27.749397,
                -30.645106
              ],
              [
                26.999262,
                -29.875954
              ],
              [
                27.532511,
                -29.242711
              ],
              [
                28.074338,
                -28.851469
              ],
              [
                28.5417,
                -28.647502
              ],
              [
                28.978263,
                -28.955597
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],123:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Liberia",
    "official": "Republic of Liberia",
    "native": {
      "eng": {
        "official": "Republic of Liberia",
        "common": "Liberia"
      }
    }
  },
  "tld": [
    ".lr"
  ],
  "currency": [
    "LRD"
  ],
  "callingCode": [
    "231"
  ],
  "capital": "Monrovia",
  "altSpellings": [
    "LR",
    "Republic of Liberia"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Liberia",
      "common": "Liberia"
    },
    "fra": {
      "official": "République du Libéria",
      "common": "Liberia"
    },
    "hrv": {
      "official": "Republika Liberija",
      "common": "Liberija"
    },
    "ita": {
      "official": "Repubblica di Liberia",
      "common": "Liberia"
    },
    "jpn": {
      "official": "リベリア共和国",
      "common": "リベリア"
    },
    "nld": {
      "official": "Republiek Liberia",
      "common": "Liberia"
    },
    "por": {
      "official": "República da Libéria",
      "common": "Libéria"
    },
    "rus": {
      "official": "Республика Либерия",
      "common": "Либерия"
    },
    "spa": {
      "official": "República de Liberia",
      "common": "Liberia"
    },
    "fin": {
      "official": "Liberian tasavalta",
      "common": "Liberia"
    }
  },
  "latlng": [
    6.5,
    -9.5
  ],
  "demonym": "Liberian",
  "landlocked": false,
  "borders": [
    "GIN",
    "CIV",
    "SLE"
  ],
  "area": 111369,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Liberia.svg",
  "codes": {
    "cca2": "LR",
    "ccn3": "430",
    "cca3": "LBR",
    "cioc": "LBR"
  },
  "provinces": [
    "Bomi",
    "Bong",
    "Grand Bassa",
    "Grand Cape Mount",
    "Grand Gedeh",
    "Grand Kru",
    "Lofa",
    "Margibi",
    "Maryland",
    "Montserrado",
    "Nimba",
    "River Cess",
    "Sinoe"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LBR",
        "properties": {
          "name": "Liberia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -7.712159,
                4.364566
              ],
              [
                -7.974107,
                4.355755
              ],
              [
                -9.004794,
                4.832419
              ],
              [
                -9.91342,
                5.593561
              ],
              [
                -10.765384,
                6.140711
              ],
              [
                -11.438779,
                6.785917
              ],
              [
                -11.199802,
                7.105846
              ],
              [
                -11.146704,
                7.396706
              ],
              [
                -10.695595,
                7.939464
              ],
              [
                -10.230094,
                8.406206
              ],
              [
                -10.016567,
                8.428504
              ],
              [
                -9.755342,
                8.541055
              ],
              [
                -9.33728,
                7.928534
              ],
              [
                -9.403348,
                7.526905
              ],
              [
                -9.208786,
                7.313921
              ],
              [
                -8.926065,
                7.309037
              ],
              [
                -8.722124,
                7.711674
              ],
              [
                -8.439298,
                7.686043
              ],
              [
                -8.485446,
                7.395208
              ],
              [
                -8.385452,
                6.911801
              ],
              [
                -8.60288,
                6.467564
              ],
              [
                -8.311348,
                6.193033
              ],
              [
                -7.993693,
                6.12619
              ],
              [
                -7.570153,
                5.707352
              ],
              [
                -7.539715,
                5.313345
              ],
              [
                -7.635368,
                5.188159
              ],
              [
                -7.712159,
                4.364566
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],124:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Libya",
    "official": "State of Libya",
    "native": {
      "ara": {
        "official": "الدولة ليبيا",
        "common": "‏ليبيا"
      }
    }
  },
  "tld": [
    ".ly"
  ],
  "currency": [
    "LYD"
  ],
  "callingCode": [
    "218"
  ],
  "capital": "Tripoli",
  "altSpellings": [
    "LY",
    "State of Libya",
    "Dawlat Libya"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Staat Libyen",
      "common": "Libyen"
    },
    "fra": {
      "official": "Grande République arabe libyenne populaire et socialiste",
      "common": "Libye"
    },
    "hrv": {
      "official": "Država Libiji",
      "common": "Libija"
    },
    "ita": {
      "official": "Stato della Libia",
      "common": "Libia"
    },
    "jpn": {
      "official": "リビアの国家",
      "common": "リビア"
    },
    "nld": {
      "official": "Staat van Libië",
      "common": "Libië"
    },
    "por": {
      "official": "Estado da Líbia",
      "common": "Líbia"
    },
    "rus": {
      "official": "Государство Ливии",
      "common": "Ливия"
    },
    "spa": {
      "official": "Estado de Libia",
      "common": "Libia"
    },
    "fin": {
      "official": "Libyan valtio",
      "common": "Libya"
    }
  },
  "latlng": [
    25,
    17
  ],
  "demonym": "Libyan",
  "landlocked": false,
  "borders": [
    "DZA",
    "TCD",
    "EGY",
    "NER",
    "SDN",
    "TUN"
  ],
  "area": 1759540,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Libya.svg",
  "codes": {
    "cca2": "LY",
    "ccn3": "434",
    "cca3": "LBY",
    "cioc": "LBA"
  },
  "provinces": [
    "Ajdabiya",
    "Al 'Aziziyah",
    "Al Fatih",
    "Al Jabal al Akhdar",
    "Al Jufrah",
    "Al Khums",
    "Al Kufrah",
    "An Nuqat al Khams",
    "Ash Shati'",
    "Awbari",
    "Az Zawiyah",
    "Banghazi",
    "Darnah",
    "Ghadamis",
    "Gharyan",
    "Misratah",
    "Murzuq",
    "Sabha",
    "Sawfajjin",
    "Surt",
    "Tarabulus",
    "Tarhunah",
    "Tubruq",
    "Yafran",
    "Zlitan"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LBY",
        "properties": {
          "name": "Libya"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                14.8513,
                22.86295
              ],
              [
                14.143871,
                22.491289
              ],
              [
                13.581425,
                23.040506
              ],
              [
                11.999506,
                23.471668
              ],
              [
                11.560669,
                24.097909
              ],
              [
                10.771364,
                24.562532
              ],
              [
                10.303847,
                24.379313
              ],
              [
                9.948261,
                24.936954
              ],
              [
                9.910693,
                25.365455
              ],
              [
                9.319411,
                26.094325
              ],
              [
                9.716286,
                26.512206
              ],
              [
                9.629056,
                27.140953
              ],
              [
                9.756128,
                27.688259
              ],
              [
                9.683885,
                28.144174
              ],
              [
                9.859998,
                28.95999
              ],
              [
                9.805634,
                29.424638
              ],
              [
                9.48214,
                30.307556
              ],
              [
                9.970017,
                30.539325
              ],
              [
                10.056575,
                30.961831
              ],
              [
                9.950225,
                31.37607
              ],
              [
                10.636901,
                31.761421
              ],
              [
                10.94479,
                32.081815
              ],
              [
                11.432253,
                32.368903
              ],
              [
                11.488787,
                33.136996
              ],
              [
                12.66331,
                32.79278
              ],
              [
                13.08326,
                32.87882
              ],
              [
                13.91868,
                32.71196
              ],
              [
                15.24563,
                32.26508
              ],
              [
                15.71394,
                31.37626
              ],
              [
                16.61162,
                31.18218
              ],
              [
                18.02109,
                30.76357
              ],
              [
                19.08641,
                30.26639
              ],
              [
                19.57404,
                30.52582
              ],
              [
                20.05335,
                30.98576
              ],
              [
                19.82033,
                31.75179
              ],
              [
                20.13397,
                32.2382
              ],
              [
                20.85452,
                32.7068
              ],
              [
                21.54298,
                32.8432
              ],
              [
                22.89576,
                32.63858
              ],
              [
                23.2368,
                32.19149
              ],
              [
                23.60913,
                32.18726
              ],
              [
                23.9275,
                32.01667
              ],
              [
                24.92114,
                31.89936
              ],
              [
                25.16482,
                31.56915
              ],
              [
                24.80287,
                31.08929
              ],
              [
                24.95762,
                30.6616
              ],
              [
                24.70007,
                30.04419
              ],
              [
                25,
                29.238655
              ],
              [
                25,
                25.6825
              ],
              [
                25,
                22
              ],
              [
                25,
                20.00304
              ],
              [
                23.85,
                20
              ],
              [
                23.83766,
                19.58047
              ],
              [
                19.84926,
                21.49509
              ],
              [
                15.86085,
                23.40972
              ],
              [
                14.8513,
                22.86295
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],125:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Liechtenstein",
    "official": "Principality of Liechtenstein",
    "native": {
      "deu": {
        "official": "Fürstentum Liechtenstein",
        "common": "Liechtenstein"
      }
    }
  },
  "tld": [
    ".li"
  ],
  "currency": [
    "CHF"
  ],
  "callingCode": [
    "423"
  ],
  "capital": "Vaduz",
  "altSpellings": [
    "LI",
    "Principality of Liechtenstein",
    "Fürstentum Liechtenstein"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "deu": "German"
  },
  "translations": {
    "deu": {
      "official": "Fürstentum Liechtenstein",
      "common": "Liechtenstein"
    },
    "fra": {
      "official": "Principauté du Liechtenstein",
      "common": "Liechtenstein"
    },
    "hrv": {
      "official": "Kneževina Lihtenštajn",
      "common": "Lihtenštajn"
    },
    "ita": {
      "official": "Principato del Liechtenstein",
      "common": "Liechtenstein"
    },
    "jpn": {
      "official": "リヒテンシュタイン公国",
      "common": "リヒテンシュタイン"
    },
    "nld": {
      "official": "Vorstendom Liechtenstein",
      "common": "Liechtenstein"
    },
    "por": {
      "official": "Principado de Liechtenstein",
      "common": "Liechtenstein"
    },
    "rus": {
      "official": "Княжество Лихтенштейн",
      "common": "Лихтенштейн"
    },
    "spa": {
      "official": "Principado de Liechtenstein",
      "common": "Liechtenstein"
    },
    "fin": {
      "official": "Liechensteinin ruhtinaskunta",
      "common": "Liechenstein"
    }
  },
  "latlng": [
    47.26666666,
    9.53333333
  ],
  "demonym": "Liechtensteiner",
  "landlocked": true,
  "borders": [
    "AUT",
    "CHE"
  ],
  "area": 160,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Liechtenstein.svg",
  "codes": {
    "cca2": "LI",
    "ccn3": "438",
    "cca3": "LIE",
    "cioc": "LIE"
  },
  "provinces": [
    "Balzers",
    "Eschen",
    "Gamprin",
    "Mauren",
    "Planken",
    "Ruggell",
    "Schaan",
    "Schellenberg",
    "Triesen",
    "Triesenberg",
    "Vaduz"
  ],
  "geoJSON": {}
}
},{}],126:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Lithuania",
    "official": "Republic of Lithuania",
    "native": {
      "lit": {
        "official": "Lietuvos Respublikos",
        "common": "Lietuva"
      }
    }
  },
  "tld": [
    ".lt"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "370"
  ],
  "capital": "Vilnius",
  "altSpellings": [
    "LT",
    "Republic of Lithuania",
    "Lietuvos Respublika"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "lit": "Lithuanian"
  },
  "translations": {
    "deu": {
      "official": "Republik Litauen",
      "common": "Litauen"
    },
    "fra": {
      "official": "République de Lituanie",
      "common": "Lituanie"
    },
    "hrv": {
      "official": "Republika Litva",
      "common": "Litva"
    },
    "ita": {
      "official": "Repubblica di Lituania",
      "common": "Lituania"
    },
    "jpn": {
      "official": "リトアニア共和国",
      "common": "リトアニア"
    },
    "nld": {
      "official": "Republiek Litouwen",
      "common": "Litouwen"
    },
    "por": {
      "official": "República da Lituânia",
      "common": "Lituânia"
    },
    "rus": {
      "official": "Литовская Республика",
      "common": "Литва"
    },
    "spa": {
      "official": "República de Lituania",
      "common": "Lituania"
    },
    "fin": {
      "official": "Liettuan tasavalta",
      "common": "Liettua"
    }
  },
  "latlng": [
    56,
    24
  ],
  "demonym": "Lithuanian",
  "landlocked": false,
  "borders": [
    "BLR",
    "LVA",
    "POL",
    "RUS"
  ],
  "area": 65300,
  "codes": {
    "cca2": "LT",
    "ccn3": "440",
    "cca3": "LTU",
    "cioc": "LTU"
  },
  "provinces": [
    "Akmenes Rajonas",
    "Alytaus Rajonas",
    "Alytus",
    "Anyksciu Rajonas",
    "Birstonas",
    "Birzu Rajonas",
    "Druskininkai",
    "Ignalinos Rajonas",
    "Jonavos Rajonas",
    "Joniskio Rajonas",
    "Jurbarko Rajonas",
    "Kaisiadoriu Rajonas",
    "Kaunas",
    "Kauno Rajonas",
    "Kedainiu Rajonas",
    "Kelmes Rajonas",
    "Klaipeda",
    "Klaipedos Rajonas",
    "Kretingos Rajonas",
    "Kupiskio Rajonas",
    "Lazdiju Rajonas",
    "Marijampole",
    "Marijampoles Rajonas",
    "Mazeikiu Rajonas",
    "Moletu Rajonas",
    "Neringa Pakruojo Rajonas",
    "Palanga",
    "Panevezio Rajonas",
    "Panevezys",
    "Pasvalio Rajonas",
    "Plunges Rajonas",
    "Prienu Rajonas",
    "Radviliskio Rajonas",
    "Raseiniu Rajonas",
    "Rokiskio Rajonas",
    "Sakiu Rajonas",
    "Salcininku Rajonas",
    "Siauliai",
    "Siauliu Rajonas",
    "Silales Rajonas",
    "Silutes Rajonas",
    "Sirvintu Rajonas",
    "Skuodo Rajonas",
    "Svencioniu Rajonas",
    "Taurages Rajonas",
    "Telsiu Rajonas",
    "Traku Rajonas",
    "Ukmerges Rajonas",
    "Utenos Rajonas",
    "Varenos Rajonas",
    "Vilkaviskio Rajonas",
    "Vilniaus Rajonas",
    "Vilnius",
    "Zarasu Rajonas"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LTU",
        "properties": {
          "name": "Lithuania"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                22.731099,
                54.327537
              ],
              [
                22.651052,
                54.582741
              ],
              [
                22.757764,
                54.856574
              ],
              [
                22.315724,
                55.015299
              ],
              [
                21.268449,
                55.190482
              ],
              [
                21.0558,
                56.031076
              ],
              [
                22.201157,
                56.337802
              ],
              [
                23.878264,
                56.273671
              ],
              [
                24.860684,
                56.372528
              ],
              [
                25.000934,
                56.164531
              ],
              [
                25.533047,
                56.100297
              ],
              [
                26.494331,
                55.615107
              ],
              [
                26.588279,
                55.167176
              ],
              [
                25.768433,
                54.846963
              ],
              [
                25.536354,
                54.282423
              ],
              [
                24.450684,
                53.905702
              ],
              [
                23.484128,
                53.912498
              ],
              [
                23.243987,
                54.220567
              ],
              [
                22.731099,
                54.327537
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],127:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Luxembourg",
    "official": "Grand Duchy of Luxembourg",
    "native": {
      "deu": {
        "official": "Großherzogtum Luxemburg",
        "common": "Luxemburg"
      },
      "fra": {
        "official": "Grand-Duché de Luxembourg",
        "common": "Luxembourg"
      },
      "ltz": {
        "official": "Groussherzogtum Lëtzebuerg",
        "common": "Lëtzebuerg"
      }
    }
  },
  "tld": [
    ".lu"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "352"
  ],
  "capital": "Luxembourg",
  "altSpellings": [
    "LU",
    "Grand Duchy of Luxembourg",
    "Grand-Duché de Luxembourg",
    "Großherzogtum Luxemburg",
    "Groussherzogtum Lëtzebuerg"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "deu": "German",
    "fra": "French",
    "ltz": "Luxembourgish"
  },
  "translations": {
    "deu": {
      "official": "Großherzogtum Luxemburg,",
      "common": "Luxemburg"
    },
    "fra": {
      "official": "Grand-Duché de Luxembourg",
      "common": "Luxembourg"
    },
    "hrv": {
      "official": "Veliko Vojvodstvo Luksemburg",
      "common": "Luksemburg"
    },
    "ita": {
      "official": "Granducato di Lussemburgo",
      "common": "Lussemburgo"
    },
    "jpn": {
      "official": "ルクセンブルク大公国",
      "common": "ルクセンブルク"
    },
    "nld": {
      "official": "Groothertogdom Luxemburg",
      "common": "Luxemburg"
    },
    "por": {
      "official": "Grão-Ducado do Luxemburgo",
      "common": "Luxemburgo"
    },
    "rus": {
      "official": "Великое Герцогство Люксембург",
      "common": "Люксембург"
    },
    "spa": {
      "official": "Gran Ducado de Luxemburgo",
      "common": "Luxemburgo"
    },
    "fin": {
      "official": "Luxemburgin suurherttuakunta",
      "common": "Luxemburg"
    }
  },
  "latlng": [
    49.75,
    6.16666666
  ],
  "demonym": "Luxembourger",
  "landlocked": true,
  "borders": [
    "BEL",
    "FRA",
    "DEU"
  ],
  "area": 2586,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Luxembourg.svg",
  "codes": {
    "cca2": "LU",
    "ccn3": "442",
    "cca3": "LUX",
    "cioc": "LUX"
  },
  "provinces": [
    "Diekirch",
    "Grevenmacher",
    "Luxembourg"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LUX",
        "properties": {
          "name": "Luxembourg"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                6.043073,
                50.128052
              ],
              [
                6.242751,
                49.902226
              ],
              [
                6.18632,
                49.463803
              ],
              [
                5.897759,
                49.442667
              ],
              [
                5.674052,
                49.529484
              ],
              [
                5.782417,
                50.090328
              ],
              [
                6.043073,
                50.128052
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],128:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Macau",
    "official": "Macao Special Administrative Region of the People's Republic of China",
    "native": {
      "por": {
        "official": "Região Administrativa Especial de Macau da República Popular da China",
        "common": "Macau"
      },
      "zho": {
        "official": "澳门特别行政区中国人民共和国",
        "common": "澳門"
      }
    }
  },
  "tld": [
    ".mo"
  ],
  "currency": [
    "MOP"
  ],
  "callingCode": [
    "853"
  ],
  "capital": "",
  "altSpellings": [
    "MO",
    "澳门",
    "Macao",
    "Macao Special Administrative Region of the People's Republic of China",
    "中華人民共和國澳門特別行政區",
    "Região Administrativa Especial de Macau da República Popular da China"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "por": "Portuguese",
    "zho": "Chinese"
  },
  "translations": {
    "deu": {
      "official": "Sonderverwaltungsregion Macau der Volksrepublik China",
      "common": "Macao"
    },
    "fra": {
      "official": "Région administrative spéciale de Macao de la République populaire de Chine",
      "common": "Macao"
    },
    "hrv": {
      "official": "Makao Posebnog upravnog područjaNarodne Republike Kine",
      "common": "Makao"
    },
    "ita": {
      "official": "Macao Regione amministrativa speciale della Repubblica Popolare Cinese",
      "common": "Macao"
    },
    "jpn": {
      "official": "中華人民共和国マカオ特別行政区",
      "common": "マカオ"
    },
    "nld": {
      "official": "Speciale Administratieve Regio Macau van de Volksrepubliek China",
      "common": "Macao"
    },
    "por": {
      "official": "Macau Região Administrativa Especial da República Popular da China",
      "common": "Macau"
    },
    "rus": {
      "official": "Специальный административный район Макао Китайской Народной Республики Китай",
      "common": "Макао"
    },
    "spa": {
      "official": "Macao, Región Administrativa Especial de la República Popular China",
      "common": "Macao"
    },
    "fin": {
      "official": "Macaon Kiinan kansantasavallan erityishallintoalue",
      "common": "Macao"
    }
  },
  "latlng": [
    22.16666666,
    113.55
  ],
  "demonym": "Chinese",
  "landlocked": false,
  "borders": [
    "CHN"
  ],
  "area": 30,
  "codes": {
    "cca2": "MO",
    "ccn3": "446",
    "cca3": "MAC",
    "cioc": ""
  },
  "provinces": [
    "Macau"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],129:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Macedonia",
    "official": "Republic of Macedonia",
    "native": {
      "mkd": {
        "official": "Република Македонија",
        "common": "Македонија"
      }
    }
  },
  "tld": [
    ".mk"
  ],
  "currency": [
    "MKD"
  ],
  "callingCode": [
    "389"
  ],
  "capital": "Skopje",
  "altSpellings": [
    "MK",
    "Macedonia, the Former Yugoslav Republic of",
    "Republic of Macedonia",
    "Република Македонија"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "mkd": "Macedonian"
  },
  "translations": {
    "deu": {
      "official": "Republik Mazedonien",
      "common": "Mazedonien"
    },
    "fra": {
      "official": "République de Macédoine",
      "common": "Macédoine"
    },
    "hrv": {
      "official": "Republika Makedonija",
      "common": "Makedonija"
    },
    "ita": {
      "official": "Repubblica di Macedonia",
      "common": "Macedonia"
    },
    "jpn": {
      "official": "マケドニア共和国",
      "common": "マケドニア旧ユーゴスラビア共和国"
    },
    "nld": {
      "official": "Republic of Macedonia",
      "common": "Macedonië"
    },
    "por": {
      "official": "República da Macedónia",
      "common": "Macedónia"
    },
    "rus": {
      "official": "Республика Македония",
      "common": "Республика Македония"
    },
    "spa": {
      "official": "República de Macedonia",
      "common": "Macedonia"
    },
    "fin": {
      "official": "Makedonian tasavalta",
      "common": "Makedonia"
    }
  },
  "latlng": [
    41.83333333,
    22
  ],
  "demonym": "Macedonian",
  "landlocked": true,
  "borders": [
    "ALB",
    "BGR",
    "GRC",
    "KOS",
    "SRB"
  ],
  "area": 25713,
  "codes": {
    "cca2": "MK",
    "ccn3": "807",
    "cca3": "MKD",
    "cioc": "MKD"
  }
}
},{}],130:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Madagascar",
    "official": "Republic of Madagascar",
    "native": {
      "fra": {
        "official": "République de Madagascar",
        "common": "Madagascar"
      },
      "mlg": {
        "official": "Repoblikan'i Madagasikara",
        "common": "Madagasikara"
      }
    }
  },
  "tld": [
    ".mg"
  ],
  "currency": [
    "MGA"
  ],
  "callingCode": [
    "261"
  ],
  "capital": "Antananarivo",
  "altSpellings": [
    "MG",
    "Republic of Madagascar",
    "Repoblikan'i Madagasikara",
    "République de Madagascar"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "fra": "French",
    "mlg": "Malagasy"
  },
  "translations": {
    "deu": {
      "official": "Republik Madagaskar",
      "common": "Madagaskar"
    },
    "fra": {
      "official": "République de Madagascar",
      "common": "Madagascar"
    },
    "hrv": {
      "official": "Republika Madagaskar",
      "common": "Madagaskar"
    },
    "ita": {
      "official": "Repubblica del Madagascar",
      "common": "Madagascar"
    },
    "jpn": {
      "official": "マダガスカル共和国",
      "common": "マダガスカル"
    },
    "nld": {
      "official": "Republiek Madagaskar",
      "common": "Madagaskar"
    },
    "por": {
      "official": "República de Madagáscar",
      "common": "Madagáscar"
    },
    "rus": {
      "official": "Республика Мадагаскар",
      "common": "Мадагаскар"
    },
    "spa": {
      "official": "República de Madagascar",
      "common": "Madagascar"
    },
    "fin": {
      "official": "Madagaskarin tasavalta",
      "common": "Madagaskar"
    }
  },
  "latlng": [
    -20,
    47
  ],
  "demonym": "Malagasy",
  "landlocked": false,
  "borders": [],
  "area": 587041,
  "codes": {
    "cca2": "MG",
    "ccn3": "450",
    "cca3": "MDG",
    "cioc": "MAD"
  },
  "provinces": [
    "Antananarivo",
    "Antsiranana",
    "Fianarantsoa",
    "Mahajanga",
    "Toamasina",
    "Toliara"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MDG",
        "properties": {
          "name": "Madagascar"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                49.543519,
                -12.469833
              ],
              [
                49.808981,
                -12.895285
              ],
              [
                50.056511,
                -13.555761
              ],
              [
                50.217431,
                -14.758789
              ],
              [
                50.476537,
                -15.226512
              ],
              [
                50.377111,
                -15.706069
              ],
              [
                50.200275,
                -16.000263
              ],
              [
                49.860606,
                -15.414253
              ],
              [
                49.672607,
                -15.710204
              ],
              [
                49.863344,
                -16.451037
              ],
              [
                49.774564,
                -16.875042
              ],
              [
                49.498612,
                -17.106036
              ],
              [
                49.435619,
                -17.953064
              ],
              [
                49.041792,
                -19.118781
              ],
              [
                48.548541,
                -20.496888
              ],
              [
                47.930749,
                -22.391501
              ],
              [
                47.547723,
                -23.781959
              ],
              [
                47.095761,
                -24.94163
              ],
              [
                46.282478,
                -25.178463
              ],
              [
                45.409508,
                -25.601434
              ],
              [
                44.833574,
                -25.346101
              ],
              [
                44.03972,
                -24.988345
              ],
              [
                43.763768,
                -24.460677
              ],
              [
                43.697778,
                -23.574116
              ],
              [
                43.345654,
                -22.776904
              ],
              [
                43.254187,
                -22.057413
              ],
              [
                43.433298,
                -21.336475
              ],
              [
                43.893683,
                -21.163307
              ],
              [
                43.89637,
                -20.830459
              ],
              [
                44.374325,
                -20.072366
              ],
              [
                44.464397,
                -19.435454
              ],
              [
                44.232422,
                -18.961995
              ],
              [
                44.042976,
                -18.331387
              ],
              [
                43.963084,
                -17.409945
              ],
              [
                44.312469,
                -16.850496
              ],
              [
                44.446517,
                -16.216219
              ],
              [
                44.944937,
                -16.179374
              ],
              [
                45.502732,
                -15.974373
              ],
              [
                45.872994,
                -15.793454
              ],
              [
                46.312243,
                -15.780018
              ],
              [
                46.882183,
                -15.210182
              ],
              [
                47.70513,
                -14.594303
              ],
              [
                48.005215,
                -14.091233
              ],
              [
                47.869047,
                -13.663869
              ],
              [
                48.293828,
                -13.784068
              ],
              [
                48.84506,
                -13.089175
              ],
              [
                48.863509,
                -12.487868
              ],
              [
                49.194651,
                -12.040557
              ],
              [
                49.543519,
                -12.469833
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],131:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Malawi",
    "official": "Republic of Malawi",
    "native": {
      "eng": {
        "official": "Republic of Malawi",
        "common": "Malawi"
      },
      "nya": {
        "official": "Chalo cha Malawi, Dziko la Malaŵi",
        "common": "Malaŵi"
      }
    }
  },
  "tld": [
    ".mw"
  ],
  "currency": [
    "MWK"
  ],
  "callingCode": [
    "265"
  ],
  "capital": "Lilongwe",
  "altSpellings": [
    "MW",
    "Republic of Malawi"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English",
    "nya": "Chewa"
  },
  "translations": {
    "deu": {
      "official": "Republik Malawi",
      "common": "Malawi"
    },
    "fra": {
      "official": "République du Malawi",
      "common": "Malawi"
    },
    "hrv": {
      "official": "Republika Malavi",
      "common": "Malavi"
    },
    "ita": {
      "official": "Repubblica del Malawi",
      "common": "Malawi"
    },
    "jpn": {
      "official": "マラウイ共和国",
      "common": "マラウイ"
    },
    "nld": {
      "official": "Republiek Malawi",
      "common": "Malawi"
    },
    "por": {
      "official": "República do Malawi",
      "common": "Malawi"
    },
    "rus": {
      "official": "Республика Малави",
      "common": "Малави"
    },
    "spa": {
      "official": "República de Malawi",
      "common": "Malawi"
    },
    "fin": {
      "official": "Malawin tasavalta",
      "common": "Malawi"
    }
  },
  "latlng": [
    -13.5,
    34
  ],
  "demonym": "Malawian",
  "landlocked": true,
  "borders": [
    "MOZ",
    "TZA",
    "ZMB"
  ],
  "area": 118484,
  "codes": {
    "cca2": "MW",
    "ccn3": "454",
    "cca3": "MWI",
    "cioc": "MAW"
  },
  "provinces": [
    "Balaka",
    "Blantyre",
    "Chikwawa",
    "Chiradzulu",
    "Chitipa",
    "Dedza",
    "Dowa",
    "Karonga",
    "Kasungu",
    "Likoma",
    "Lilongwe",
    "Machinga (Kasupe)",
    "Mangochi",
    "Mchinji",
    "Mulanje",
    "Mwanza",
    "Mzimba",
    "Nkhata Bay",
    "Nkhotakota",
    "Nsanje",
    "Ntcheu",
    "Ntchisi",
    "Phalombe",
    "Rumphi",
    "Salima",
    "Thyolo",
    "Zomba"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MWI",
        "properties": {
          "name": "Malawi"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                34.559989,
                -11.52002
              ],
              [
                34.280006,
                -12.280025
              ],
              [
                34.559989,
                -13.579998
              ],
              [
                34.907151,
                -13.565425
              ],
              [
                35.267956,
                -13.887834
              ],
              [
                35.686845,
                -14.611046
              ],
              [
                35.771905,
                -15.896859
              ],
              [
                35.339063,
                -16.10744
              ],
              [
                35.03381,
                -16.8013
              ],
              [
                34.381292,
                -16.18356
              ],
              [
                34.307291,
                -15.478641
              ],
              [
                34.517666,
                -15.013709
              ],
              [
                34.459633,
                -14.61301
              ],
              [
                34.064825,
                -14.35995
              ],
              [
                33.7897,
                -14.451831
              ],
              [
                33.214025,
                -13.97186
              ],
              [
                32.688165,
                -13.712858
              ],
              [
                32.991764,
                -12.783871
              ],
              [
                33.306422,
                -12.435778
              ],
              [
                33.114289,
                -11.607198
              ],
              [
                33.31531,
                -10.79655
              ],
              [
                33.485688,
                -10.525559
              ],
              [
                33.231388,
                -9.676722
              ],
              [
                32.759375,
                -9.230599
              ],
              [
                33.739729,
                -9.417151
              ],
              [
                33.940838,
                -9.693674
              ],
              [
                34.280006,
                -10.16
              ],
              [
                34.559989,
                -11.52002
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],132:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Malaysia",
    "official": "Malaysia",
    "native": {
      "eng": {
        "official": "Malaysia",
        "common": "Malaysia"
      },
      "msa": {
        "official": "مليسيا",
        "common": "مليسيا"
      }
    }
  },
  "tld": [
    ".my"
  ],
  "currency": [
    "MYR"
  ],
  "callingCode": [
    "60"
  ],
  "capital": "Kuala Lumpur",
  "altSpellings": [
    "MY"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "eng": "English",
    "msa": "Malay"
  },
  "translations": {
    "deu": {
      "official": "Malaysia",
      "common": "Malaysia"
    },
    "fra": {
      "official": "Fédération de Malaisie",
      "common": "Malaisie"
    },
    "hrv": {
      "official": "Malezija",
      "common": "Malezija"
    },
    "ita": {
      "official": "Malaysia",
      "common": "Malesia"
    },
    "jpn": {
      "official": "マレーシア",
      "common": "マレーシア"
    },
    "nld": {
      "official": "Maleisië",
      "common": "Maleisië"
    },
    "por": {
      "official": "Malásia",
      "common": "Malásia"
    },
    "rus": {
      "official": "Малайзия",
      "common": "Малайзия"
    },
    "spa": {
      "official": "Malasia",
      "common": "Malasia"
    },
    "fin": {
      "official": "Malesia",
      "common": "Malesia"
    }
  },
  "latlng": [
    2.5,
    112.5
  ],
  "demonym": "Malaysian",
  "landlocked": false,
  "borders": [
    "BRN",
    "IDN",
    "THA"
  ],
  "area": 330803,
  "codes": {
    "cca2": "MY",
    "ccn3": "458",
    "cca3": "MYS",
    "cioc": "MAS"
  },
  "provinces": [
    "Johor",
    "Kedah",
    "Kelantan",
    "Labuan",
    "Melaka",
    "Negeri Sembilan",
    "Pahang",
    "Perak",
    "Perlis",
    "Pulau Pinang",
    "Sabah",
    "Sarawak",
    "Selangor",
    "Terengganu",
    "Wilayah Persekutuan"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MYS",
        "properties": {
          "name": "Malaysia"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  101.075516,
                  6.204867
                ],
                [
                  101.154219,
                  5.691384
                ],
                [
                  101.814282,
                  5.810808
                ],
                [
                  102.141187,
                  6.221636
                ],
                [
                  102.371147,
                  6.128205
                ],
                [
                  102.961705,
                  5.524495
                ],
                [
                  103.381215,
                  4.855001
                ],
                [
                  103.438575,
                  4.181606
                ],
                [
                  103.332122,
                  3.726698
                ],
                [
                  103.429429,
                  3.382869
                ],
                [
                  103.502448,
                  2.791019
                ],
                [
                  103.854674,
                  2.515454
                ],
                [
                  104.247932,
                  1.631141
                ],
                [
                  104.228811,
                  1.293048
                ],
                [
                  103.519707,
                  1.226334
                ],
                [
                  102.573615,
                  1.967115
                ],
                [
                  101.390638,
                  2.760814
                ],
                [
                  101.27354,
                  3.270292
                ],
                [
                  100.695435,
                  3.93914
                ],
                [
                  100.557408,
                  4.76728
                ],
                [
                  100.196706,
                  5.312493
                ],
                [
                  100.30626,
                  6.040562
                ],
                [
                  100.085757,
                  6.464489
                ],
                [
                  100.259596,
                  6.642825
                ],
                [
                  101.075516,
                  6.204867
                ]
              ]
            ],
            [
              [
                [
                  118.618321,
                  4.478202
                ],
                [
                  117.882035,
                  4.137551
                ],
                [
                  117.015214,
                  4.306094
                ],
                [
                  115.865517,
                  4.306559
                ],
                [
                  115.519078,
                  3.169238
                ],
                [
                  115.134037,
                  2.821482
                ],
                [
                  114.621355,
                  1.430688
                ],
                [
                  113.80585,
                  1.217549
                ],
                [
                  112.859809,
                  1.49779
                ],
                [
                  112.380252,
                  1.410121
                ],
                [
                  111.797548,
                  0.904441
                ],
                [
                  111.159138,
                  0.976478
                ],
                [
                  110.514061,
                  0.773131
                ],
                [
                  109.830227,
                  1.338136
                ],
                [
                  109.66326,
                  2.006467
                ],
                [
                  110.396135,
                  1.663775
                ],
                [
                  111.168853,
                  1.850637
                ],
                [
                  111.370081,
                  2.697303
                ],
                [
                  111.796928,
                  2.885897
                ],
                [
                  112.995615,
                  3.102395
                ],
                [
                  113.712935,
                  3.893509
                ],
                [
                  114.204017,
                  4.525874
                ],
                [
                  114.659596,
                  4.007637
                ],
                [
                  114.869557,
                  4.348314
                ],
                [
                  115.347461,
                  4.316636
                ],
                [
                  115.4057,
                  4.955228
                ],
                [
                  115.45071,
                  5.44773
                ],
                [
                  116.220741,
                  6.143191
                ],
                [
                  116.725103,
                  6.924771
                ],
                [
                  117.129626,
                  6.928053
                ],
                [
                  117.643393,
                  6.422166
                ],
                [
                  117.689075,
                  5.98749
                ],
                [
                  118.347691,
                  5.708696
                ],
                [
                  119.181904,
                  5.407836
                ],
                [
                  119.110694,
                  5.016128
                ],
                [
                  118.439727,
                  4.966519
                ],
                [
                  118.618321,
                  4.478202
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],133:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Maldives",
    "official": "Republic of the Maldives",
    "native": {
      "div": {
        "official": "ދިވެހިރާއްޖޭގެ ޖުމްހޫރިއްޔާ",
        "common": "ދިވެހިރާއްޖޭގެ"
      }
    }
  },
  "tld": [
    ".mv"
  ],
  "currency": [
    "MVR"
  ],
  "callingCode": [
    "960"
  ],
  "capital": "Malé",
  "altSpellings": [
    "MV",
    "Maldive Islands",
    "Republic of the Maldives",
    "Dhivehi Raajjeyge Jumhooriyya"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "div": "Maldivian"
  },
  "translations": {
    "deu": {
      "official": "Republik Malediven",
      "common": "Malediven"
    },
    "fra": {
      "official": "République des Maldives",
      "common": "Maldives"
    },
    "hrv": {
      "official": "Republika Maldivi",
      "common": "Maldivi"
    },
    "ita": {
      "official": "Repubblica delle Maldive",
      "common": "Maldive"
    },
    "jpn": {
      "official": "モルディブ共和国",
      "common": "モルディブ"
    },
    "nld": {
      "official": "Republiek van de Malediven",
      "common": "Maldiven"
    },
    "por": {
      "official": "República das Maldivas",
      "common": "Maldivas"
    },
    "rus": {
      "official": "Республика Мальдивы",
      "common": "Мальдивы"
    },
    "spa": {
      "official": "República de las Maldivas",
      "common": "Maldivas"
    },
    "fin": {
      "official": "Malediivien tasavalta",
      "common": "Malediivit"
    }
  },
  "latlng": [
    3.25,
    73
  ],
  "demonym": "Maldivan",
  "landlocked": false,
  "borders": [],
  "area": 300,
  "codes": {
    "cca2": "MV",
    "ccn3": "462",
    "cca3": "MDV",
    "cioc": "MDV"
  },
  "provinces": [
    "Alifu",
    "Baa",
    "Dhaalu",
    "Faafu",
    "Gaafu Alifu",
    "Gaafu Dhaalu",
    "Gnaviyani",
    "Haa Alifu",
    "Haa Dhaalu",
    "Kaafu",
    "Laamu",
    "Lhaviyani",
    "Maale",
    "Meemu",
    "Noonu",
    "Raa",
    "Seenu",
    "Shaviyani",
    "Thaa",
    "Vaavu"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],134:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mali",
    "official": "Republic of Mali",
    "native": {
      "fra": {
        "official": "République du Mali",
        "common": "Mali"
      }
    }
  },
  "tld": [
    ".ml"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "223"
  ],
  "capital": "Bamako",
  "altSpellings": [
    "ML",
    "Republic of Mali",
    "République du Mali"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Mali",
      "common": "Mali"
    },
    "fra": {
      "official": "République du Mali",
      "common": "Mali"
    },
    "hrv": {
      "official": "Republika Mali",
      "common": "Mali"
    },
    "ita": {
      "official": "Repubblica del Mali",
      "common": "Mali"
    },
    "jpn": {
      "official": "マリ共和国",
      "common": "マリ"
    },
    "nld": {
      "official": "Republiek Mali",
      "common": "Mali"
    },
    "por": {
      "official": "República do Mali",
      "common": "Mali"
    },
    "rus": {
      "official": "Республика Мали",
      "common": "Мали"
    },
    "spa": {
      "official": "República de Malí",
      "common": "Mali"
    },
    "fin": {
      "official": "Malin tasavalta",
      "common": "Mali"
    }
  },
  "latlng": [
    17,
    -4
  ],
  "demonym": "Malian",
  "landlocked": true,
  "borders": [
    "DZA",
    "BFA",
    "GIN",
    "CIV",
    "MRT",
    "NER",
    "SEN"
  ],
  "area": 1240192,
  "codes": {
    "cca2": "ML",
    "ccn3": "466",
    "cca3": "MLI",
    "cioc": "MLI"
  },
  "provinces": [
    "Gao",
    "Kayes",
    "Kidal",
    "Koulikoro",
    "Mopti",
    "Segou",
    "Sikasso",
    "Tombouctou"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MLI",
        "properties": {
          "name": "Mali"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -12.17075,
                14.616834
              ],
              [
                -11.834208,
                14.799097
              ],
              [
                -11.666078,
                15.388208
              ],
              [
                -11.349095,
                15.411256
              ],
              [
                -10.650791,
                15.132746
              ],
              [
                -10.086846,
                15.330486
              ],
              [
                -9.700255,
                15.264107
              ],
              [
                -9.550238,
                15.486497
              ],
              [
                -5.537744,
                15.50169
              ],
              [
                -5.315277,
                16.201854
              ],
              [
                -5.488523,
                16.325102
              ],
              [
                -5.971129,
                20.640833
              ],
              [
                -6.453787,
                24.956591
              ],
              [
                -4.923337,
                24.974574
              ],
              [
                -1.550055,
                22.792666
              ],
              [
                1.823228,
                20.610809
              ],
              [
                2.060991,
                20.142233
              ],
              [
                2.683588,
                19.85623
              ],
              [
                3.146661,
                19.693579
              ],
              [
                3.158133,
                19.057364
              ],
              [
                4.267419,
                19.155265
              ],
              [
                4.27021,
                16.852227
              ],
              [
                3.723422,
                16.184284
              ],
              [
                3.638259,
                15.56812
              ],
              [
                2.749993,
                15.409525
              ],
              [
                1.385528,
                15.323561
              ],
              [
                1.015783,
                14.968182
              ],
              [
                0.374892,
                14.928908
              ],
              [
                -0.266257,
                14.924309
              ],
              [
                -0.515854,
                15.116158
              ],
              [
                -1.066363,
                14.973815
              ],
              [
                -2.001035,
                14.559008
              ],
              [
                -2.191825,
                14.246418
              ],
              [
                -2.967694,
                13.79815
              ],
              [
                -3.103707,
                13.541267
              ],
              [
                -3.522803,
                13.337662
              ],
              [
                -4.006391,
                13.472485
              ],
              [
                -4.280405,
                13.228444
              ],
              [
                -4.427166,
                12.542646
              ],
              [
                -5.220942,
                11.713859
              ],
              [
                -5.197843,
                11.375146
              ],
              [
                -5.470565,
                10.95127
              ],
              [
                -5.404342,
                10.370737
              ],
              [
                -5.816926,
                10.222555
              ],
              [
                -6.050452,
                10.096361
              ],
              [
                -6.205223,
                10.524061
              ],
              [
                -6.493965,
                10.411303
              ],
              [
                -6.666461,
                10.430811
              ],
              [
                -6.850507,
                10.138994
              ],
              [
                -7.622759,
                10.147236
              ],
              [
                -7.89959,
                10.297382
              ],
              [
                -8.029944,
                10.206535
              ],
              [
                -8.335377,
                10.494812
              ],
              [
                -8.282357,
                10.792597
              ],
              [
                -8.407311,
                10.909257
              ],
              [
                -8.620321,
                10.810891
              ],
              [
                -8.581305,
                11.136246
              ],
              [
                -8.376305,
                11.393646
              ],
              [
                -8.786099,
                11.812561
              ],
              [
                -8.905265,
                12.088358
              ],
              [
                -9.127474,
                12.30806
              ],
              [
                -9.327616,
                12.334286
              ],
              [
                -9.567912,
                12.194243
              ],
              [
                -9.890993,
                12.060479
              ],
              [
                -10.165214,
                11.844084
              ],
              [
                -10.593224,
                11.923975
              ],
              [
                -10.87083,
                12.177887
              ],
              [
                -11.036556,
                12.211245
              ],
              [
                -11.297574,
                12.077971
              ],
              [
                -11.456169,
                12.076834
              ],
              [
                -11.513943,
                12.442988
              ],
              [
                -11.467899,
                12.754519
              ],
              [
                -11.553398,
                13.141214
              ],
              [
                -11.927716,
                13.422075
              ],
              [
                -12.124887,
                13.994727
              ],
              [
                -12.17075,
                14.616834
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],135:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Malta",
    "official": "Republic of Malta",
    "native": {
      "eng": {
        "official": "Republic of Malta",
        "common": "Malta"
      },
      "mlt": {
        "official": "Repubblika ta ' Malta",
        "common": "Malta"
      }
    }
  },
  "tld": [
    ".mt"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "356"
  ],
  "capital": "Valletta",
  "altSpellings": [
    "MT",
    "Republic of Malta",
    "Repubblika ta' Malta"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "eng": "English",
    "mlt": "Maltese"
  },
  "translations": {
    "deu": {
      "official": "Republik Malta",
      "common": "Malta"
    },
    "fra": {
      "official": "République de Malte",
      "common": "Malte"
    },
    "hrv": {
      "official": "Republika Malta",
      "common": "Malta"
    },
    "ita": {
      "official": "Repubblica di Malta",
      "common": "Malta"
    },
    "jpn": {
      "official": "マルタ共和国",
      "common": "マルタ"
    },
    "nld": {
      "official": "Republiek Malta",
      "common": "Malta"
    },
    "por": {
      "official": "República de Malta",
      "common": "Malta"
    },
    "rus": {
      "official": "Республика Мальта",
      "common": "Мальта"
    },
    "spa": {
      "official": "República de Malta",
      "common": "Malta"
    },
    "fin": {
      "official": "Maltan tasavalta",
      "common": "Malta"
    }
  },
  "latlng": [
    35.83333333,
    14.58333333
  ],
  "demonym": "Maltese",
  "landlocked": false,
  "borders": [],
  "area": 316,
  "codes": {
    "cca2": "MT",
    "ccn3": "470",
    "cca3": "MLT",
    "cioc": "MLT"
  },
  "provinces": [
    "Valletta"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MLT",
        "properties": {
          "name": "Malta"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  14.566171,
                  35.852721
                ],
                [
                  14.532684,
                  35.820191
                ],
                [
                  14.436463,
                  35.821664
                ],
                [
                  14.352334,
                  35.872281
                ],
                [
                  14.3513,
                  35.978399
                ],
                [
                  14.448348,
                  35.957444
                ],
                [
                  14.537025,
                  35.886285
                ],
                [
                  14.566171,
                  35.852721
                ]
              ]
            ],
            [
              [
                [
                  14.313473,
                  36.027569
                ],
                [
                  14.253632,
                  36.012143
                ],
                [
                  14.194204,
                  36.042245
                ],
                [
                  14.180354,
                  36.060383
                ],
                [
                  14.263243,
                  36.075809
                ],
                [
                  14.303758,
                  36.062295
                ],
                [
                  14.320914,
                  36.03625
                ],
                [
                  14.313473,
                  36.027569
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],136:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Marshall Islands",
    "official": "Republic of the Marshall Islands",
    "native": {
      "eng": {
        "official": "Republic of the Marshall Islands",
        "common": "Marshall Islands"
      },
      "mah": {
        "official": "Republic of the Marshall Islands",
        "common": "M̧ajeļ"
      }
    }
  },
  "tld": [
    ".mh"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "692"
  ],
  "capital": "Majuro",
  "altSpellings": [
    "MH",
    "Republic of the Marshall Islands",
    "Aolepān Aorōkin M̧ajeļ"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "eng": "English",
    "mah": "Marshallese"
  },
  "translations": {
    "deu": {
      "official": "Republik der Marshall-Inseln",
      "common": "Marshallinseln"
    },
    "fra": {
      "official": "République des Îles Marshall",
      "common": "Îles Marshall"
    },
    "hrv": {
      "official": "Republika Maršalovi Otoci",
      "common": "Maršalovi Otoci"
    },
    "ita": {
      "official": "Repubblica delle Isole Marshall",
      "common": "Isole Marshall"
    },
    "jpn": {
      "official": "マーシャル諸島共和国",
      "common": "マーシャル諸島"
    },
    "nld": {
      "official": "Republiek van de Marshall-eilanden",
      "common": "Marshalleilanden"
    },
    "por": {
      "official": "República das Ilhas Marshall",
      "common": "Ilhas Marshall"
    },
    "rus": {
      "official": "Республика Маршалловы острова",
      "common": "Маршалловы Острова"
    },
    "spa": {
      "official": "República de las Islas Marshall",
      "common": "Islas Marshall"
    },
    "fin": {
      "official": "Marshallinsaarten tasavalta",
      "common": "Marshallinsaaret"
    }
  },
  "latlng": [
    9,
    168
  ],
  "demonym": "Marshallese",
  "landlocked": false,
  "borders": [],
  "area": 181,
  "codes": {
    "cca2": "MH",
    "ccn3": "584",
    "cca3": "MHL",
    "cioc": "MHL"
  },
  "provinces": [
    "Ailinginae",
    "Ailinglaplap",
    "Ailuk",
    "Arno",
    "Aur",
    "Bikar",
    "Bikini",
    "Bokak",
    "Ebon",
    "Enewetak",
    "Erikub",
    "Jabat",
    "Jaluit",
    "Jemo",
    "Kili",
    "Kwajalein",
    "Lae",
    "Lib",
    "Likiep",
    "Majuro",
    "Maloelap",
    "Mejit",
    "Mili",
    "Namorik",
    "Namu",
    "Rongelap",
    "Rongrik",
    "Toke",
    "Ujae",
    "Ujelang",
    "Utirik",
    "Wotho",
    "Wotje"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],137:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Martinique",
    "official": "Martinique",
    "native": {
      "fra": {
        "official": "Martinique",
        "common": "Martinique"
      }
    }
  },
  "tld": [
    ".mq"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "596"
  ],
  "capital": "Fort-de-France",
  "altSpellings": [
    "MQ"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "fra": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "hrv": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "ita": {
      "official": "Martinique",
      "common": "Martinica"
    },
    "jpn": {
      "official": "マルティニーク島",
      "common": "マルティニーク"
    },
    "nld": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "por": {
      "official": "Martinique",
      "common": "Martinica"
    },
    "rus": {
      "official": "Мартиника",
      "common": "Мартиника"
    },
    "spa": {
      "official": "Martinica",
      "common": "Martinica"
    },
    "fin": {
      "official": "Martinique",
      "common": "Martinique"
    }
  },
  "latlng": [
    14.666667,
    -61
  ],
  "demonym": "French",
  "landlocked": false,
  "borders": [],
  "area": 1128,
  "codes": {
    "cca2": "MQ",
    "ccn3": "474",
    "cca3": "MTQ",
    "cioc": ""
  },
  "provinces": [
    "Martinique"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],138:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mauritania",
    "official": "Islamic Republic of Mauritania",
    "native": {
      "ara": {
        "official": "الجمهورية الإسلامية الموريتانية",
        "common": "موريتانيا"
      }
    }
  },
  "tld": [
    ".mr"
  ],
  "currency": [
    "MRO"
  ],
  "callingCode": [
    "222"
  ],
  "capital": "Nouakchott",
  "altSpellings": [
    "MR",
    "Islamic Republic of Mauritania",
    "al-Jumhūriyyah al-ʾIslāmiyyah al-Mūrītāniyyah"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Islamische Republik Mauretanien",
      "common": "Mauretanien"
    },
    "fra": {
      "official": "République islamique de Mauritanie",
      "common": "Mauritanie"
    },
    "hrv": {
      "official": "Islamska Republika Mauritanija",
      "common": "Mauritanija"
    },
    "ita": {
      "official": "Repubblica islamica di Mauritania",
      "common": "Mauritania"
    },
    "jpn": {
      "official": "モーリタニア·イスラム共和国",
      "common": "モーリタニア"
    },
    "nld": {
      "official": "Islamitische Republiek Mauritanië",
      "common": "Mauritanië"
    },
    "por": {
      "official": "República Islâmica da Mauritânia",
      "common": "Mauritânia"
    },
    "rus": {
      "official": "Исламская Республика Мавритания",
      "common": "Мавритания"
    },
    "spa": {
      "official": "República Islámica de Mauritania",
      "common": "Mauritania"
    },
    "fin": {
      "official": "Mauritanian islamilainen tasavalta",
      "common": "Mauritania"
    }
  },
  "latlng": [
    20,
    -12
  ],
  "demonym": "Mauritanian",
  "landlocked": false,
  "borders": [
    "DZA",
    "MLI",
    "SEN",
    "ESH"
  ],
  "area": 1030700,
  "codes": {
    "cca2": "MR",
    "ccn3": "478",
    "cca3": "MRT",
    "cioc": "MTN"
  },
  "provinces": [
    "Adrar",
    "Assaba",
    "Brakna",
    "Dakhlet Nouadhibou",
    "Gorgol",
    "Guidimaka",
    "Hodh Ech Chargui",
    "Hodh El Gharbi",
    "Inchiri",
    "Nouakchott",
    "Tagant",
    "Tiris Zemmour",
    "Trarza"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MRT",
        "properties": {
          "name": "Mauritania"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -12.17075,
                14.616834
              ],
              [
                -12.830658,
                15.303692
              ],
              [
                -13.435738,
                16.039383
              ],
              [
                -14.099521,
                16.304302
              ],
              [
                -14.577348,
                16.598264
              ],
              [
                -15.135737,
                16.587282
              ],
              [
                -15.623666,
                16.369337
              ],
              [
                -16.12069,
                16.455663
              ],
              [
                -16.463098,
                16.135036
              ],
              [
                -16.549708,
                16.673892
              ],
              [
                -16.270552,
                17.166963
              ],
              [
                -16.146347,
                18.108482
              ],
              [
                -16.256883,
                19.096716
              ],
              [
                -16.377651,
                19.593817
              ],
              [
                -16.277838,
                20.092521
              ],
              [
                -16.536324,
                20.567866
              ],
              [
                -17.063423,
                20.999752
              ],
              [
                -16.845194,
                21.333323
              ],
              [
                -12.929102,
                21.327071
              ],
              [
                -13.118754,
                22.77122
              ],
              [
                -12.874222,
                23.284832
              ],
              [
                -11.937224,
                23.374594
              ],
              [
                -11.969419,
                25.933353
              ],
              [
                -8.687294,
                25.881056
              ],
              [
                -8.6844,
                27.395744
              ],
              [
                -4.923337,
                24.974574
              ],
              [
                -6.453787,
                24.956591
              ],
              [
                -5.971129,
                20.640833
              ],
              [
                -5.488523,
                16.325102
              ],
              [
                -5.315277,
                16.201854
              ],
              [
                -5.537744,
                15.50169
              ],
              [
                -9.550238,
                15.486497
              ],
              [
                -9.700255,
                15.264107
              ],
              [
                -10.086846,
                15.330486
              ],
              [
                -10.650791,
                15.132746
              ],
              [
                -11.349095,
                15.411256
              ],
              [
                -11.666078,
                15.388208
              ],
              [
                -11.834208,
                14.799097
              ],
              [
                -12.17075,
                14.616834
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],139:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mauritius",
    "official": "Republic of Mauritius",
    "native": {
      "eng": {
        "official": "Republic of Mauritius",
        "common": "Mauritius"
      },
      "fra": {
        "official": "République de Maurice",
        "common": "Maurice"
      },
      "mfe": {
        "official": "Republik Moris",
        "common": "Moris"
      }
    }
  },
  "tld": [
    ".mu"
  ],
  "currency": [
    "MUR"
  ],
  "callingCode": [
    "230"
  ],
  "capital": "Port Louis",
  "altSpellings": [
    "MU",
    "Republic of Mauritius",
    "République de Maurice"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English",
    "fra": "French",
    "mfe": "Mauritian Creole"
  },
  "translations": {
    "deu": {
      "official": "Republik Mauritius",
      "common": "Mauritius"
    },
    "fra": {
      "official": "République de Maurice",
      "common": "Île Maurice"
    },
    "hrv": {
      "official": "Republika Mauricijus",
      "common": "Mauricijus"
    },
    "ita": {
      "official": "Repubblica di Mauritius",
      "common": "Mauritius"
    },
    "jpn": {
      "official": "モーリシャス共和国",
      "common": "モーリシャス"
    },
    "nld": {
      "official": "Republiek Mauritius",
      "common": "Mauritius"
    },
    "por": {
      "official": "República das Maurícias",
      "common": "Maurício"
    },
    "rus": {
      "official": "Республика Маврикий",
      "common": "Маврикий"
    },
    "spa": {
      "official": "República de Mauricio",
      "common": "Mauricio"
    },
    "fin": {
      "official": "Mauritiuksen tasavalta",
      "common": "Mauritius"
    }
  },
  "latlng": [
    -20.28333333,
    57.55
  ],
  "demonym": "Mauritian",
  "landlocked": false,
  "borders": [],
  "area": 2040,
  "codes": {
    "cca2": "MU",
    "ccn3": "480",
    "cca3": "MUS",
    "cioc": "MRI"
  },
  "provinces": [
    "Agalega Islands",
    "Black River",
    "Cargados Carajos Shoals",
    "Flacq",
    "Grand Port",
    "Moka",
    "Pamplemousses",
    "Plaines Wilhems",
    "Port Louis",
    "Riviere du Rempart",
    "Rodrigues",
    "Savanne"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],140:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mayotte",
    "official": "Department of Mayotte",
    "native": {
      "fra": {
        "official": "Département de Mayotte",
        "common": "Mayotte"
      }
    }
  },
  "tld": [
    ".yt"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "262"
  ],
  "capital": "Mamoudzou",
  "altSpellings": [
    "YT",
    "Department of Mayotte",
    "Département de Mayotte"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Übersee-Département Mayotte",
      "common": "Mayotte"
    },
    "fra": {
      "official": "Département de Mayotte",
      "common": "Mayotte"
    },
    "hrv": {
      "official": "Odjel Mayotte",
      "common": "Mayotte"
    },
    "ita": {
      "official": "Dipartimento di Mayotte",
      "common": "Mayotte"
    },
    "jpn": {
      "official": "マヨット科",
      "common": "マヨット"
    },
    "nld": {
      "official": "Afdeling Mayotte",
      "common": "Mayotte"
    },
    "por": {
      "official": "Departamento de Mayotte",
      "common": "Mayotte"
    },
    "rus": {
      "official": "Департамент Майотта",
      "common": "Майотта"
    },
    "spa": {
      "official": "Departamento de Mayotte",
      "common": "Mayotte"
    },
    "fin": {
      "official": "Mayotte",
      "common": "Mayotte"
    }
  },
  "latlng": [
    -12.83333333,
    45.16666666
  ],
  "demonym": "Mahoran",
  "landlocked": false,
  "borders": [],
  "area": 374,
  "codes": {
    "cca2": "YT",
    "ccn3": "175",
    "cca3": "MYT",
    "cioc": ""
  },
  "provinces": [
    "Mayotte"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],141:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mexico",
    "official": "United Mexican States",
    "native": {
      "spa": {
        "official": "Estados Unidos Mexicanos",
        "common": "México"
      }
    }
  },
  "tld": [
    ".mx"
  ],
  "currency": [
    "MXN"
  ],
  "callingCode": [
    "52"
  ],
  "capital": "Mexico City",
  "altSpellings": [
    "MX",
    "Mexicanos",
    "United Mexican States",
    "Estados Unidos Mexicanos"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Vereinigte Mexikanische Staaten",
      "common": "Mexiko"
    },
    "fra": {
      "official": "États-Unis du Mexique",
      "common": "Mexique"
    },
    "hrv": {
      "official": "Sjedinjene Meksičke Države",
      "common": "Meksiko"
    },
    "ita": {
      "official": "Stati Uniti del Messico",
      "common": "Messico"
    },
    "jpn": {
      "official": "メキシコ合衆国",
      "common": "メキシコ"
    },
    "nld": {
      "official": "Verenigde Mexicaanse Staten",
      "common": "Mexico"
    },
    "por": {
      "official": "Estados Unidos Mexicanos",
      "common": "México"
    },
    "rus": {
      "official": "Мексиканских Соединенных Штатов",
      "common": "Мексика"
    },
    "spa": {
      "official": "Estados Unidos Mexicanos",
      "common": "México"
    },
    "fin": {
      "official": "Meksikon yhdysvallat",
      "common": "Meksiko"
    }
  },
  "latlng": [
    23,
    -102
  ],
  "demonym": "Mexican",
  "landlocked": false,
  "borders": [
    "BLZ",
    "GTM",
    "USA"
  ],
  "area": 1964375,
  "codes": {
    "cca2": "MX",
    "ccn3": "484",
    "cca3": "MEX",
    "cioc": "MEX"
  },
  "provinces": [
    "Aguascalientes",
    "Baja California",
    "Baja California Sur",
    "Campeche",
    "Chiapas",
    "Chihuahua",
    "Coahuila de Zaragoza",
    "Colima",
    "Distrito Federal",
    "Durango",
    "Guanajuato",
    "Guerrero",
    "Hidalgo",
    "Jalisco",
    "Mexico",
    "Michoacan de Ocampo",
    "Morelos",
    "Nayarit",
    "Nuevo Leon",
    "Oaxaca",
    "Puebla",
    "Queretaro de Arteaga",
    "Quintana Roo",
    "San Luis Potosi",
    "Sinaloa",
    "Sonora",
    "Tabasco",
    "Tamaulipas",
    "Tlaxcala",
    "Veracruz-Llave",
    "Yucatan",
    "Zacatecas"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MEX",
        "properties": {
          "name": "Mexico"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -97.140008,
                25.869997
              ],
              [
                -97.528072,
                24.992144
              ],
              [
                -97.702946,
                24.272343
              ],
              [
                -97.776042,
                22.93258
              ],
              [
                -97.872367,
                22.444212
              ],
              [
                -97.699044,
                21.898689
              ],
              [
                -97.38896,
                21.411019
              ],
              [
                -97.189333,
                20.635433
              ],
              [
                -96.525576,
                19.890931
              ],
              [
                -96.292127,
                19.320371
              ],
              [
                -95.900885,
                18.828024
              ],
              [
                -94.839063,
                18.562717
              ],
              [
                -94.42573,
                18.144371
              ],
              [
                -93.548651,
                18.423837
              ],
              [
                -92.786114,
                18.524839
              ],
              [
                -92.037348,
                18.704569
              ],
              [
                -91.407903,
                18.876083
              ],
              [
                -90.77187,
                19.28412
              ],
              [
                -90.53359,
                19.867418
              ],
              [
                -90.451476,
                20.707522
              ],
              [
                -90.278618,
                20.999855
              ],
              [
                -89.601321,
                21.261726
              ],
              [
                -88.543866,
                21.493675
              ],
              [
                -87.658417,
                21.458846
              ],
              [
                -87.05189,
                21.543543
              ],
              [
                -86.811982,
                21.331515
              ],
              [
                -86.845908,
                20.849865
              ],
              [
                -87.383291,
                20.255405
              ],
              [
                -87.621054,
                19.646553
              ],
              [
                -87.43675,
                19.472403
              ],
              [
                -87.58656,
                19.04013
              ],
              [
                -87.837191,
                18.259816
              ],
              [
                -88.090664,
                18.516648
              ],
              [
                -88.300031,
                18.499982
              ],
              [
                -88.490123,
                18.486831
              ],
              [
                -88.848344,
                17.883198
              ],
              [
                -89.029857,
                18.001511
              ],
              [
                -89.150909,
                17.955468
              ],
              [
                -89.14308,
                17.808319
              ],
              [
                -90.067934,
                17.819326
              ],
              [
                -91.00152,
                17.817595
              ],
              [
                -91.002269,
                17.254658
              ],
              [
                -91.453921,
                17.252177
              ],
              [
                -91.08167,
                16.918477
              ],
              [
                -90.711822,
                16.687483
              ],
              [
                -90.600847,
                16.470778
              ],
              [
                -90.438867,
                16.41011
              ],
              [
                -90.464473,
                16.069562
              ],
              [
                -91.74796,
                16.066565
              ],
              [
                -92.229249,
                15.251447
              ],
              [
                -92.087216,
                15.064585
              ],
              [
                -92.20323,
                14.830103
              ],
              [
                -92.22775,
                14.538829
              ],
              [
                -93.359464,
                15.61543
              ],
              [
                -93.875169,
                15.940164
              ],
              [
                -94.691656,
                16.200975
              ],
              [
                -95.250227,
                16.128318
              ],
              [
                -96.053382,
                15.752088
              ],
              [
                -96.557434,
                15.653515
              ],
              [
                -97.263592,
                15.917065
              ],
              [
                -98.01303,
                16.107312
              ],
              [
                -98.947676,
                16.566043
              ],
              [
                -99.697397,
                16.706164
              ],
              [
                -100.829499,
                17.171071
              ],
              [
                -101.666089,
                17.649026
              ],
              [
                -101.918528,
                17.91609
              ],
              [
                -102.478132,
                17.975751
              ],
              [
                -103.50099,
                18.292295
              ],
              [
                -103.917527,
                18.748572
              ],
              [
                -104.99201,
                19.316134
              ],
              [
                -105.493038,
                19.946767
              ],
              [
                -105.731396,
                20.434102
              ],
              [
                -105.397773,
                20.531719
              ],
              [
                -105.500661,
                20.816895
              ],
              [
                -105.270752,
                21.076285
              ],
              [
                -105.265817,
                21.422104
              ],
              [
                -105.603161,
                21.871146
              ],
              [
                -105.693414,
                22.26908
              ],
              [
                -106.028716,
                22.773752
              ],
              [
                -106.90998,
                23.767774
              ],
              [
                -107.915449,
                24.548915
              ],
              [
                -108.401905,
                25.172314
              ],
              [
                -109.260199,
                25.580609
              ],
              [
                -109.444089,
                25.824884
              ],
              [
                -109.291644,
                26.442934
              ],
              [
                -109.801458,
                26.676176
              ],
              [
                -110.391732,
                27.162115
              ],
              [
                -110.641019,
                27.859876
              ],
              [
                -111.178919,
                27.941241
              ],
              [
                -111.759607,
                28.467953
              ],
              [
                -112.228235,
                28.954409
              ],
              [
                -112.271824,
                29.266844
              ],
              [
                -112.809594,
                30.021114
              ],
              [
                -113.163811,
                30.786881
              ],
              [
                -113.148669,
                31.170966
              ],
              [
                -113.871881,
                31.567608
              ],
              [
                -114.205737,
                31.524045
              ],
              [
                -114.776451,
                31.799532
              ],
              [
                -114.9367,
                31.393485
              ],
              [
                -114.771232,
                30.913617
              ],
              [
                -114.673899,
                30.162681
              ],
              [
                -114.330974,
                29.750432
              ],
              [
                -113.588875,
                29.061611
              ],
              [
                -113.424053,
                28.826174
              ],
              [
                -113.271969,
                28.754783
              ],
              [
                -113.140039,
                28.411289
              ],
              [
                -112.962298,
                28.42519
              ],
              [
                -112.761587,
                27.780217
              ],
              [
                -112.457911,
                27.525814
              ],
              [
                -112.244952,
                27.171727
              ],
              [
                -111.616489,
                26.662817
              ],
              [
                -111.284675,
                25.73259
              ],
              [
                -110.987819,
                25.294606
              ],
              [
                -110.710007,
                24.826004
              ],
              [
                -110.655049,
                24.298595
              ],
              [
                -110.172856,
                24.265548
              ],
              [
                -109.771847,
                23.811183
              ],
              [
                -109.409104,
                23.364672
              ],
              [
                -109.433392,
                23.185588
              ],
              [
                -109.854219,
                22.818272
              ],
              [
                -110.031392,
                22.823078
              ],
              [
                -110.295071,
                23.430973
              ],
              [
                -110.949501,
                24.000964
              ],
              [
                -111.670568,
                24.484423
              ],
              [
                -112.182036,
                24.738413
              ],
              [
                -112.148989,
                25.470125
              ],
              [
                -112.300711,
                26.012004
              ],
              [
                -112.777297,
                26.32196
              ],
              [
                -113.464671,
                26.768186
              ],
              [
                -113.59673,
                26.63946
              ],
              [
                -113.848937,
                26.900064
              ],
              [
                -114.465747,
                27.14209
              ],
              [
                -115.055142,
                27.722727
              ],
              [
                -114.982253,
                27.7982
              ],
              [
                -114.570366,
                27.741485
              ],
              [
                -114.199329,
                28.115003
              ],
              [
                -114.162018,
                28.566112
              ],
              [
                -114.931842,
                29.279479
              ],
              [
                -115.518654,
                29.556362
              ],
              [
                -115.887365,
                30.180794
              ],
              [
                -116.25835,
                30.836464
              ],
              [
                -116.721526,
                31.635744
              ],
              [
                -117.12776,
                32.53534
              ],
              [
                -115.99135,
                32.61239
              ],
              [
                -114.72139,
                32.72083
              ],
              [
                -114.815,
                32.52528
              ],
              [
                -113.30498,
                32.03914
              ],
              [
                -111.02361,
                31.33472
              ],
              [
                -109.035,
                31.34194
              ],
              [
                -108.24194,
                31.34222
              ],
              [
                -108.24,
                31.754854
              ],
              [
                -106.50759,
                31.75452
              ],
              [
                -106.1429,
                31.39995
              ],
              [
                -105.63159,
                31.08383
              ],
              [
                -105.03737,
                30.64402
              ],
              [
                -104.70575,
                30.12173
              ],
              [
                -104.45697,
                29.57196
              ],
              [
                -103.94,
                29.27
              ],
              [
                -103.11,
                28.97
              ],
              [
                -102.48,
                29.76
              ],
              [
                -101.6624,
                29.7793
              ],
              [
                -100.9576,
                29.38071
              ],
              [
                -100.45584,
                28.69612
              ],
              [
                -100.11,
                28.11
              ],
              [
                -99.52,
                27.54
              ],
              [
                -99.3,
                26.84
              ],
              [
                -99.02,
                26.37
              ],
              [
                -98.24,
                26.06
              ],
              [
                -97.53,
                25.84
              ],
              [
                -97.140008,
                25.869997
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],142:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Micronesia",
    "official": "Federated States of Micronesia",
    "native": {
      "eng": {
        "official": "Federated States of Micronesia",
        "common": "Micronesia"
      }
    }
  },
  "tld": [
    ".fm"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "691"
  ],
  "capital": "Palikir",
  "altSpellings": [
    "FM",
    "Federated States of Micronesia",
    "Micronesia, Federated States of"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Föderierte Staaten von Mikronesien",
      "common": "Mikronesien"
    },
    "fra": {
      "official": "États fédérés de Micronésie",
      "common": "Micronésie"
    },
    "hrv": {
      "official": "Savezne Države Mikronezije",
      "common": "Mikronezija"
    },
    "ita": {
      "official": "Stati federati di Micronesia",
      "common": "Micronesia"
    },
    "jpn": {
      "official": "ミクロネシア連邦",
      "common": "ミクロネシア連邦"
    },
    "nld": {
      "official": "Federale Staten van Micronesia",
      "common": "Micronesië"
    },
    "por": {
      "official": "Estados Federados da Micronésia",
      "common": "Micronésia"
    },
    "rus": {
      "official": "Федеративные Штаты Микронезии",
      "common": "Федеративные Штаты Микронезии"
    },
    "spa": {
      "official": "Estados Federados de Micronesia",
      "common": "Micronesia"
    },
    "fin": {
      "official": "Mikronesian liittovaltio",
      "common": "Mikronesia"
    }
  },
  "latlng": [
    6.91666666,
    158.25
  ],
  "demonym": "Micronesian",
  "landlocked": false,
  "borders": [],
  "area": 702,
  "codes": {
    "cca2": "FM",
    "ccn3": "583",
    "cca3": "FSM",
    "cioc": "FSM"
  }
}
},{}],143:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Moldova",
    "official": "Republic of Moldova",
    "native": {
      "ron": {
        "official": "Republica Moldova",
        "common": "Moldova"
      }
    }
  },
  "tld": [
    ".md"
  ],
  "currency": [
    "MDL"
  ],
  "callingCode": [
    "373"
  ],
  "capital": "Chișinău",
  "altSpellings": [
    "MD",
    "Moldova, Republic of",
    "Republic of Moldova",
    "Republica Moldova"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "ron": "Moldavian"
  },
  "translations": {
    "deu": {
      "official": "Republik Moldau",
      "common": "Moldawie"
    },
    "fra": {
      "official": "République de Moldavie",
      "common": "Moldavie"
    },
    "hrv": {
      "official": "Moldavija",
      "common": "Moldova"
    },
    "ita": {
      "official": "Repubblica di Moldova",
      "common": "Moldavia"
    },
    "jpn": {
      "official": "モルドバ共和国",
      "common": "モルドバ共和国"
    },
    "nld": {
      "official": "Republiek Moldavië",
      "common": "Moldavië"
    },
    "por": {
      "official": "República da Moldávia",
      "common": "Moldávia"
    },
    "rus": {
      "official": "Молдова",
      "common": "Молдавия"
    },
    "spa": {
      "official": "República de Moldova",
      "common": "Moldavia"
    },
    "fin": {
      "official": "Moldovan tasavalta",
      "common": "Moldova"
    }
  },
  "latlng": [
    47,
    29
  ],
  "demonym": "Moldovan",
  "landlocked": true,
  "borders": [
    "ROU",
    "UKR"
  ],
  "area": 33846,
  "codes": {
    "cca2": "MD",
    "ccn3": "498",
    "cca3": "MDA",
    "cioc": "MDA"
  },
  "provinces": [
    "Balti",
    "Cahul",
    "Chisinau",
    "Chisinau",
    "Dubasari",
    "Edinet",
    "Gagauzia",
    "Lapusna",
    "Orhei",
    "Soroca",
    "Tighina",
    "Ungheni"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MDA",
        "properties": {
          "name": "Moldova"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                26.619337,
                48.220726
              ],
              [
                26.857824,
                48.368211
              ],
              [
                27.522537,
                48.467119
              ],
              [
                28.259547,
                48.155562
              ],
              [
                28.670891,
                48.118149
              ],
              [
                29.122698,
                47.849095
              ],
              [
                29.050868,
                47.510227
              ],
              [
                29.415135,
                47.346645
              ],
              [
                29.559674,
                46.928583
              ],
              [
                29.908852,
                46.674361
              ],
              [
                29.83821,
                46.525326
              ],
              [
                30.024659,
                46.423937
              ],
              [
                29.759972,
                46.349988
              ],
              [
                29.170654,
                46.379262
              ],
              [
                29.072107,
                46.517678
              ],
              [
                28.862972,
                46.437889
              ],
              [
                28.933717,
                46.25883
              ],
              [
                28.659987,
                45.939987
              ],
              [
                28.485269,
                45.596907
              ],
              [
                28.233554,
                45.488283
              ],
              [
                28.054443,
                45.944586
              ],
              [
                28.160018,
                46.371563
              ],
              [
                28.12803,
                46.810476
              ],
              [
                27.551166,
                47.405117
              ],
              [
                27.233873,
                47.826771
              ],
              [
                26.924176,
                48.123264
              ],
              [
                26.619337,
                48.220726
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],144:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Monaco",
    "official": "Principality of Monaco",
    "native": {
      "fra": {
        "official": "Principauté de Monaco",
        "common": "Monaco"
      }
    }
  },
  "tld": [
    ".mc"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "377"
  ],
  "capital": "Monaco",
  "altSpellings": [
    "MC",
    "Principality of Monaco",
    "Principauté de Monaco"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Fürstentum Monaco",
      "common": "Monaco"
    },
    "fra": {
      "official": "Principauté de Monaco",
      "common": "Monaco"
    },
    "hrv": {
      "official": "Kneževina Monako",
      "common": "Monako"
    },
    "ita": {
      "official": "Principato di Monaco",
      "common": "Principato di Monaco"
    },
    "jpn": {
      "official": "モナコ公国",
      "common": "モナコ"
    },
    "nld": {
      "official": "Vorstendom Monaco",
      "common": "Monaco"
    },
    "por": {
      "official": "Principado do Mónaco",
      "common": "Mónaco"
    },
    "rus": {
      "official": "Княжество Монако",
      "common": "Монако"
    },
    "spa": {
      "official": "Principado de Mónaco",
      "common": "Mónaco"
    },
    "fin": {
      "official": "Monacon ruhtinaskunta",
      "common": "Monaco"
    }
  },
  "latlng": [
    43.73333333,
    7.4
  ],
  "demonym": "Monegasque",
  "landlocked": false,
  "borders": [
    "FRA"
  ],
  "area": 2.02,
  "codes": {
    "cca2": "MC",
    "ccn3": "492",
    "cca3": "MCO",
    "cioc": "MON"
  },
  "provinces": [
    "Fontvieille",
    "La Condamine",
    "Monaco-Ville",
    "Monte-Carlo"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],145:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mongolia",
    "official": "Mongolia",
    "native": {
      "mon": {
        "official": "Монгол улс",
        "common": "Монгол улс"
      }
    }
  },
  "tld": [
    ".mn"
  ],
  "currency": [
    "MNT"
  ],
  "callingCode": [
    "976"
  ],
  "capital": "Ulan Bator",
  "altSpellings": [
    "MN"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "mon": "Mongolian"
  },
  "translations": {
    "deu": {
      "official": "Mongolei",
      "common": "Mongolei"
    },
    "fra": {
      "official": "Mongolie",
      "common": "Mongolie"
    },
    "hrv": {
      "official": "Mongolija",
      "common": "Mongolija"
    },
    "ita": {
      "official": "Mongolia",
      "common": "Mongolia"
    },
    "jpn": {
      "official": "モンゴル",
      "common": "モンゴル"
    },
    "nld": {
      "official": "Mongolië",
      "common": "Mongolië"
    },
    "por": {
      "official": "Mongólia",
      "common": "Mongólia"
    },
    "rus": {
      "official": "Монголия",
      "common": "Монголия"
    },
    "spa": {
      "official": "Mongolia",
      "common": "Mongolia"
    },
    "fin": {
      "official": "Mongolian tasavalta",
      "common": "Mongolia"
    }
  },
  "latlng": [
    46,
    105
  ],
  "demonym": "Mongolian",
  "landlocked": true,
  "borders": [
    "CHN",
    "RUS"
  ],
  "area": 1564110,
  "codes": {
    "cca2": "MN",
    "ccn3": "496",
    "cca3": "MNG",
    "cioc": "MGL"
  },
  "provinces": [
    "Arhangay",
    "Bayan-Olgiy",
    "Bayanhongor",
    "Bulgan",
    "Darhan",
    "Dornod",
    "Dornogovi",
    "Dundgovi",
    "Dzavhan",
    "Erdenet",
    "Govi-Altay",
    "Hentiy",
    "Hovd",
    "Hovsgol",
    "Omnogovi",
    "Ovorhangay",
    "Selenge",
    "Suhbaatar",
    "Tov",
    "Ulaanbaatar",
    "Uvs"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MNG",
        "properties": {
          "name": "Mongolia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                87.751264,
                49.297198
              ],
              [
                88.805567,
                49.470521
              ],
              [
                90.713667,
                50.331812
              ],
              [
                92.234712,
                50.802171
              ],
              [
                93.104219,
                50.49529
              ],
              [
                94.147566,
                50.480537
              ],
              [
                94.815949,
                50.013433
              ],
              [
                95.814028,
                49.977467
              ],
              [
                97.259728,
                49.726061
              ],
              [
                98.231762,
                50.422401
              ],
              [
                97.82574,
                51.010995
              ],
              [
                98.861491,
                52.047366
              ],
              [
                99.981732,
                51.634006
              ],
              [
                100.88948,
                51.516856
              ],
              [
                102.065223,
                51.259921
              ],
              [
                102.255909,
                50.510561
              ],
              [
                103.676545,
                50.089966
              ],
              [
                104.621552,
                50.275329
              ],
              [
                105.886591,
                50.406019
              ],
              [
                106.888804,
                50.274296
              ],
              [
                107.868176,
                49.793705
              ],
              [
                108.475167,
                49.282548
              ],
              [
                109.402449,
                49.292961
              ],
              [
                110.662011,
                49.130128
              ],
              [
                111.581231,
                49.377968
              ],
              [
                112.89774,
                49.543565
              ],
              [
                114.362456,
                50.248303
              ],
              [
                114.96211,
                50.140247
              ],
              [
                115.485695,
                49.805177
              ],
              [
                116.678801,
                49.888531
              ],
              [
                116.191802,
                49.134598
              ],
              [
                115.485282,
                48.135383
              ],
              [
                115.742837,
                47.726545
              ],
              [
                116.308953,
                47.85341
              ],
              [
                117.295507,
                47.697709
              ],
              [
                118.064143,
                48.06673
              ],
              [
                118.866574,
                47.74706
              ],
              [
                119.772824,
                47.048059
              ],
              [
                119.66327,
                46.69268
              ],
              [
                118.874326,
                46.805412
              ],
              [
                117.421701,
                46.672733
              ],
              [
                116.717868,
                46.388202
              ],
              [
                115.985096,
                45.727235
              ],
              [
                114.460332,
                45.339817
              ],
              [
                113.463907,
                44.808893
              ],
              [
                112.436062,
                45.011646
              ],
              [
                111.873306,
                45.102079
              ],
              [
                111.348377,
                44.457442
              ],
              [
                111.667737,
                44.073176
              ],
              [
                111.829588,
                43.743118
              ],
              [
                111.129682,
                43.406834
              ],
              [
                110.412103,
                42.871234
              ],
              [
                109.243596,
                42.519446
              ],
              [
                107.744773,
                42.481516
              ],
              [
                106.129316,
                42.134328
              ],
              [
                104.964994,
                41.59741
              ],
              [
                104.522282,
                41.908347
              ],
              [
                103.312278,
                41.907468
              ],
              [
                101.83304,
                42.514873
              ],
              [
                100.845866,
                42.663804
              ],
              [
                99.515817,
                42.524691
              ],
              [
                97.451757,
                42.74889
              ],
              [
                96.349396,
                42.725635
              ],
              [
                95.762455,
                43.319449
              ],
              [
                95.306875,
                44.241331
              ],
              [
                94.688929,
                44.352332
              ],
              [
                93.480734,
                44.975472
              ],
              [
                92.133891,
                45.115076
              ],
              [
                90.94554,
                45.286073
              ],
              [
                90.585768,
                45.719716
              ],
              [
                90.970809,
                46.888146
              ],
              [
                90.280826,
                47.693549
              ],
              [
                88.854298,
                48.069082
              ],
              [
                88.013832,
                48.599463
              ],
              [
                87.751264,
                49.297198
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],146:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Montenegro",
    "official": "Montenegro",
    "native": {
      "srp": {
        "official": "Црна Гора",
        "common": "Црна Гора"
      }
    }
  },
  "tld": [
    ".me"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "382"
  ],
  "capital": "Podgorica",
  "altSpellings": [
    "ME",
    "Crna Gora"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "srp": "Montenegrin"
  },
  "translations": {
    "deu": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "fra": {
      "official": "Monténégro",
      "common": "Monténégro"
    },
    "hrv": {
      "official": "Crna Gora",
      "common": "Crna Gora"
    },
    "ita": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "jpn": {
      "official": "モンテネグロ",
      "common": "モンテネグロ"
    },
    "nld": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "por": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "rus": {
      "official": "Черногория",
      "common": "Черногория"
    },
    "spa": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "fin": {
      "official": "Montenegro",
      "common": "Montenegro"
    }
  },
  "latlng": [
    42.5,
    19.3
  ],
  "demonym": "Montenegrin",
  "landlocked": false,
  "borders": [
    "ALB",
    "BIH",
    "HRV",
    "KOS",
    "SRB"
  ],
  "area": 13812,
  "codes": {
    "cca2": "ME",
    "ccn3": "499",
    "cca3": "MNE",
    "cioc": "MNE"
  }
}
},{}],147:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Montserrat",
    "official": "Montserrat",
    "native": {
      "eng": {
        "official": "Montserrat",
        "common": "Montserrat"
      }
    }
  },
  "tld": [
    ".ms"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1664"
  ],
  "capital": "Plymouth",
  "altSpellings": [
    "MS"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "fra": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "hrv": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "ita": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "jpn": {
      "official": "モントセラト",
      "common": "モントセラト"
    },
    "nld": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "por": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "rus": {
      "official": "Монтсеррат",
      "common": "Монтсеррат"
    },
    "spa": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "fin": {
      "official": "Montserrat",
      "common": "Montserrat"
    }
  },
  "latlng": [
    16.75,
    -62.2
  ],
  "demonym": "Montserratian",
  "landlocked": false,
  "borders": [],
  "area": 102,
  "codes": {
    "cca2": "MS",
    "ccn3": "500",
    "cca3": "MSR",
    "cioc": ""
  },
  "provinces": [
    "Saint Anthony",
    "Saint Georges",
    "Saint Peter's"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],148:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Morocco",
    "official": "Kingdom of Morocco",
    "native": {
      "ara": {
        "official": "المملكة المغربية",
        "common": "المغرب"
      },
      "ber": {
        "official": "ⵜⴰⴳⵍⴷⵉⵜ ⵏ ⵍⵎⵖⵔⵉⴱ",
        "common": "ⵍⵎⴰⵖⵔⵉⴱ"
      }
    }
  },
  "tld": [
    ".ma",
    "المغرب."
  ],
  "currency": [
    "MAD"
  ],
  "callingCode": [
    "212"
  ],
  "capital": "Rabat",
  "altSpellings": [
    "MA",
    "Kingdom of Morocco",
    "Al-Mamlakah al-Maġribiyah"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ara": "Arabic",
    "ber": "Berber"
  },
  "translations": {
    "deu": {
      "official": "Königreich Marokko",
      "common": "Marokko"
    },
    "fra": {
      "official": "Royaume du Maroc",
      "common": "Maroc"
    },
    "hrv": {
      "official": "Kraljevina Maroko",
      "common": "Maroko"
    },
    "ita": {
      "official": "Regno del Marocco",
      "common": "Marocco"
    },
    "jpn": {
      "official": "モロッコ王国",
      "common": "モロッコ"
    },
    "nld": {
      "official": "Koninkrijk Marokko",
      "common": "Marokko"
    },
    "por": {
      "official": "Reino de Marrocos",
      "common": "Marrocos"
    },
    "rus": {
      "official": "Королевство Марокко",
      "common": "Марокко"
    },
    "spa": {
      "official": "Reino de Marruecos",
      "common": "Marruecos"
    },
    "fin": {
      "official": "Marokon kuningaskunta",
      "common": "Marokko"
    }
  },
  "latlng": [
    32,
    -5
  ],
  "demonym": "Moroccan",
  "landlocked": false,
  "borders": [
    "DZA",
    "ESH",
    "ESP"
  ],
  "area": 446550,
  "codes": {
    "cca2": "MA",
    "ccn3": "504",
    "cca3": "MAR",
    "cioc": "MAR"
  },
  "provinces": [
    "Agadir",
    "Al Hoceima",
    "Azilal",
    "Ben Slimane",
    "Beni Mellal",
    "Boulemane",
    "Casablanca",
    "Chaouen",
    "El Jadida",
    "El Kelaa des Srarhna",
    "Er Rachidia",
    "Essaouira",
    "Fes",
    "Figuig",
    "Guelmim",
    "Ifrane",
    "Kenitra",
    "Khemisset",
    "Khenifra",
    "Khouribga",
    "Laayoune",
    "Larache",
    "Marrakech",
    "Meknes",
    "Nador",
    "Ouarzazate",
    "Oujda",
    "Rabat-Sale",
    "Safi",
    "Settat",
    "Sidi Kacem",
    "Tan-Tan",
    "Tanger",
    "Taounate",
    "Taroudannt",
    "Tata",
    "Taza",
    "Tetouan",
    "Tiznit"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MAR",
        "properties": {
          "name": "Morocco"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -5.193863,
                35.755182
              ],
              [
                -4.591006,
                35.330712
              ],
              [
                -3.640057,
                35.399855
              ],
              [
                -2.604306,
                35.179093
              ],
              [
                -2.169914,
                35.168396
              ],
              [
                -1.792986,
                34.527919
              ],
              [
                -1.733455,
                33.919713
              ],
              [
                -1.388049,
                32.864015
              ],
              [
                -1.124551,
                32.651522
              ],
              [
                -1.307899,
                32.262889
              ],
              [
                -2.616605,
                32.094346
              ],
              [
                -3.06898,
                31.724498
              ],
              [
                -3.647498,
                31.637294
              ],
              [
                -3.690441,
                30.896952
              ],
              [
                -4.859646,
                30.501188
              ],
              [
                -5.242129,
                30.000443
              ],
              [
                -6.060632,
                29.7317
              ],
              [
                -7.059228,
                29.579228
              ],
              [
                -8.674116,
                28.841289
              ],
              [
                -8.66559,
                27.656426
              ],
              [
                -8.817809,
                27.656426
              ],
              [
                -8.817828,
                27.656426
              ],
              [
                -8.794884,
                27.120696
              ],
              [
                -9.413037,
                27.088476
              ],
              [
                -9.735343,
                26.860945
              ],
              [
                -10.189424,
                26.860945
              ],
              [
                -10.551263,
                26.990808
              ],
              [
                -11.392555,
                26.883424
              ],
              [
                -11.71822,
                26.104092
              ],
              [
                -12.030759,
                26.030866
              ],
              [
                -12.500963,
                24.770116
              ],
              [
                -13.89111,
                23.691009
              ],
              [
                -14.221168,
                22.310163
              ],
              [
                -14.630833,
                21.86094
              ],
              [
                -14.750955,
                21.5006
              ],
              [
                -17.002962,
                21.420734
              ],
              [
                -17.020428,
                21.42231
              ],
              [
                -16.973248,
                21.885745
              ],
              [
                -16.589137,
                22.158234
              ],
              [
                -16.261922,
                22.67934
              ],
              [
                -16.326414,
                23.017768
              ],
              [
                -15.982611,
                23.723358
              ],
              [
                -15.426004,
                24.359134
              ],
              [
                -15.089332,
                24.520261
              ],
              [
                -14.824645,
                25.103533
              ],
              [
                -14.800926,
                25.636265
              ],
              [
                -14.43994,
                26.254418
              ],
              [
                -13.773805,
                26.618892
              ],
              [
                -13.139942,
                27.640148
              ],
              [
                -13.121613,
                27.654148
              ],
              [
                -12.618837,
                28.038186
              ],
              [
                -11.688919,
                28.148644
              ],
              [
                -10.900957,
                28.832142
              ],
              [
                -10.399592,
                29.098586
              ],
              [
                -9.564811,
                29.933574
              ],
              [
                -9.814718,
                31.177736
              ],
              [
                -9.434793,
                32.038096
              ],
              [
                -9.300693,
                32.564679
              ],
              [
                -8.657476,
                33.240245
              ],
              [
                -7.654178,
                33.697065
              ],
              [
                -6.912544,
                34.110476
              ],
              [
                -6.244342,
                35.145865
              ],
              [
                -5.929994,
                35.759988
              ],
              [
                -5.193863,
                35.755182
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],149:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mozambique",
    "official": "Republic of Mozambique",
    "native": {
      "por": {
        "official": "República de Moçambique",
        "common": "Moçambique"
      }
    }
  },
  "tld": [
    ".mz"
  ],
  "currency": [
    "MZN"
  ],
  "callingCode": [
    "258"
  ],
  "capital": "Maputo",
  "altSpellings": [
    "MZ",
    "Republic of Mozambique",
    "República de Moçambique"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "deu": {
      "official": "Republik Mosambik",
      "common": "Mosambik"
    },
    "fra": {
      "official": "République du Mozambique",
      "common": "Mozambique"
    },
    "hrv": {
      "official": "Republika Mozambiku",
      "common": "Mozambik"
    },
    "ita": {
      "official": "Repubblica del Mozambico",
      "common": "Mozambico"
    },
    "jpn": {
      "official": "モザンビーク共和国",
      "common": "モザンビーク"
    },
    "nld": {
      "official": "Republiek Mozambique",
      "common": "Mozambique"
    },
    "por": {
      "official": "República de Moçambique",
      "common": "Moçambique"
    },
    "rus": {
      "official": "Республика Мозамбик",
      "common": "Мозамбик"
    },
    "spa": {
      "official": "República de Mozambique",
      "common": "Mozambique"
    },
    "fin": {
      "official": "Mosambikin tasavalta",
      "common": "Mosambik"
    }
  },
  "latlng": [
    -18.25,
    35
  ],
  "demonym": "Mozambican",
  "landlocked": false,
  "borders": [
    "MWI",
    "ZAF",
    "SWZ",
    "TZA",
    "ZMB",
    "ZWE"
  ],
  "area": 801590,
  "codes": {
    "cca2": "MZ",
    "ccn3": "508",
    "cca3": "MOZ",
    "cioc": "MOZ"
  },
  "provinces": [
    "Cabo Delgado",
    "Gaza",
    "Inhambane",
    "Manica",
    "Maputo",
    "Nampula",
    "Niassa",
    "Sofala",
    "Tete",
    "Zambezia"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "MOZ",
        "properties": {
          "name": "Mozambique"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                34.559989,
                -11.52002
              ],
              [
                35.312398,
                -11.439146
              ],
              [
                36.514082,
                -11.720938
              ],
              [
                36.775151,
                -11.594537
              ],
              [
                37.471284,
                -11.568751
              ],
              [
                37.827645,
                -11.268769
              ],
              [
                38.427557,
                -11.285202
              ],
              [
                39.52103,
                -10.896854
              ],
              [
                40.316589,
                -10.317096
              ],
              [
                40.478387,
                -10.765441
              ],
              [
                40.437253,
                -11.761711
              ],
              [
                40.560811,
                -12.639177
              ],
              [
                40.59962,
                -14.201975
              ],
              [
                40.775475,
                -14.691764
              ],
              [
                40.477251,
                -15.406294
              ],
              [
                40.089264,
                -16.100774
              ],
              [
                39.452559,
                -16.720891
              ],
              [
                38.538351,
                -17.101023
              ],
              [
                37.411133,
                -17.586368
              ],
              [
                36.281279,
                -18.659688
              ],
              [
                35.896497,
                -18.84226
              ],
              [
                35.1984,
                -19.552811
              ],
              [
                34.786383,
                -19.784012
              ],
              [
                34.701893,
                -20.497043
              ],
              [
                35.176127,
                -21.254361
              ],
              [
                35.373428,
                -21.840837
              ],
              [
                35.385848,
                -22.14
              ],
              [
                35.562546,
                -22.09
              ],
              [
                35.533935,
                -23.070788
              ],
              [
                35.371774,
                -23.535359
              ],
              [
                35.60747,
                -23.706563
              ],
              [
                35.458746,
                -24.12261
              ],
              [
                35.040735,
                -24.478351
              ],
              [
                34.215824,
                -24.816314
              ],
              [
                33.01321,
                -25.357573
              ],
              [
                32.574632,
                -25.727318
              ],
              [
                32.660363,
                -26.148584
              ],
              [
                32.915955,
                -26.215867
              ],
              [
                32.83012,
                -26.742192
              ],
              [
                32.071665,
                -26.73382
              ],
              [
                31.985779,
                -26.29178
              ],
              [
                31.837778,
                -25.843332
              ],
              [
                31.752408,
                -25.484284
              ],
              [
                31.930589,
                -24.369417
              ],
              [
                31.670398,
                -23.658969
              ],
              [
                31.191409,
                -22.25151
              ],
              [
                32.244988,
                -21.116489
              ],
              [
                32.508693,
                -20.395292
              ],
              [
                32.659743,
                -20.30429
              ],
              [
                32.772708,
                -19.715592
              ],
              [
                32.611994,
                -19.419383
              ],
              [
                32.654886,
                -18.67209
              ],
              [
                32.849861,
                -17.979057
              ],
              [
                32.847639,
                -16.713398
              ],
              [
                32.328239,
                -16.392074
              ],
              [
                31.852041,
                -16.319417
              ],
              [
                31.636498,
                -16.07199
              ],
              [
                31.173064,
                -15.860944
              ],
              [
                30.338955,
                -15.880839
              ],
              [
                30.274256,
                -15.507787
              ],
              [
                30.179481,
                -14.796099
              ],
              [
                33.214025,
                -13.97186
              ],
              [
                33.7897,
                -14.451831
              ],
              [
                34.064825,
                -14.35995
              ],
              [
                34.459633,
                -14.61301
              ],
              [
                34.517666,
                -15.013709
              ],
              [
                34.307291,
                -15.478641
              ],
              [
                34.381292,
                -16.18356
              ],
              [
                35.03381,
                -16.8013
              ],
              [
                35.339063,
                -16.10744
              ],
              [
                35.771905,
                -15.896859
              ],
              [
                35.686845,
                -14.611046
              ],
              [
                35.267956,
                -13.887834
              ],
              [
                34.907151,
                -13.565425
              ],
              [
                34.559989,
                -13.579998
              ],
              [
                34.280006,
                -12.280025
              ],
              [
                34.559989,
                -11.52002
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],150:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Myanmar",
    "official": "Republic of the Union of Myanmar",
    "native": {
      "mya": {
        "official": "ပြည်ထောင်စု သမ္မတ မြန်မာနိုင်ငံတော်",
        "common": "မြန်မာ"
      }
    }
  },
  "tld": [
    ".mm"
  ],
  "currency": [
    "MMK"
  ],
  "callingCode": [
    "95"
  ],
  "capital": "Naypyidaw",
  "altSpellings": [
    "MM",
    "Burma",
    "Republic of the Union of Myanmar",
    "Pyidaunzu Thanmăda Myăma Nainngandaw"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "mya": "Burmese"
  },
  "translations": {
    "deu": {
      "official": "Republik der Union von Myanmar",
      "common": "Myanmar"
    },
    "fra": {
      "official": "République de l'Union du Myanmar",
      "common": "Birmanie"
    },
    "hrv": {
      "official": "Republika Unije Mijanmar",
      "common": "Mijanmar"
    },
    "ita": {
      "official": "Repubblica dell'Unione di Myanmar",
      "common": "Birmania"
    },
    "jpn": {
      "official": "ミャンマー連邦共和国",
      "common": "ミャンマー"
    },
    "nld": {
      "official": "Republiek van de Unie van Myanmar",
      "common": "Myanmar"
    },
    "por": {
      "official": "República da União de Myanmar",
      "common": "Myanmar"
    },
    "rus": {
      "official": "Республика Союза Мьянма",
      "common": "Мьянма"
    },
    "spa": {
      "official": "República de la Unión de Myanmar",
      "common": "Myanmar"
    },
    "fin": {
      "official": "Myanmarin liiton tasavalta",
      "common": "Myanmar"
    }
  },
  "latlng": [
    22,
    98
  ],
  "demonym": "Bamar",
  "landlocked": false,
  "borders": [
    "BGD",
    "CHN",
    "IND",
    "LAO",
    "THA"
  ],
  "area": 676578,
  "codes": {
    "cca2": "MM",
    "ccn3": "104",
    "cca3": "MMR",
    "cioc": "MYA"
  }
}
},{}],151:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Namibia",
    "official": "Republic of Namibia",
    "native": {
      "afr": {
        "official": "Republiek van Namibië",
        "common": "Namibië"
      },
      "deu": {
        "official": "Republik Namibia",
        "common": "Namibia"
      },
      "eng": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "her": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "hgm": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "kwn": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "loz": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "ndo": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "tsn": {
        "official": "Lefatshe la Namibia",
        "common": "Namibia"
      }
    }
  },
  "tld": [
    ".na"
  ],
  "currency": [
    "NAD",
    "ZAR"
  ],
  "callingCode": [
    "264"
  ],
  "capital": "Windhoek",
  "altSpellings": [
    "NA",
    "Namibië",
    "Republic of Namibia"
  ],
  "region": "Africa",
  "subregion": "Southern Africa",
  "languages": {
    "afr": "Afrikaans",
    "deu": "German",
    "eng": "English",
    "her": "Herero",
    "hgm": "Khoekhoe",
    "kwn": "Kwangali",
    "loz": "Lozi",
    "ndo": "Ndonga",
    "tsn": "Tswana"
  },
  "translations": {
    "deu": {
      "official": "Republik Namibia",
      "common": "Namibia"
    },
    "fra": {
      "official": "République de Namibie",
      "common": "Namibie"
    },
    "hrv": {
      "official": "Republika Namibija",
      "common": "Namibija"
    },
    "ita": {
      "official": "Repubblica di Namibia",
      "common": "Namibia"
    },
    "jpn": {
      "official": "ナミビア共和国",
      "common": "ナミビア"
    },
    "nld": {
      "official": "Republiek Namibië",
      "common": "Namibië"
    },
    "por": {
      "official": "República da Namíbia",
      "common": "Namíbia"
    },
    "rus": {
      "official": "Республика Намибия",
      "common": "Намибия"
    },
    "spa": {
      "official": "República de Namibia",
      "common": "Namibia"
    },
    "fin": {
      "official": "Namibian tasavalta",
      "common": "Namibia"
    }
  },
  "latlng": [
    -22,
    17
  ],
  "demonym": "Namibian",
  "landlocked": false,
  "borders": [
    "AGO",
    "BWA",
    "ZAF",
    "ZMB"
  ],
  "area": 825615,
  "codes": {
    "cca2": "NA",
    "ccn3": "516",
    "cca3": "NAM",
    "cioc": "NAM"
  },
  "provinces": [
    "Caprivi",
    "Erongo",
    "Hardap",
    "Karas",
    "Khomas",
    "Kunene",
    "Ohangwena",
    "Okavango",
    "Omaheke",
    "Omusati",
    "Oshana",
    "Oshikoto",
    "Otjozondjupa"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NAM",
        "properties": {
          "name": "Namibia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                16.344977,
                -28.576705
              ],
              [
                15.601818,
                -27.821247
              ],
              [
                15.210472,
                -27.090956
              ],
              [
                14.989711,
                -26.117372
              ],
              [
                14.743214,
                -25.39292
              ],
              [
                14.408144,
                -23.853014
              ],
              [
                14.385717,
                -22.656653
              ],
              [
                14.257714,
                -22.111208
              ],
              [
                13.868642,
                -21.699037
              ],
              [
                13.352498,
                -20.872834
              ],
              [
                12.826845,
                -19.673166
              ],
              [
                12.608564,
                -19.045349
              ],
              [
                11.794919,
                -18.069129
              ],
              [
                11.734199,
                -17.301889
              ],
              [
                12.215461,
                -17.111668
              ],
              [
                12.814081,
                -16.941343
              ],
              [
                13.462362,
                -16.971212
              ],
              [
                14.058501,
                -17.423381
              ],
              [
                14.209707,
                -17.353101
              ],
              [
                18.263309,
                -17.309951
              ],
              [
                18.956187,
                -17.789095
              ],
              [
                21.377176,
                -17.930636
              ],
              [
                23.215048,
                -17.523116
              ],
              [
                24.033862,
                -17.295843
              ],
              [
                24.682349,
                -17.353411
              ],
              [
                25.07695,
                -17.578823
              ],
              [
                25.084443,
                -17.661816
              ],
              [
                24.520705,
                -17.887125
              ],
              [
                24.217365,
                -17.889347
              ],
              [
                23.579006,
                -18.281261
              ],
              [
                23.196858,
                -17.869038
              ],
              [
                21.65504,
                -18.219146
              ],
              [
                20.910641,
                -18.252219
              ],
              [
                20.881134,
                -21.814327
              ],
              [
                19.895458,
                -21.849157
              ],
              [
                19.895768,
                -24.76779
              ],
              [
                19.894734,
                -28.461105
              ],
              [
                19.002127,
                -28.972443
              ],
              [
                18.464899,
                -29.045462
              ],
              [
                17.836152,
                -28.856378
              ],
              [
                17.387497,
                -28.783514
              ],
              [
                17.218929,
                -28.355943
              ],
              [
                16.824017,
                -28.082162
              ],
              [
                16.344977,
                -28.576705
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],152:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nauru",
    "official": "Republic of Nauru",
    "native": {
      "eng": {
        "official": "Republic of Nauru",
        "common": "Nauru"
      },
      "nau": {
        "official": "Republic of Nauru",
        "common": "Nauru"
      }
    }
  },
  "tld": [
    ".nr"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "674"
  ],
  "capital": "Yaren",
  "altSpellings": [
    "NR",
    "Naoero",
    "Pleasant Island",
    "Republic of Nauru",
    "Ripublik Naoero"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "eng": "English",
    "nau": "Nauru"
  },
  "translations": {
    "deu": {
      "official": "Republik Nauru",
      "common": "Nauru"
    },
    "fra": {
      "official": "République de Nauru",
      "common": "Nauru"
    },
    "hrv": {
      "official": "Republika Nauru",
      "common": "Nauru"
    },
    "ita": {
      "official": "Repubblica di Nauru",
      "common": "Nauru"
    },
    "jpn": {
      "official": "ナウル共和国",
      "common": "ナウル"
    },
    "nld": {
      "official": "Republiek Nauru",
      "common": "Nauru"
    },
    "por": {
      "official": "República de Nauru",
      "common": "Nauru"
    },
    "rus": {
      "official": "Республика Науру",
      "common": "Науру"
    },
    "spa": {
      "official": "República de Nauru",
      "common": "Nauru"
    },
    "fin": {
      "official": "Naurun tasavalta",
      "common": "Nauru"
    }
  },
  "latlng": [
    -0.53333333,
    166.91666666
  ],
  "demonym": "Nauruan",
  "landlocked": false,
  "borders": [],
  "area": 21,
  "codes": {
    "cca2": "NR",
    "ccn3": "520",
    "cca3": "NRU",
    "cioc": "NRU"
  },
  "provinces": [
    "Aiwo",
    "Anabar",
    "Anetan",
    "Anibare",
    "Baiti",
    "Boe",
    "Buada",
    "Denigomodu",
    "Ewa",
    "Ijuw",
    "Meneng",
    "Nibok",
    "Uaboe",
    "Yaren"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],153:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nepal",
    "official": "Federal Democratic Republic of Nepal",
    "native": {
      "nep": {
        "official": "नेपाल संघीय लोकतान्त्रिक गणतन्त्र",
        "common": "नपल"
      }
    }
  },
  "tld": [
    ".np"
  ],
  "currency": [
    "NPR"
  ],
  "callingCode": [
    "977"
  ],
  "capital": "Kathmandu",
  "altSpellings": [
    "NP",
    "Federal Democratic Republic of Nepal",
    "Loktāntrik Ganatantra Nepāl"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "nep": "Nepali"
  },
  "translations": {
    "deu": {
      "official": "Demokratischen Bundesrepublik Nepal",
      "common": "Népal"
    },
    "fra": {
      "official": "République du Népal",
      "common": "Népal"
    },
    "hrv": {
      "official": "Savezna Demokratska Republika Nepal",
      "common": "Nepal"
    },
    "ita": {
      "official": "Repubblica federale democratica del Nepal",
      "common": "Nepal"
    },
    "jpn": {
      "official": "ネパール連邦民主共和国",
      "common": "ネパール"
    },
    "nld": {
      "official": "Federale Democratische Republiek Nepal",
      "common": "Nepal"
    },
    "por": {
      "official": "República Democrática Federal do Nepal",
      "common": "Nepal"
    },
    "rus": {
      "official": "Федеративная Демократическая Республика Непал",
      "common": "Непал"
    },
    "spa": {
      "official": "República Democrática Federal de Nepal",
      "common": "Nepal"
    },
    "fin": {
      "official": "Nepalin demokraattinen liittotasavalta",
      "common": "Nepal"
    }
  },
  "latlng": [
    28,
    84
  ],
  "demonym": "Nepalese",
  "landlocked": true,
  "borders": [
    "CHN",
    "IND"
  ],
  "area": 147181,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Nepal.svg",
  "codes": {
    "cca2": "NP",
    "ccn3": "524",
    "cca3": "NPL",
    "cioc": "NEP"
  },
  "provinces": [
    "Bagmati",
    "Bheri",
    "Dhawalagiri",
    "Gandaki",
    "Janakpur",
    "Karnali",
    "Kosi",
    "Lumbini",
    "Mahakali",
    "Mechi",
    "Narayani",
    "Rapti",
    "Sagarmatha",
    "Seti"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NPL",
        "properties": {
          "name": "Nepal"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                88.120441,
                27.876542
              ],
              [
                88.043133,
                27.445819
              ],
              [
                88.174804,
                26.810405
              ],
              [
                88.060238,
                26.414615
              ],
              [
                87.227472,
                26.397898
              ],
              [
                86.024393,
                26.630985
              ],
              [
                85.251779,
                26.726198
              ],
              [
                84.675018,
                27.234901
              ],
              [
                83.304249,
                27.364506
              ],
              [
                81.999987,
                27.925479
              ],
              [
                81.057203,
                28.416095
              ],
              [
                80.088425,
                28.79447
              ],
              [
                80.476721,
                29.729865
              ],
              [
                81.111256,
                30.183481
              ],
              [
                81.525804,
                30.422717
              ],
              [
                82.327513,
                30.115268
              ],
              [
                83.337115,
                29.463732
              ],
              [
                83.898993,
                29.320226
              ],
              [
                84.23458,
                28.839894
              ],
              [
                85.011638,
                28.642774
              ],
              [
                85.82332,
                28.203576
              ],
              [
                86.954517,
                27.974262
              ],
              [
                88.120441,
                27.876542
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],154:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Netherlands",
    "official": "Netherlands",
    "native": {
      "nld": {
        "official": "Nederland",
        "common": "Nederland"
      }
    }
  },
  "tld": [
    ".nl"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "31"
  ],
  "capital": "Amsterdam",
  "altSpellings": [
    "NL",
    "Holland",
    "Nederland"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "nld": "Dutch"
  },
  "translations": {
    "deu": {
      "official": "Niederlande",
      "common": "Niederlande"
    },
    "fra": {
      "official": "Pays-Bas",
      "common": "Pays-Bas"
    },
    "hrv": {
      "official": "Holandija",
      "common": "Nizozemska"
    },
    "ita": {
      "official": "Paesi Bassi",
      "common": "Paesi Bassi"
    },
    "jpn": {
      "official": "オランダ",
      "common": "オランダ"
    },
    "nld": {
      "official": "Nederland",
      "common": "Nederland"
    },
    "por": {
      "official": "Holanda",
      "common": "Holanda"
    },
    "rus": {
      "official": "Нидерланды",
      "common": "Нидерланды"
    },
    "spa": {
      "official": "Países Bajos",
      "common": "Países Bajos"
    },
    "fin": {
      "official": "Alankomaat",
      "common": "Alankomaat"
    }
  },
  "latlng": [
    52.5,
    5.75
  ],
  "demonym": "Dutch",
  "landlocked": false,
  "borders": [
    "BEL",
    "DEU"
  ],
  "area": 41850,
  "codes": {
    "cca2": "NL",
    "ccn3": "528",
    "cca3": "NLD",
    "cioc": "NED"
  },
  "provinces": [
    "Drenthe",
    "Flevoland",
    "Friesland",
    "Gelderland",
    "Groningen",
    "Limburg",
    "Noord-Brabant",
    "Noord-Holland",
    "Overijssel",
    "Utrecht",
    "Zeeland",
    "Zuid-Holland"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NLD",
        "properties": {
          "name": "Netherlands"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                6.074183,
                53.510403
              ],
              [
                6.90514,
                53.482162
              ],
              [
                7.092053,
                53.144043
              ],
              [
                6.84287,
                52.22844
              ],
              [
                6.589397,
                51.852029
              ],
              [
                5.988658,
                51.851616
              ],
              [
                6.156658,
                50.803721
              ],
              [
                5.606976,
                51.037298
              ],
              [
                4.973991,
                51.475024
              ],
              [
                4.047071,
                51.267259
              ],
              [
                3.314971,
                51.345755
              ],
              [
                3.830289,
                51.620545
              ],
              [
                4.705997,
                53.091798
              ],
              [
                6.074183,
                53.510403
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],155:[function(require,module,exports){
module.exports={
  "name": {
    "common": "New Caledonia",
    "official": "New Caledonia",
    "native": {
      "fra": {
        "official": "Nouvelle-Calédonie",
        "common": "Nouvelle-Calédonie"
      }
    }
  },
  "tld": [
    ".nc"
  ],
  "currency": [
    "XPF"
  ],
  "callingCode": [
    "687"
  ],
  "capital": "Nouméa",
  "altSpellings": [
    "NC"
  ],
  "region": "Oceania",
  "subregion": "Melanesia",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Neukaledonien",
      "common": "Neukaledonien"
    },
    "fra": {
      "official": "Nouvelle-Calédonie",
      "common": "Nouvelle-Calédonie"
    },
    "hrv": {
      "official": "Nova Kaledonija",
      "common": "Nova Kaledonija"
    },
    "ita": {
      "official": "Nuova Caledonia",
      "common": "Nuova Caledonia"
    },
    "jpn": {
      "official": "ニューカレドニア",
      "common": "ニューカレドニア"
    },
    "nld": {
      "official": "nieuw -Caledonië",
      "common": "Nieuw-Caledonië"
    },
    "por": {
      "official": "New Caledonia",
      "common": "Nova Caledónia"
    },
    "rus": {
      "official": "Новая Каледония",
      "common": "Новая Каледония"
    },
    "spa": {
      "official": "nueva Caledonia",
      "common": "Nueva Caledonia"
    },
    "fin": {
      "official": "Uusi-Kaledonia",
      "common": "Uusi-Kaledonia"
    }
  },
  "latlng": [
    -21.5,
    165.5
  ],
  "demonym": "New Caledonian",
  "landlocked": false,
  "borders": [],
  "area": 18575,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of France.svg",
  "codes": {
    "cca2": "NC",
    "ccn3": "540",
    "cca3": "NCL",
    "cioc": ""
  },
  "provinces": [
    "Iles Loyaute",
    "Nord",
    "Sud"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NCL",
        "properties": {
          "name": "New Caledonia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                165.77999,
                -21.080005
              ],
              [
                166.599991,
                -21.700019
              ],
              [
                167.120011,
                -22.159991
              ],
              [
                166.740035,
                -22.399976
              ],
              [
                166.189732,
                -22.129708
              ],
              [
                165.474375,
                -21.679607
              ],
              [
                164.829815,
                -21.14982
              ],
              [
                164.167995,
                -20.444747
              ],
              [
                164.029606,
                -20.105646
              ],
              [
                164.459967,
                -20.120012
              ],
              [
                165.020036,
                -20.459991
              ],
              [
                165.460009,
                -20.800022
              ],
              [
                165.77999,
                -21.080005
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],156:[function(require,module,exports){
module.exports={
  "name": {
    "common": "New Zealand",
    "official": "New Zealand",
    "native": {
      "eng": {
        "official": "New Zealand",
        "common": "New Zealand"
      },
      "mri": {
        "official": "Aotearoa",
        "common": "Aotearoa"
      },
      "nzs": {
        "official": "New Zealand",
        "common": "New Zealand"
      }
    }
  },
  "tld": [
    ".nz"
  ],
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "64"
  ],
  "capital": "Wellington",
  "altSpellings": [
    "NZ",
    "Aotearoa"
  ],
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "languages": {
    "eng": "English",
    "mri": "Māori",
    "nzs": "New Zealand Sign Language"
  },
  "translations": {
    "deu": {
      "official": "Neuseeland",
      "common": "Neuseeland"
    },
    "fra": {
      "official": "Nouvelle-Zélande",
      "common": "Nouvelle-Zélande"
    },
    "hrv": {
      "official": "Novi Zeland",
      "common": "Novi Zeland"
    },
    "ita": {
      "official": "Nuova Zelanda",
      "common": "Nuova Zelanda"
    },
    "jpn": {
      "official": "ニュージーランド",
      "common": "ニュージーランド"
    },
    "nld": {
      "official": "Nieuw Zeeland",
      "common": "Nieuw-Zeeland"
    },
    "por": {
      "official": "nova Zelândia",
      "common": "Nova Zelândia"
    },
    "rus": {
      "official": "Новая Зеландия",
      "common": "Новая Зеландия"
    },
    "spa": {
      "official": "nueva Zelanda",
      "common": "Nueva Zelanda"
    },
    "fin": {
      "official": "Uusi-Seelanti",
      "common": "Uusi-Seelanti"
    }
  },
  "latlng": [
    -41,
    174
  ],
  "demonym": "New Zealander",
  "landlocked": false,
  "borders": [],
  "area": 270467,
  "codes": {
    "cca2": "NZ",
    "ccn3": "554",
    "cca3": "NZL",
    "cioc": "NZL"
  },
  "provinces": [
    "Akaroa",
    "Amuri",
    "Ashburton",
    "Bay of Islands",
    "Bruce",
    "Buller",
    "Chatham Islands",
    "Cheviot",
    "Clifton",
    "Clutha",
    "Cook",
    "Dannevirke",
    "Egmont",
    "Eketahuna",
    "Ellesmere",
    "Eltham",
    "Eyre",
    "Featherston",
    "Franklin",
    "Golden Bay",
    "Great Barrier Island",
    "Grey",
    "Hauraki Plains",
    "Hawera",
    "Hawke's Bay",
    "Heathcote",
    "Hikurangi",
    "Hobson",
    "Hokianga",
    "Horowhenua",
    "Hurunui",
    "Hutt",
    "Inangahua",
    "Inglewood",
    "Kaikoura",
    "Kairanga",
    "Kiwitea",
    "Lake",
    "Mackenzie",
    "Malvern",
    "Manaia",
    "Manawatu",
    "Mangonui",
    "Maniototo",
    "Marlborough",
    "Masterton",
    "Matamata",
    "Mount Herbert",
    "Ohinemuri",
    "Opotiki",
    "Oroua",
    "Otamatea",
    "Otorohanga",
    "Oxford",
    "Pahiatua",
    "Paparua",
    "Patea",
    "Piako",
    "Pohangina",
    "Raglan",
    "Rangiora",
    "Rangitikei",
    "Rodney",
    "Rotorua",
    "Runanga",
    "Saint Kilda",
    "Silverpeaks",
    "Southland",
    "Stewart Island",
    "Stratford",
    "Strathallan",
    "Taranaki",
    "Taumarunui",
    "Taupo",
    "Tauranga",
    "Thames-Coromandel",
    "Tuapeka",
    "Vincent",
    "Waiapu",
    "Waiheke",
    "Waihemo",
    "Waikato",
    "Waikohu",
    "Waimairi",
    "Waimarino",
    "Waimate",
    "Waimate West",
    "Waimea",
    "Waipa",
    "Waipawa",
    "Waipukurau",
    "Wairarapa South",
    "Wairewa",
    "Wairoa",
    "Waitaki",
    "Waitomo",
    "Waitotara",
    "Wallace",
    "Wanganui",
    "Waverley",
    "Westland",
    "Whakatane",
    "Whangarei",
    "Whangaroa",
    "Woodville"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NZL",
        "properties": {
          "name": "New Zealand"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  173.020375,
                  -40.919052
                ],
                [
                  173.247234,
                  -41.331999
                ],
                [
                  173.958405,
                  -40.926701
                ],
                [
                  174.247587,
                  -41.349155
                ],
                [
                  174.248517,
                  -41.770008
                ],
                [
                  173.876447,
                  -42.233184
                ],
                [
                  173.22274,
                  -42.970038
                ],
                [
                  172.711246,
                  -43.372288
                ],
                [
                  173.080113,
                  -43.853344
                ],
                [
                  172.308584,
                  -43.865694
                ],
                [
                  171.452925,
                  -44.242519
                ],
                [
                  171.185138,
                  -44.897104
                ],
                [
                  170.616697,
                  -45.908929
                ],
                [
                  169.831422,
                  -46.355775
                ],
                [
                  169.332331,
                  -46.641235
                ],
                [
                  168.411354,
                  -46.619945
                ],
                [
                  167.763745,
                  -46.290197
                ],
                [
                  166.676886,
                  -46.219917
                ],
                [
                  166.509144,
                  -45.852705
                ],
                [
                  167.046424,
                  -45.110941
                ],
                [
                  168.303763,
                  -44.123973
                ],
                [
                  168.949409,
                  -43.935819
                ],
                [
                  169.667815,
                  -43.555326
                ],
                [
                  170.52492,
                  -43.031688
                ],
                [
                  171.12509,
                  -42.512754
                ],
                [
                  171.569714,
                  -41.767424
                ],
                [
                  171.948709,
                  -41.514417
                ],
                [
                  172.097227,
                  -40.956104
                ],
                [
                  172.79858,
                  -40.493962
                ],
                [
                  173.020375,
                  -40.919052
                ]
              ]
            ],
            [
              [
                [
                  174.612009,
                  -36.156397
                ],
                [
                  175.336616,
                  -37.209098
                ],
                [
                  175.357596,
                  -36.526194
                ],
                [
                  175.808887,
                  -36.798942
                ],
                [
                  175.95849,
                  -37.555382
                ],
                [
                  176.763195,
                  -37.881253
                ],
                [
                  177.438813,
                  -37.961248
                ],
                [
                  178.010354,
                  -37.579825
                ],
                [
                  178.517094,
                  -37.695373
                ],
                [
                  178.274731,
                  -38.582813
                ],
                [
                  177.97046,
                  -39.166343
                ],
                [
                  177.206993,
                  -39.145776
                ],
                [
                  176.939981,
                  -39.449736
                ],
                [
                  177.032946,
                  -39.879943
                ],
                [
                  176.885824,
                  -40.065978
                ],
                [
                  176.508017,
                  -40.604808
                ],
                [
                  176.01244,
                  -41.289624
                ],
                [
                  175.239567,
                  -41.688308
                ],
                [
                  175.067898,
                  -41.425895
                ],
                [
                  174.650973,
                  -41.281821
                ],
                [
                  175.22763,
                  -40.459236
                ],
                [
                  174.900157,
                  -39.908933
                ],
                [
                  173.824047,
                  -39.508854
                ],
                [
                  173.852262,
                  -39.146602
                ],
                [
                  174.574802,
                  -38.797683
                ],
                [
                  174.743474,
                  -38.027808
                ],
                [
                  174.697017,
                  -37.381129
                ],
                [
                  174.292028,
                  -36.711092
                ],
                [
                  174.319004,
                  -36.534824
                ],
                [
                  173.840997,
                  -36.121981
                ],
                [
                  173.054171,
                  -35.237125
                ],
                [
                  172.636005,
                  -34.529107
                ],
                [
                  173.007042,
                  -34.450662
                ],
                [
                  173.551298,
                  -35.006183
                ],
                [
                  174.32939,
                  -35.265496
                ],
                [
                  174.612009,
                  -36.156397
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],157:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nicaragua",
    "official": "Republic of Nicaragua",
    "native": {
      "spa": {
        "official": "República de Nicaragua",
        "common": "Nicaragua"
      }
    }
  },
  "tld": [
    ".ni"
  ],
  "currency": [
    "NIO"
  ],
  "callingCode": [
    "505"
  ],
  "capital": "Managua",
  "altSpellings": [
    "NI",
    "Republic of Nicaragua",
    "República de Nicaragua"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Nicaragua",
      "common": "Nicaragua"
    },
    "fra": {
      "official": "République du Nicaragua",
      "common": "Nicaragua"
    },
    "hrv": {
      "official": "Republika Nikaragva",
      "common": "Nikaragva"
    },
    "ita": {
      "official": "Repubblica del Nicaragua",
      "common": "Nicaragua"
    },
    "jpn": {
      "official": "ニカラグア共和国",
      "common": "ニカラグア"
    },
    "nld": {
      "official": "Republiek Nicaragua",
      "common": "Nicaragua"
    },
    "por": {
      "official": "República da Nicarágua",
      "common": "Nicarágua"
    },
    "rus": {
      "official": "Республика Никарагуа",
      "common": "Никарагуа"
    },
    "spa": {
      "official": "República de Nicaragua",
      "common": "Nicaragua"
    },
    "fin": {
      "official": "Nicaraguan tasavalta",
      "common": "Nicaragua"
    }
  },
  "latlng": [
    13,
    -85
  ],
  "demonym": "Nicaraguan",
  "landlocked": false,
  "borders": [
    "CRI",
    "HND"
  ],
  "area": 130373,
  "codes": {
    "cca2": "NI",
    "ccn3": "558",
    "cca3": "NIC",
    "cioc": "NCA"
  },
  "provinces": [
    "Atlantico Norte",
    "Atlantico Sur",
    "Boaco",
    "Carazo",
    "Chinandega",
    "Chontales",
    "Esteli",
    "Granada",
    "Jinotega",
    "Leon",
    "Madriz",
    "Managua",
    "Masaya",
    "Matagalpa",
    "Nueva Segovia",
    "Rio San Juan",
    "Rivas"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NIC",
        "properties": {
          "name": "Nicaragua"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.71254,
                11.088445
              ],
              [
                -86.058488,
                11.403439
              ],
              [
                -86.52585,
                11.806877
              ],
              [
                -86.745992,
                12.143962
              ],
              [
                -87.167516,
                12.458258
              ],
              [
                -87.668493,
                12.90991
              ],
              [
                -87.557467,
                13.064552
              ],
              [
                -87.392386,
                12.914018
              ],
              [
                -87.316654,
                12.984686
              ],
              [
                -87.005769,
                13.025794
              ],
              [
                -86.880557,
                13.254204
              ],
              [
                -86.733822,
                13.263093
              ],
              [
                -86.755087,
                13.754845
              ],
              [
                -86.520708,
                13.778487
              ],
              [
                -86.312142,
                13.771356
              ],
              [
                -86.096264,
                14.038187
              ],
              [
                -85.801295,
                13.836055
              ],
              [
                -85.698665,
                13.960078
              ],
              [
                -85.514413,
                14.079012
              ],
              [
                -85.165365,
                14.35437
              ],
              [
                -85.148751,
                14.560197
              ],
              [
                -85.052787,
                14.551541
              ],
              [
                -84.924501,
                14.790493
              ],
              [
                -84.820037,
                14.819587
              ],
              [
                -84.649582,
                14.666805
              ],
              [
                -84.449336,
                14.621614
              ],
              [
                -84.228342,
                14.748764
              ],
              [
                -83.975721,
                14.749436
              ],
              [
                -83.628585,
                14.880074
              ],
              [
                -83.489989,
                15.016267
              ],
              [
                -83.147219,
                14.995829
              ],
              [
                -83.233234,
                14.899866
              ],
              [
                -83.284162,
                14.676624
              ],
              [
                -83.182126,
                14.310703
              ],
              [
                -83.4125,
                13.970078
              ],
              [
                -83.519832,
                13.567699
              ],
              [
                -83.552207,
                13.127054
              ],
              [
                -83.498515,
                12.869292
              ],
              [
                -83.473323,
                12.419087
              ],
              [
                -83.626104,
                12.32085
              ],
              [
                -83.719613,
                11.893124
              ],
              [
                -83.650858,
                11.629032
              ],
              [
                -83.85547,
                11.373311
              ],
              [
                -83.808936,
                11.103044
              ],
              [
                -83.655612,
                10.938764
              ],
              [
                -83.895054,
                10.726839
              ],
              [
                -84.190179,
                10.79345
              ],
              [
                -84.355931,
                10.999226
              ],
              [
                -84.673069,
                11.082657
              ],
              [
                -84.903003,
                10.952303
              ],
              [
                -85.561852,
                11.217119
              ],
              [
                -85.71254,
                11.088445
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],158:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Niger",
    "official": "Republic of Niger",
    "native": {
      "fra": {
        "official": "République du Niger",
        "common": "Niger"
      }
    }
  },
  "tld": [
    ".ne"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "227"
  ],
  "capital": "Niamey",
  "altSpellings": [
    "NE",
    "Nijar"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Niger",
      "common": "Niger"
    },
    "fra": {
      "official": "République du Niger",
      "common": "Niger"
    },
    "hrv": {
      "official": "Republika Niger",
      "common": "Niger"
    },
    "ita": {
      "official": "Repubblica del Niger",
      "common": "Niger"
    },
    "jpn": {
      "official": "ニジェール共和国",
      "common": "ニジェール"
    },
    "nld": {
      "official": "Republiek Niger",
      "common": "Niger"
    },
    "por": {
      "official": "República do Níger",
      "common": "Níger"
    },
    "rus": {
      "official": "Республика Нигер",
      "common": "Нигер"
    },
    "spa": {
      "official": "República de Níger",
      "common": "Níger"
    },
    "fin": {
      "official": "Nigerin tasavalta",
      "common": "Niger"
    }
  },
  "latlng": [
    16,
    8
  ],
  "demonym": "Nigerien",
  "landlocked": true,
  "borders": [
    "DZA",
    "BEN",
    "BFA",
    "TCD",
    "LBY",
    "MLI",
    "NGA"
  ],
  "area": 1267000,
  "codes": {
    "cca2": "NE",
    "ccn3": "562",
    "cca3": "NER",
    "cioc": "NIG"
  },
  "provinces": [
    "Agadez",
    "Diffa",
    "Dosso",
    "Maradi",
    "Niamey",
    "Tahoua",
    "Tillaberi",
    "Zinder"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NER",
        "properties": {
          "name": "Niger"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                2.154474,
                11.94015
              ],
              [
                2.177108,
                12.625018
              ],
              [
                1.024103,
                12.851826
              ],
              [
                0.993046,
                13.33575
              ],
              [
                0.429928,
                13.988733
              ],
              [
                0.295646,
                14.444235
              ],
              [
                0.374892,
                14.928908
              ],
              [
                1.015783,
                14.968182
              ],
              [
                1.385528,
                15.323561
              ],
              [
                2.749993,
                15.409525
              ],
              [
                3.638259,
                15.56812
              ],
              [
                3.723422,
                16.184284
              ],
              [
                4.27021,
                16.852227
              ],
              [
                4.267419,
                19.155265
              ],
              [
                5.677566,
                19.601207
              ],
              [
                8.572893,
                21.565661
              ],
              [
                11.999506,
                23.471668
              ],
              [
                13.581425,
                23.040506
              ],
              [
                14.143871,
                22.491289
              ],
              [
                14.8513,
                22.86295
              ],
              [
                15.096888,
                21.308519
              ],
              [
                15.471077,
                21.048457
              ],
              [
                15.487148,
                20.730415
              ],
              [
                15.903247,
                20.387619
              ],
              [
                15.685741,
                19.95718
              ],
              [
                15.300441,
                17.92795
              ],
              [
                15.247731,
                16.627306
              ],
              [
                13.972202,
                15.684366
              ],
              [
                13.540394,
                14.367134
              ],
              [
                13.956699,
                13.996691
              ],
              [
                13.954477,
                13.353449
              ],
              [
                14.595781,
                13.330427
              ],
              [
                14.495787,
                12.859396
              ],
              [
                14.213531,
                12.802035
              ],
              [
                14.181336,
                12.483657
              ],
              [
                13.995353,
                12.461565
              ],
              [
                13.318702,
                13.556356
              ],
              [
                13.083987,
                13.596147
              ],
              [
                12.302071,
                13.037189
              ],
              [
                11.527803,
                13.32898
              ],
              [
                10.989593,
                13.387323
              ],
              [
                10.701032,
                13.246918
              ],
              [
                10.114814,
                13.277252
              ],
              [
                9.524928,
                12.851102
              ],
              [
                9.014933,
                12.826659
              ],
              [
                7.804671,
                13.343527
              ],
              [
                7.330747,
                13.098038
              ],
              [
                6.820442,
                13.115091
              ],
              [
                6.445426,
                13.492768
              ],
              [
                5.443058,
                13.865924
              ],
              [
                4.368344,
                13.747482
              ],
              [
                4.107946,
                13.531216
              ],
              [
                3.967283,
                12.956109
              ],
              [
                3.680634,
                12.552903
              ],
              [
                3.61118,
                11.660167
              ],
              [
                2.848643,
                12.235636
              ],
              [
                2.490164,
                12.233052
              ],
              [
                2.154474,
                11.94015
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],159:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nigeria",
    "official": "Federal Republic of Nigeria",
    "native": {
      "eng": {
        "official": "Federal Republic of Nigeria",
        "common": "Nigeria"
      }
    }
  },
  "tld": [
    ".ng"
  ],
  "currency": [
    "NGN"
  ],
  "callingCode": [
    "234"
  ],
  "capital": "Abuja",
  "altSpellings": [
    "NG",
    "Nijeriya",
    "Naíjíríà",
    "Federal Republic of Nigeria"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Bundesrepublik Nigeria",
      "common": "Nigeria"
    },
    "fra": {
      "official": "République fédérale du Nigeria",
      "common": "Nigéria"
    },
    "hrv": {
      "official": "Savezna Republika Nigerija",
      "common": "Nigerija"
    },
    "ita": {
      "official": "Repubblica federale di Nigeria",
      "common": "Nigeria"
    },
    "jpn": {
      "official": "ナイジェリア連邦共和国",
      "common": "ナイジェリア"
    },
    "nld": {
      "official": "Federale Republiek Nigeria",
      "common": "Nigeria"
    },
    "por": {
      "official": "República Federal da Nigéria",
      "common": "Nigéria"
    },
    "rus": {
      "official": "Федеративная Республика Нигерия",
      "common": "Нигерия"
    },
    "spa": {
      "official": "República Federal de Nigeria",
      "common": "Nigeria"
    },
    "fin": {
      "official": "Nigerian liittotasavalta",
      "common": "Nigeria"
    }
  },
  "latlng": [
    10,
    8
  ],
  "demonym": "Nigerian",
  "landlocked": false,
  "borders": [
    "BEN",
    "CMR",
    "TCD",
    "NER"
  ],
  "area": 923768,
  "codes": {
    "cca2": "NG",
    "ccn3": "566",
    "cca3": "NGA",
    "cioc": "NGR"
  },
  "provinces": [
    "Abia",
    "Abuja Federal Capital Territory",
    "Adamawa",
    "Akwa Ibom",
    "Anambra",
    "Bauchi",
    "Bayelsa",
    "Benue",
    "Borno",
    "Cross River",
    "Delta",
    "Ebonyi",
    "Edo",
    "Ekiti",
    "Enugu",
    "Gombe",
    "Imo",
    "Jigawa",
    "Kaduna",
    "Kano",
    "Katsina",
    "Kebbi",
    "Kogi",
    "Kwara",
    "Lagos",
    "Nassarawa",
    "Niger",
    "Ogun",
    "Ondo",
    "Osun",
    "Oyo",
    "Plateau",
    "Rivers",
    "Sokoto",
    "Taraba",
    "Yobe",
    "Zamfara"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NGA",
        "properties": {
          "name": "Nigeria"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                8.500288,
                4.771983
              ],
              [
                7.462108,
                4.412108
              ],
              [
                7.082596,
                4.464689
              ],
              [
                6.698072,
                4.240594
              ],
              [
                5.898173,
                4.262453
              ],
              [
                5.362805,
                4.887971
              ],
              [
                5.033574,
                5.611802
              ],
              [
                4.325607,
                6.270651
              ],
              [
                3.57418,
                6.2583
              ],
              [
                2.691702,
                6.258817
              ],
              [
                2.749063,
                7.870734
              ],
              [
                2.723793,
                8.506845
              ],
              [
                2.912308,
                9.137608
              ],
              [
                3.220352,
                9.444153
              ],
              [
                3.705438,
                10.06321
              ],
              [
                3.60007,
                10.332186
              ],
              [
                3.797112,
                10.734746
              ],
              [
                3.572216,
                11.327939
              ],
              [
                3.61118,
                11.660167
              ],
              [
                3.680634,
                12.552903
              ],
              [
                3.967283,
                12.956109
              ],
              [
                4.107946,
                13.531216
              ],
              [
                4.368344,
                13.747482
              ],
              [
                5.443058,
                13.865924
              ],
              [
                6.445426,
                13.492768
              ],
              [
                6.820442,
                13.115091
              ],
              [
                7.330747,
                13.098038
              ],
              [
                7.804671,
                13.343527
              ],
              [
                9.014933,
                12.826659
              ],
              [
                9.524928,
                12.851102
              ],
              [
                10.114814,
                13.277252
              ],
              [
                10.701032,
                13.246918
              ],
              [
                10.989593,
                13.387323
              ],
              [
                11.527803,
                13.32898
              ],
              [
                12.302071,
                13.037189
              ],
              [
                13.083987,
                13.596147
              ],
              [
                13.318702,
                13.556356
              ],
              [
                13.995353,
                12.461565
              ],
              [
                14.181336,
                12.483657
              ],
              [
                14.577178,
                12.085361
              ],
              [
                14.468192,
                11.904752
              ],
              [
                14.415379,
                11.572369
              ],
              [
                13.57295,
                10.798566
              ],
              [
                13.308676,
                10.160362
              ],
              [
                13.1676,
                9.640626
              ],
              [
                12.955468,
                9.417772
              ],
              [
                12.753672,
                8.717763
              ],
              [
                12.218872,
                8.305824
              ],
              [
                12.063946,
                7.799808
              ],
              [
                11.839309,
                7.397042
              ],
              [
                11.745774,
                6.981383
              ],
              [
                11.058788,
                6.644427
              ],
              [
                10.497375,
                7.055358
              ],
              [
                10.118277,
                7.03877
              ],
              [
                9.522706,
                6.453482
              ],
              [
                9.233163,
                6.444491
              ],
              [
                8.757533,
                5.479666
              ],
              [
                8.500288,
                4.771983
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],160:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Niue",
    "official": "Niue",
    "native": {
      "eng": {
        "official": "Niue",
        "common": "Niue"
      },
      "niu": {
        "official": "Niuē",
        "common": "Niuē"
      }
    }
  },
  "tld": [
    ".nu"
  ],
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "683"
  ],
  "capital": "Alofi",
  "altSpellings": [
    "NU"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "niu": "Niuean"
  },
  "translations": {
    "deu": {
      "official": "Niue",
      "common": "Niue"
    },
    "fra": {
      "official": "Niue",
      "common": "Niue"
    },
    "hrv": {
      "official": "Niue",
      "common": "Niue"
    },
    "ita": {
      "official": "Niue",
      "common": "Niue"
    },
    "jpn": {
      "official": "ニウエ",
      "common": "ニウエ"
    },
    "nld": {
      "official": "Niue",
      "common": "Niue"
    },
    "por": {
      "official": "Niue",
      "common": "Niue"
    },
    "rus": {
      "official": "Ниуэ",
      "common": "Ниуэ"
    },
    "spa": {
      "official": "Niue",
      "common": "Niue"
    },
    "fin": {
      "official": "Niue",
      "common": "Niue"
    }
  },
  "latlng": [
    -19.03333333,
    -169.86666666
  ],
  "demonym": "Niuean",
  "landlocked": false,
  "borders": [],
  "area": 260,
  "codes": {
    "cca2": "NU",
    "ccn3": "570",
    "cca3": "NIU",
    "cioc": ""
  },
  "provinces": [
    "Niue"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],161:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Norfolk Island",
    "official": "Territory of Norfolk Island",
    "native": {
      "eng": {
        "official": "Territory of Norfolk Island",
        "common": "Norfolk Island"
      },
      "pih": {
        "official": "Teratri of Norf'k Ailen",
        "common": "Norf'k Ailen"
      }
    }
  },
  "tld": [
    ".nf"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "672"
  ],
  "capital": "Kingston",
  "altSpellings": [
    "NF",
    "Territory of Norfolk Island",
    "Teratri of Norf'k Ailen"
  ],
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "languages": {
    "eng": "English",
    "pih": "Norfuk"
  },
  "translations": {
    "deu": {
      "official": "Gebiet der Norfolk-Insel",
      "common": "Norfolkinsel"
    },
    "fra": {
      "official": "Territoire de l'île Norfolk",
      "common": "Île Norfolk"
    },
    "hrv": {
      "official": "Teritorij Norfolk Island",
      "common": "Otok Norfolk"
    },
    "ita": {
      "official": "Territorio di Norfolk Island",
      "common": "Isola Norfolk"
    },
    "jpn": {
      "official": "ノーフォーク島の領土",
      "common": "ノーフォーク島"
    },
    "nld": {
      "official": "Grondgebied van Norfolk Island",
      "common": "Norfolkeiland"
    },
    "por": {
      "official": "Território da Ilha Norfolk",
      "common": "Ilha Norfolk"
    },
    "rus": {
      "official": "Территория острова Норфолк",
      "common": "Норфолк"
    },
    "spa": {
      "official": "Territorio de la Isla Norfolk",
      "common": "Isla de Norfolk"
    },
    "fin": {
      "official": "Norfolkinsaaren territorio",
      "common": "Norfolkinsaari"
    }
  },
  "latlng": [
    -29.03333333,
    167.95
  ],
  "demonym": "Norfolk Islander",
  "landlocked": false,
  "borders": [],
  "area": 36,
  "codes": {
    "cca2": "NF",
    "ccn3": "574",
    "cca3": "NFK",
    "cioc": ""
  },
  "provinces": [
    "Norfolk Island"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],162:[function(require,module,exports){
module.exports={
  "name": {
    "common": "North Korea",
    "official": "Democratic People's Republic of Korea",
    "native": {
      "kor": {
        "official": "조선 민주주의 인민 공화국",
        "common": "북한"
      }
    }
  },
  "tld": [
    ".kp"
  ],
  "currency": [
    "KPW"
  ],
  "callingCode": [
    "850"
  ],
  "capital": "Pyongyang",
  "altSpellings": [
    "KP",
    "Democratic People's Republic of Korea",
    "조선민주주의인민공화국",
    "Chosŏn Minjujuŭi Inmin Konghwaguk",
    "Korea, Democratic People's Republic of"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "kor": "Korean"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Volksrepublik Korea",
      "common": "Nordkorea"
    },
    "fra": {
      "official": "République populaire démocratique de Corée",
      "common": "Corée du Nord"
    },
    "hrv": {
      "official": "Demokratska Narodna Republika Koreja",
      "common": "Sjeverna Koreja"
    },
    "ita": {
      "official": "Repubblica democratica popolare di Corea",
      "common": "Corea del Nord"
    },
    "jpn": {
      "official": "朝鮮民主主義人民共和国",
      "common": "朝鮮民主主義人民共和国"
    },
    "nld": {
      "official": "Democratische Volksrepubliek Korea",
      "common": "Noord-Korea"
    },
    "por": {
      "official": "República Popular Democrática da Coreia",
      "common": "Coreia do Norte"
    },
    "rus": {
      "official": "Корейская Народно-Демократическая Республика Корея",
      "common": "Северная Корея"
    },
    "spa": {
      "official": "República Popular Democrática de Corea",
      "common": "Corea del Norte"
    },
    "fin": {
      "official": "Korean demokraattinen kansantasavalta",
      "common": "Pohjois-Korea"
    }
  },
  "latlng": [
    40,
    127
  ],
  "demonym": "North Korean",
  "landlocked": false,
  "borders": [
    "CHN",
    "KOR",
    "RUS"
  ],
  "area": 120538,
  "codes": {
    "cca2": "KP",
    "ccn3": "408",
    "cca3": "PRK",
    "cioc": "PRK"
  }
}
},{}],163:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Northern Mariana Islands",
    "official": "Commonwealth of the Northern Mariana Islands",
    "native": {
      "cal": {
        "official": "Commonwealth of the Northern Mariana Islands",
        "common": "Northern Mariana Islands"
      },
      "cha": {
        "official": "Sankattan Siha Na Islas Mariånas",
        "common": "Na Islas Mariånas"
      },
      "eng": {
        "official": "Commonwealth of the Northern Mariana Islands",
        "common": "Northern Mariana Islands"
      }
    }
  },
  "tld": [
    ".mp"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1670"
  ],
  "capital": "Saipan",
  "altSpellings": [
    "MP",
    "Commonwealth of the Northern Mariana Islands",
    "Sankattan Siha Na Islas Mariånas"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "cal": "Carolinian",
    "cha": "Chamorro",
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Commonwealth der Nördlichen Marianen",
      "common": "Nördliche Marianen"
    },
    "fra": {
      "official": "Commonwealth des îles Mariannes du Nord",
      "common": "Îles Mariannes du Nord"
    },
    "hrv": {
      "official": "Zajednica je Sjeverni Marijanski otoci",
      "common": "Sjevernomarijanski otoci"
    },
    "ita": {
      "official": "Commonwealth delle Isole Marianne Settentrionali",
      "common": "Isole Marianne Settentrionali"
    },
    "jpn": {
      "official": "北マリアナ諸島",
      "common": "北マリアナ諸島"
    },
    "nld": {
      "official": "Commonwealth van de Noordelijke Marianen",
      "common": "Noordelijke Marianeneilanden"
    },
    "por": {
      "official": "Comunidade das Ilhas Marianas do Norte",
      "common": "Marianas Setentrionais"
    },
    "rus": {
      "official": "Содружество Северных Марианских островов",
      "common": "Северные Марианские острова"
    },
    "spa": {
      "official": "Mancomunidad de las Islas Marianas del Norte",
      "common": "Islas Marianas del Norte"
    },
    "fin": {
      "official": "Pohjois-Mariaanit",
      "common": "Pohjois-Mariaanit"
    }
  },
  "latlng": [
    15.2,
    145.75
  ],
  "demonym": "American",
  "landlocked": false,
  "borders": [],
  "area": 464,
  "codes": {
    "cca2": "MP",
    "ccn3": "580",
    "cca3": "MNP",
    "cioc": ""
  },
  "provinces": [
    "Northern Islands",
    "Rota",
    "Saipan",
    "Tinian"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],164:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Norway",
    "official": "Kingdom of Norway",
    "native": {
      "nno": {
        "official": "Kongeriket Noreg",
        "common": "Noreg"
      },
      "nob": {
        "official": "Kongeriket Norge",
        "common": "Norge"
      },
      "smi": {
        "official": "Norgga gonagasriika",
        "common": "Norgga"
      }
    }
  },
  "tld": [
    ".no"
  ],
  "currency": [
    "NOK"
  ],
  "callingCode": [
    "47"
  ],
  "capital": "Oslo",
  "altSpellings": [
    "NO",
    "Norge",
    "Noreg",
    "Kingdom of Norway",
    "Kongeriket Norge",
    "Kongeriket Noreg"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "nno": "Norwegian Nynorsk",
    "nob": "Norwegian Bokmål",
    "smi": "Sami"
  },
  "translations": {
    "deu": {
      "official": "Königreich Norwegen",
      "common": "Norwegen"
    },
    "fra": {
      "official": "Royaume de Norvège",
      "common": "Norvège"
    },
    "hrv": {
      "official": "Kraljevina Norveška",
      "common": "Norveška"
    },
    "ita": {
      "official": "Regno di Norvegia",
      "common": "Norvegia"
    },
    "jpn": {
      "official": "ノルウェー王国",
      "common": "ノルウェー"
    },
    "nld": {
      "official": "Koninkrijk Noorwegen",
      "common": "Noorwegen"
    },
    "por": {
      "official": "Reino da Noruega",
      "common": "Noruega"
    },
    "rus": {
      "official": "Королевство Норвегия",
      "common": "Норвегия"
    },
    "spa": {
      "official": "Reino de Noruega",
      "common": "Noruega"
    },
    "fin": {
      "official": "Norjan kuningaskunta",
      "common": "Norja"
    }
  },
  "latlng": [
    62,
    10
  ],
  "demonym": "Norwegian",
  "landlocked": false,
  "borders": [
    "FIN",
    "SWE",
    "RUS"
  ],
  "area": 323802,
  "codes": {
    "cca2": "NO",
    "ccn3": "578",
    "cca3": "NOR",
    "cioc": "NOR"
  },
  "provinces": [
    "Akershus",
    "Aust-Agder",
    "Buskerud",
    "Finnmark",
    "Hedmark",
    "Hordaland",
    "More og Romsdal",
    "Nord-Trondelag",
    "Nordland",
    "Oppland",
    "Oslo",
    "Ostfold",
    "Rogaland",
    "Sogn og Fjordane",
    "Sor-Trondelag",
    "Telemark",
    "Troms",
    "Vest-Agder",
    "Vestfold"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "NOR",
        "properties": {
          "name": "Norway"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  28.165547,
                  71.185474
                ],
                [
                  31.293418,
                  70.453788
                ],
                [
                  30.005435,
                  70.186259
                ],
                [
                  31.101079,
                  69.55808
                ],
                [
                  29.399581,
                  69.156916
                ],
                [
                  28.59193,
                  69.064777
                ],
                [
                  29.015573,
                  69.766491
                ],
                [
                  27.732292,
                  70.164193
                ],
                [
                  26.179622,
                  69.825299
                ],
                [
                  25.689213,
                  69.092114
                ],
                [
                  24.735679,
                  68.649557
                ],
                [
                  23.66205,
                  68.891247
                ],
                [
                  22.356238,
                  68.841741
                ],
                [
                  21.244936,
                  69.370443
                ],
                [
                  20.645593,
                  69.106247
                ],
                [
                  20.025269,
                  69.065139
                ],
                [
                  19.87856,
                  68.407194
                ],
                [
                  17.993868,
                  68.567391
                ],
                [
                  17.729182,
                  68.010552
                ],
                [
                  16.768879,
                  68.013937
                ],
                [
                  16.108712,
                  67.302456
                ],
                [
                  15.108411,
                  66.193867
                ],
                [
                  13.55569,
                  64.787028
                ],
                [
                  13.919905,
                  64.445421
                ],
                [
                  13.571916,
                  64.049114
                ],
                [
                  12.579935,
                  64.066219
                ],
                [
                  11.930569,
                  63.128318
                ],
                [
                  11.992064,
                  61.800362
                ],
                [
                  12.631147,
                  61.293572
                ],
                [
                  12.300366,
                  60.117933
                ],
                [
                  11.468272,
                  59.432393
                ],
                [
                  11.027369,
                  58.856149
                ],
                [
                  10.356557,
                  59.469807
                ],
                [
                  8.382,
                  58.313288
                ],
                [
                  7.048748,
                  58.078884
                ],
                [
                  5.665835,
                  58.588155
                ],
                [
                  5.308234,
                  59.663232
                ],
                [
                  4.992078,
                  61.970998
                ],
                [
                  5.9129,
                  62.614473
                ],
                [
                  8.553411,
                  63.454008
                ],
                [
                  10.527709,
                  64.486038
                ],
                [
                  12.358347,
                  65.879726
                ],
                [
                  14.761146,
                  67.810642
                ],
                [
                  16.435927,
                  68.563205
                ],
                [
                  19.184028,
                  69.817444
                ],
                [
                  21.378416,
                  70.255169
                ],
                [
                  23.023742,
                  70.202072
                ],
                [
                  24.546543,
                  71.030497
                ],
                [
                  26.37005,
                  70.986262
                ],
                [
                  28.165547,
                  71.185474
                ]
              ]
            ],
            [
              [
                [
                  24.72412,
                  77.85385
                ],
                [
                  22.49032,
                  77.44493
                ],
                [
                  20.72601,
                  77.67704
                ],
                [
                  21.41611,
                  77.93504
                ],
                [
                  20.8119,
                  78.25463
                ],
                [
                  22.88426,
                  78.45494
                ],
                [
                  23.28134,
                  78.07954
                ],
                [
                  24.72412,
                  77.85385
                ]
              ]
            ],
            [
              [
                [
                  18.25183,
                  79.70175
                ],
                [
                  21.54383,
                  78.95611
                ],
                [
                  19.02737,
                  78.5626
                ],
                [
                  18.47172,
                  77.82669
                ],
                [
                  17.59441,
                  77.63796
                ],
                [
                  17.1182,
                  76.80941
                ],
                [
                  15.91315,
                  76.77045
                ],
                [
                  13.76259,
                  77.38035
                ],
                [
                  14.66956,
                  77.73565
                ],
                [
                  13.1706,
                  78.02493
                ],
                [
                  11.22231,
                  78.8693
                ],
                [
                  10.44453,
                  79.65239
                ],
                [
                  13.17077,
                  80.01046
                ],
                [
                  13.71852,
                  79.66039
                ],
                [
                  15.14282,
                  79.67431
                ],
                [
                  15.52255,
                  80.01608
                ],
                [
                  16.99085,
                  80.05086
                ],
                [
                  18.25183,
                  79.70175
                ]
              ]
            ],
            [
              [
                [
                  25.447625,
                  80.40734
                ],
                [
                  27.407506,
                  80.056406
                ],
                [
                  25.924651,
                  79.517834
                ],
                [
                  23.024466,
                  79.400012
                ],
                [
                  20.075188,
                  79.566823
                ],
                [
                  19.897266,
                  79.842362
                ],
                [
                  18.462264,
                  79.85988
                ],
                [
                  17.368015,
                  80.318896
                ],
                [
                  20.455992,
                  80.598156
                ],
                [
                  21.907945,
                  80.357679
                ],
                [
                  22.919253,
                  80.657144
                ],
                [
                  25.447625,
                  80.40734
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],165:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Oman",
    "official": "Sultanate of Oman",
    "native": {
      "ara": {
        "official": "سلطنة عمان",
        "common": "عمان"
      }
    }
  },
  "tld": [
    ".om"
  ],
  "currency": [
    "OMR"
  ],
  "callingCode": [
    "968"
  ],
  "capital": "Muscat",
  "altSpellings": [
    "OM",
    "Sultanate of Oman",
    "Salṭanat ʻUmān"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Sultanat Oman",
      "common": "Oman"
    },
    "fra": {
      "official": "Sultanat d'Oman",
      "common": "Oman"
    },
    "hrv": {
      "official": "Sultanat Oman",
      "common": "Oman"
    },
    "ita": {
      "official": "Sultanato dell'Oman",
      "common": "oman"
    },
    "jpn": {
      "official": "オマーン·スルタン国",
      "common": "オマーン"
    },
    "nld": {
      "official": "Sultanaat van Oman",
      "common": "Oman"
    },
    "por": {
      "official": "Sultanato de Omã",
      "common": "Omã"
    },
    "rus": {
      "official": "Султанат Оман",
      "common": "Оман"
    },
    "spa": {
      "official": "Sultanato de Omán",
      "common": "Omán"
    },
    "fin": {
      "official": "Omanin sulttaanikunta",
      "common": "Oman"
    }
  },
  "latlng": [
    21,
    57
  ],
  "demonym": "Omani",
  "landlocked": false,
  "borders": [
    "SAU",
    "ARE",
    "YEM"
  ],
  "area": 309500,
  "codes": {
    "cca2": "OM",
    "ccn3": "512",
    "cca3": "OMN",
    "cioc": "OMA"
  },
  "provinces": [
    "Ad Dakhiliyah",
    "Al Batinah",
    "Al Wusta",
    "Ash Sharqiyah",
    "Az Zahirah",
    "Masqat",
    "Musandam",
    "Zufar"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "OMN",
        "properties": {
          "name": "Oman"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  58.861141,
                  21.114035
                ],
                [
                  58.487986,
                  20.428986
                ],
                [
                  58.034318,
                  20.481437
                ],
                [
                  57.826373,
                  20.243002
                ],
                [
                  57.665762,
                  19.736005
                ],
                [
                  57.7887,
                  19.06757
                ],
                [
                  57.694391,
                  18.94471
                ],
                [
                  57.234264,
                  18.947991
                ],
                [
                  56.609651,
                  18.574267
                ],
                [
                  56.512189,
                  18.087113
                ],
                [
                  56.283521,
                  17.876067
                ],
                [
                  55.661492,
                  17.884128
                ],
                [
                  55.269939,
                  17.632309
                ],
                [
                  55.2749,
                  17.228354
                ],
                [
                  54.791002,
                  16.950697
                ],
                [
                  54.239253,
                  17.044981
                ],
                [
                  53.570508,
                  16.707663
                ],
                [
                  53.108573,
                  16.651051
                ],
                [
                  52.782184,
                  17.349742
                ],
                [
                  52.00001,
                  19.000003
                ],
                [
                  54.999982,
                  19.999994
                ],
                [
                  55.666659,
                  22.000001
                ],
                [
                  55.208341,
                  22.70833
                ],
                [
                  55.234489,
                  23.110993
                ],
                [
                  55.525841,
                  23.524869
                ],
                [
                  55.528632,
                  23.933604
                ],
                [
                  55.981214,
                  24.130543
                ],
                [
                  55.804119,
                  24.269604
                ],
                [
                  55.886233,
                  24.920831
                ],
                [
                  56.396847,
                  24.924732
                ],
                [
                  56.84514,
                  24.241673
                ],
                [
                  57.403453,
                  23.878594
                ],
                [
                  58.136948,
                  23.747931
                ],
                [
                  58.729211,
                  23.565668
                ],
                [
                  59.180502,
                  22.992395
                ],
                [
                  59.450098,
                  22.660271
                ],
                [
                  59.80806,
                  22.533612
                ],
                [
                  59.806148,
                  22.310525
                ],
                [
                  59.442191,
                  21.714541
                ],
                [
                  59.282408,
                  21.433886
                ],
                [
                  58.861141,
                  21.114035
                ]
              ]
            ],
            [
              [
                [
                  56.391421,
                  25.895991
                ],
                [
                  56.261042,
                  25.714606
                ],
                [
                  56.070821,
                  26.055464
                ],
                [
                  56.362017,
                  26.395934
                ],
                [
                  56.485679,
                  26.309118
                ],
                [
                  56.391421,
                  25.895991
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],166:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Pakistan",
    "official": "Islamic Republic of Pakistan",
    "native": {
      "eng": {
        "official": "Islamic Republic of Pakistan",
        "common": "Pakistan"
      },
      "urd": {
        "official": "اسلامی جمہوریۂ پاكستان",
        "common": "پاكستان"
      }
    }
  },
  "tld": [
    ".pk"
  ],
  "currency": [
    "PKR"
  ],
  "callingCode": [
    "92"
  ],
  "capital": "Islamabad",
  "altSpellings": [
    "PK",
    "Pākistān",
    "Islamic Republic of Pakistan",
    "Islāmī Jumhūriya'eh Pākistān"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "eng": "English",
    "urd": "Urdu"
  },
  "translations": {
    "deu": {
      "official": "Islamische Republik Pakistan",
      "common": "Pakistan"
    },
    "fra": {
      "official": "République islamique du Pakistan",
      "common": "Pakistan"
    },
    "hrv": {
      "official": "Islamska Republika Pakistan",
      "common": "Pakistan"
    },
    "ita": {
      "official": "Repubblica islamica del Pakistan",
      "common": "Pakistan"
    },
    "jpn": {
      "official": "パキスタン",
      "common": "パキスタン"
    },
    "nld": {
      "official": "Islamitische Republiek Pakistan",
      "common": "Pakistan"
    },
    "por": {
      "official": "República Islâmica do Paquistão",
      "common": "Paquistão"
    },
    "rus": {
      "official": "Исламская Республика Пакистан",
      "common": "Пакистан"
    },
    "spa": {
      "official": "República Islámica de Pakistán",
      "common": "Pakistán"
    },
    "fin": {
      "official": "Pakistanin islamilainen tasavalta",
      "common": "Pakistan"
    }
  },
  "latlng": [
    30,
    70
  ],
  "demonym": "Pakistani",
  "landlocked": false,
  "borders": [
    "AFG",
    "CHN",
    "IND",
    "IRN"
  ],
  "area": 881912,
  "codes": {
    "cca2": "PK",
    "ccn3": "586",
    "cca3": "PAK",
    "cioc": "PAK"
  },
  "provinces": [
    "Balochistan",
    "Federally Administered Tribal Areas",
    "Islamabad Capital Territory",
    "North-West Frontier Province",
    "Punjab",
    "Sindh"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PAK",
        "properties": {
          "name": "Pakistan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                75.158028,
                37.133031
              ],
              [
                75.896897,
                36.666806
              ],
              [
                76.192848,
                35.898403
              ],
              [
                77.837451,
                35.49401
              ],
              [
                76.871722,
                34.653544
              ],
              [
                75.757061,
                34.504923
              ],
              [
                74.240203,
                34.748887
              ],
              [
                73.749948,
                34.317699
              ],
              [
                74.104294,
                33.441473
              ],
              [
                74.451559,
                32.7649
              ],
              [
                75.258642,
                32.271105
              ],
              [
                74.405929,
                31.692639
              ],
              [
                74.42138,
                30.979815
              ],
              [
                73.450638,
                29.976413
              ],
              [
                72.823752,
                28.961592
              ],
              [
                71.777666,
                27.91318
              ],
              [
                70.616496,
                27.989196
              ],
              [
                69.514393,
                26.940966
              ],
              [
                70.168927,
                26.491872
              ],
              [
                70.282873,
                25.722229
              ],
              [
                70.844699,
                25.215102
              ],
              [
                71.04324,
                24.356524
              ],
              [
                68.842599,
                24.359134
              ],
              [
                68.176645,
                23.691965
              ],
              [
                67.443667,
                23.944844
              ],
              [
                67.145442,
                24.663611
              ],
              [
                66.372828,
                25.425141
              ],
              [
                64.530408,
                25.237039
              ],
              [
                62.905701,
                25.218409
              ],
              [
                61.497363,
                25.078237
              ],
              [
                61.874187,
                26.239975
              ],
              [
                63.316632,
                26.756532
              ],
              [
                63.233898,
                27.217047
              ],
              [
                62.755426,
                27.378923
              ],
              [
                62.72783,
                28.259645
              ],
              [
                61.771868,
                28.699334
              ],
              [
                61.369309,
                29.303276
              ],
              [
                60.874248,
                29.829239
              ],
              [
                62.549857,
                29.318572
              ],
              [
                63.550261,
                29.468331
              ],
              [
                64.148002,
                29.340819
              ],
              [
                64.350419,
                29.560031
              ],
              [
                65.046862,
                29.472181
              ],
              [
                66.346473,
                29.887943
              ],
              [
                66.381458,
                30.738899
              ],
              [
                66.938891,
                31.304911
              ],
              [
                67.683394,
                31.303154
              ],
              [
                67.792689,
                31.58293
              ],
              [
                68.556932,
                31.71331
              ],
              [
                68.926677,
                31.620189
              ],
              [
                69.317764,
                31.901412
              ],
              [
                69.262522,
                32.501944
              ],
              [
                69.687147,
                33.105499
              ],
              [
                70.323594,
                33.358533
              ],
              [
                69.930543,
                34.02012
              ],
              [
                70.881803,
                33.988856
              ],
              [
                71.156773,
                34.348911
              ],
              [
                71.115019,
                34.733126
              ],
              [
                71.613076,
                35.153203
              ],
              [
                71.498768,
                35.650563
              ],
              [
                71.262348,
                36.074388
              ],
              [
                71.846292,
                36.509942
              ],
              [
                72.920025,
                36.720007
              ],
              [
                74.067552,
                36.836176
              ],
              [
                74.575893,
                37.020841
              ],
              [
                75.158028,
                37.133031
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],167:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Palau",
    "official": "Republic of Palau",
    "native": {
      "eng": {
        "official": "Republic of Palau",
        "common": "Palau"
      },
      "pau": {
        "official": "Beluu er a Belau",
        "common": "Belau"
      }
    }
  },
  "tld": [
    ".pw"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "680"
  ],
  "capital": "Ngerulmud",
  "altSpellings": [
    "PW",
    "Republic of Palau",
    "Beluu er a Belau"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "eng": "English",
    "pau": "Palauan"
  },
  "translations": {
    "deu": {
      "official": "Palau",
      "common": "Palau"
    },
    "fra": {
      "official": "République des Palaos (Palau)",
      "common": "Palaos (Palau)"
    },
    "hrv": {
      "official": "Republika Palau",
      "common": "Palau"
    },
    "ita": {
      "official": "Repubblica di Palau",
      "common": "Palau"
    },
    "jpn": {
      "official": "パラオ共和国",
      "common": "パラオ"
    },
    "nld": {
      "official": "Republiek van Palau",
      "common": "Palau"
    },
    "por": {
      "official": "República de Palau",
      "common": "Palau"
    },
    "rus": {
      "official": "Республика Палау",
      "common": "Палау"
    },
    "spa": {
      "official": "República de Palau",
      "common": "Palau"
    },
    "fin": {
      "official": "Palaun tasavalta",
      "common": "Palau"
    }
  },
  "latlng": [
    7.5,
    134.5
  ],
  "demonym": "Palauan",
  "landlocked": false,
  "borders": [],
  "area": 459,
  "codes": {
    "cca2": "PW",
    "ccn3": "585",
    "cca3": "PLW",
    "cioc": "PLW"
  },
  "provinces": [
    "Aimeliik",
    "Airai",
    "Angaur",
    "Hatobohei",
    "Kayangel",
    "Koror",
    "Melekeok",
    "Ngaraard",
    "Ngarchelong",
    "Ngardmau",
    "Ngatpang",
    "Ngchesar",
    "Ngeremlengui",
    "Ngiwal",
    "Palau Island",
    "Peleliu",
    "Sonsoral",
    "Tobi"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],168:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Palestine",
    "official": "State of Palestine",
    "native": {
      "ara": {
        "official": "دولة فلسطين",
        "common": "فلسطين"
      }
    }
  },
  "tld": [
    ".ps",
    "فلسطين."
  ],
  "currency": [
    "ILS"
  ],
  "callingCode": [
    "970"
  ],
  "capital": "Ramallah",
  "altSpellings": [
    "PS",
    "Palestine, State of",
    "State of Palestine",
    "Dawlat Filasṭin"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Staat Palästina",
      "common": "Palästina"
    },
    "fra": {
      "official": "État de Palestine",
      "common": "Palestine"
    },
    "hrv": {
      "official": "State of Palestine",
      "common": "Palestina"
    },
    "ita": {
      "official": "Stato di Palestina",
      "common": "Palestina"
    },
    "jpn": {
      "official": "パレスチナ自治政府",
      "common": "パレスチナ"
    },
    "nld": {
      "official": "Staat Palestina",
      "common": "Palestijnse gebieden"
    },
    "por": {
      "official": "Estado da Palestina",
      "common": "Palestina"
    },
    "rus": {
      "official": "Государство Палестина",
      "common": "Палестина"
    },
    "spa": {
      "official": "Estado de Palestina",
      "common": "Palestina"
    },
    "fin": {
      "official": "Palestiinan valtio",
      "common": "Palestiina"
    }
  },
  "latlng": [
    31.9,
    35.2
  ],
  "demonym": "Palestinian",
  "landlocked": false,
  "borders": [
    "ISR",
    "EGY",
    "JOR"
  ],
  "area": 6220,
  "codes": {
    "cca2": "PS",
    "ccn3": "275",
    "cca3": "PSE",
    "cioc": "PLE"
  }
}
},{}],169:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Panama",
    "official": "Republic of Panama",
    "native": {
      "spa": {
        "official": "República de Panamá",
        "common": "Panamá"
      }
    }
  },
  "tld": [
    ".pa"
  ],
  "currency": [
    "PAB",
    "USD"
  ],
  "callingCode": [
    "507"
  ],
  "capital": "Panama City",
  "altSpellings": [
    "PA",
    "Republic of Panama",
    "República de Panamá"
  ],
  "region": "Americas",
  "subregion": "Central America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Panama",
      "common": "Panama"
    },
    "fra": {
      "official": "République du Panama",
      "common": "Panama"
    },
    "hrv": {
      "official": "Republika Panama",
      "common": "Panama"
    },
    "ita": {
      "official": "Repubblica di Panama",
      "common": "Panama"
    },
    "jpn": {
      "official": "パナマ共和国",
      "common": "パナマ"
    },
    "nld": {
      "official": "Republiek Panama",
      "common": "Panama"
    },
    "por": {
      "official": "República do Panamá",
      "common": "Panamá"
    },
    "rus": {
      "official": "Республика Панама",
      "common": "Панама"
    },
    "spa": {
      "official": "República de Panamá",
      "common": "Panamá"
    },
    "fin": {
      "official": "Panaman tasavalta",
      "common": "Panama"
    }
  },
  "latlng": [
    9,
    -80
  ],
  "demonym": "Panamanian",
  "landlocked": false,
  "borders": [
    "COL",
    "CRI"
  ],
  "area": 75417,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Panama.svg",
  "codes": {
    "cca2": "PA",
    "ccn3": "591",
    "cca3": "PAN",
    "cioc": "PAN"
  },
  "provinces": [
    "Bocas del Toro",
    "Chiriqui",
    "Cocle",
    "Colon",
    "Darien",
    "Herrera",
    "Los Santos",
    "Panama",
    "San Blas",
    "Veraguas"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PAN",
        "properties": {
          "name": "Panama"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -77.881571,
                7.223771
              ],
              [
                -78.214936,
                7.512255
              ],
              [
                -78.429161,
                8.052041
              ],
              [
                -78.182096,
                8.319182
              ],
              [
                -78.435465,
                8.387705
              ],
              [
                -78.622121,
                8.718124
              ],
              [
                -79.120307,
                8.996092
              ],
              [
                -79.557877,
                8.932375
              ],
              [
                -79.760578,
                8.584515
              ],
              [
                -80.164481,
                8.333316
              ],
              [
                -80.382659,
                8.298409
              ],
              [
                -80.480689,
                8.090308
              ],
              [
                -80.00369,
                7.547524
              ],
              [
                -80.276671,
                7.419754
              ],
              [
                -80.421158,
                7.271572
              ],
              [
                -80.886401,
                7.220541
              ],
              [
                -81.059543,
                7.817921
              ],
              [
                -81.189716,
                7.647906
              ],
              [
                -81.519515,
                7.70661
              ],
              [
                -81.721311,
                8.108963
              ],
              [
                -82.131441,
                8.175393
              ],
              [
                -82.390934,
                8.292362
              ],
              [
                -82.820081,
                8.290864
              ],
              [
                -82.850958,
                8.073823
              ],
              [
                -82.965783,
                8.225028
              ],
              [
                -82.913176,
                8.423517
              ],
              [
                -82.829771,
                8.626295
              ],
              [
                -82.868657,
                8.807266
              ],
              [
                -82.719183,
                8.925709
              ],
              [
                -82.927155,
                9.07433
              ],
              [
                -82.932891,
                9.476812
              ],
              [
                -82.546196,
                9.566135
              ],
              [
                -82.187123,
                9.207449
              ],
              [
                -82.207586,
                8.995575
              ],
              [
                -81.808567,
                8.950617
              ],
              [
                -81.714154,
                9.031955
              ],
              [
                -81.439287,
                8.786234
              ],
              [
                -80.947302,
                8.858504
              ],
              [
                -80.521901,
                9.111072
              ],
              [
                -79.9146,
                9.312765
              ],
              [
                -79.573303,
                9.61161
              ],
              [
                -79.021192,
                9.552931
              ],
              [
                -79.05845,
                9.454565
              ],
              [
                -78.500888,
                9.420459
              ],
              [
                -78.055928,
                9.24773
              ],
              [
                -77.729514,
                8.946844
              ],
              [
                -77.353361,
                8.670505
              ],
              [
                -77.474723,
                8.524286
              ],
              [
                -77.242566,
                7.935278
              ],
              [
                -77.431108,
                7.638061
              ],
              [
                -77.753414,
                7.70984
              ],
              [
                -77.881571,
                7.223771
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],170:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Papua New Guinea",
    "official": "Independent State of Papua New Guinea",
    "native": {
      "eng": {
        "official": "Independent State of Papua New Guinea",
        "common": "Papua New Guinea"
      },
      "hmo": {
        "official": "Independen Stet bilong Papua Niugini",
        "common": "Papua Niu Gini"
      },
      "tpi": {
        "official": "Independen Stet bilong Papua Niugini",
        "common": "Papua Niugini"
      }
    }
  },
  "tld": [
    ".pg"
  ],
  "currency": [
    "PGK"
  ],
  "callingCode": [
    "675"
  ],
  "capital": "Port Moresby",
  "altSpellings": [
    "PG",
    "Independent State of Papua New Guinea",
    "Independen Stet bilong Papua Niugini"
  ],
  "region": "Oceania",
  "subregion": "Melanesia",
  "languages": {
    "eng": "English",
    "hmo": "Hiri Motu",
    "tpi": "Tok Pisin"
  },
  "translations": {
    "deu": {
      "official": "Unabhängige Staat Papua-Neuguinea",
      "common": "Papua-Neuguinea"
    },
    "fra": {
      "official": "État indépendant de Papouasie-Nouvelle-Guinée",
      "common": "Papouasie-Nouvelle-Guinée"
    },
    "hrv": {
      "official": "Nezavisna Država Papui Novoj Gvineji",
      "common": "Papua Nova Gvineja"
    },
    "ita": {
      "official": "Stato indipendente di Papua Nuova Guinea",
      "common": "Papua Nuova Guinea"
    },
    "jpn": {
      "official": "パプアニューギニア独立国",
      "common": "パプアニューギニア"
    },
    "nld": {
      "official": "Onafhankelijke Staat Papoea -Nieuw-Guinea",
      "common": "Papoea-Nieuw-Guinea"
    },
    "por": {
      "official": "Estado Independente da Papua Nova Guiné",
      "common": "Papua Nova Guiné"
    },
    "rus": {
      "official": "Независимое Государство Папуа-Новой Гвинеи",
      "common": "Папуа — Новая Гвинея"
    },
    "spa": {
      "official": "Estado Independiente de Papúa Nueva Guinea",
      "common": "Papúa Nueva Guinea"
    },
    "fin": {
      "official": "Papua-Uuden-Guinean Itsenäinen valtio",
      "common": "Papua-Uusi-Guinea"
    }
  },
  "latlng": [
    -6,
    147
  ],
  "demonym": "Papua New Guinean",
  "landlocked": false,
  "borders": [
    "IDN"
  ],
  "area": 462840,
  "codes": {
    "cca2": "PG",
    "ccn3": "598",
    "cca3": "PNG",
    "cioc": "PNG"
  },
  "provinces": [
    "Bougainville",
    "Central",
    "Chimbu",
    "East New Britain",
    "East Sepik",
    "Eastern Highlands",
    "Enga",
    "Gulf",
    "Madang",
    "Manus",
    "Milne Bay",
    "Morobe",
    "National Capital",
    "New Ireland",
    "Northern",
    "Sandaun",
    "Southern Highlands",
    "West New Britain",
    "Western",
    "Western Highlands"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PNG",
        "properties": {
          "name": "Papua New Guinea"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  155.880026,
                  -6.819997
                ],
                [
                  155.599991,
                  -6.919991
                ],
                [
                  155.166994,
                  -6.535931
                ],
                [
                  154.729192,
                  -5.900828
                ],
                [
                  154.514114,
                  -5.139118
                ],
                [
                  154.652504,
                  -5.042431
                ],
                [
                  154.759991,
                  -5.339984
                ],
                [
                  155.062918,
                  -5.566792
                ],
                [
                  155.547746,
                  -6.200655
                ],
                [
                  156.019965,
                  -6.540014
                ],
                [
                  155.880026,
                  -6.819997
                ]
              ]
            ],
            [
              [
                [
                  151.982796,
                  -5.478063
                ],
                [
                  151.459107,
                  -5.56028
                ],
                [
                  151.30139,
                  -5.840728
                ],
                [
                  150.754447,
                  -6.083763
                ],
                [
                  150.241197,
                  -6.317754
                ],
                [
                  149.709963,
                  -6.316513
                ],
                [
                  148.890065,
                  -6.02604
                ],
                [
                  148.318937,
                  -5.747142
                ],
                [
                  148.401826,
                  -5.437756
                ],
                [
                  149.298412,
                  -5.583742
                ],
                [
                  149.845562,
                  -5.505503
                ],
                [
                  149.99625,
                  -5.026101
                ],
                [
                  150.139756,
                  -5.001348
                ],
                [
                  150.236908,
                  -5.53222
                ],
                [
                  150.807467,
                  -5.455842
                ],
                [
                  151.089672,
                  -5.113693
                ],
                [
                  151.647881,
                  -4.757074
                ],
                [
                  151.537862,
                  -4.167807
                ],
                [
                  152.136792,
                  -4.14879
                ],
                [
                  152.338743,
                  -4.312966
                ],
                [
                  152.318693,
                  -4.867661
                ],
                [
                  151.982796,
                  -5.478063
                ]
              ]
            ],
            [
              [
                [
                  147.191874,
                  -7.388024
                ],
                [
                  148.084636,
                  -8.044108
                ],
                [
                  148.734105,
                  -9.104664
                ],
                [
                  149.306835,
                  -9.071436
                ],
                [
                  149.266631,
                  -9.514406
                ],
                [
                  150.038728,
                  -9.684318
                ],
                [
                  149.738798,
                  -9.872937
                ],
                [
                  150.801628,
                  -10.293687
                ],
                [
                  150.690575,
                  -10.582713
                ],
                [
                  150.028393,
                  -10.652476
                ],
                [
                  149.78231,
                  -10.393267
                ],
                [
                  148.923138,
                  -10.280923
                ],
                [
                  147.913018,
                  -10.130441
                ],
                [
                  147.135443,
                  -9.492444
                ],
                [
                  146.567881,
                  -8.942555
                ],
                [
                  146.048481,
                  -8.067414
                ],
                [
                  144.744168,
                  -7.630128
                ],
                [
                  143.897088,
                  -7.91533
                ],
                [
                  143.286376,
                  -8.245491
                ],
                [
                  143.413913,
                  -8.983069
                ],
                [
                  142.628431,
                  -9.326821
                ],
                [
                  142.068259,
                  -9.159596
                ],
                [
                  141.033852,
                  -9.117893
                ],
                [
                  141.017057,
                  -5.859022
                ],
                [
                  141.00021,
                  -2.600151
                ],
                [
                  142.735247,
                  -3.289153
                ],
                [
                  144.583971,
                  -3.861418
                ],
                [
                  145.27318,
                  -4.373738
                ],
                [
                  145.829786,
                  -4.876498
                ],
                [
                  145.981922,
                  -5.465609
                ],
                [
                  147.648073,
                  -6.083659
                ],
                [
                  147.891108,
                  -6.614015
                ],
                [
                  146.970905,
                  -6.721657
                ],
                [
                  147.191874,
                  -7.388024
                ]
              ]
            ],
            [
              [
                [
                  153.140038,
                  -4.499983
                ],
                [
                  152.827292,
                  -4.766427
                ],
                [
                  152.638673,
                  -4.176127
                ],
                [
                  152.406026,
                  -3.789743
                ],
                [
                  151.953237,
                  -3.462062
                ],
                [
                  151.384279,
                  -3.035422
                ],
                [
                  150.66205,
                  -2.741486
                ],
                [
                  150.939965,
                  -2.500002
                ],
                [
                  151.479984,
                  -2.779985
                ],
                [
                  151.820015,
                  -2.999972
                ],
                [
                  152.239989,
                  -3.240009
                ],
                [
                  152.640017,
                  -3.659983
                ],
                [
                  153.019994,
                  -3.980015
                ],
                [
                  153.140038,
                  -4.499983
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],171:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Paraguay",
    "official": "Republic of Paraguay",
    "native": {
      "grn": {
        "official": "Tetã Paraguái",
        "common": "Paraguái"
      },
      "spa": {
        "official": "República de Paraguay",
        "common": "Paraguay"
      }
    }
  },
  "tld": [
    ".py"
  ],
  "currency": [
    "PYG"
  ],
  "callingCode": [
    "595"
  ],
  "capital": "Asunción",
  "altSpellings": [
    "PY",
    "Republic of Paraguay",
    "República del Paraguay",
    "Tetã Paraguái"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "grn": "Guaraní",
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Paraguay",
      "common": "Paraguay"
    },
    "fra": {
      "official": "République du Paraguay",
      "common": "Paraguay"
    },
    "hrv": {
      "official": "Republika Paragvaj",
      "common": "Paragvaj"
    },
    "ita": {
      "official": "Repubblica del Paraguay",
      "common": "Paraguay"
    },
    "jpn": {
      "official": "パラグアイ共和国",
      "common": "パラグアイ"
    },
    "nld": {
      "official": "Republiek Paraguay",
      "common": "Paraguay"
    },
    "por": {
      "official": "República do Paraguai",
      "common": "Paraguai"
    },
    "rus": {
      "official": "Республика Парагвай",
      "common": "Парагвай"
    },
    "spa": {
      "official": "República de Paraguay",
      "common": "Paraguay"
    },
    "fin": {
      "official": "Paraguayn tasavalta",
      "common": "Paraguay"
    }
  },
  "latlng": [
    -23,
    -58
  ],
  "demonym": "Paraguayan",
  "landlocked": true,
  "borders": [
    "ARG",
    "BOL",
    "BRA"
  ],
  "area": 406752,
  "codes": {
    "cca2": "PY",
    "ccn3": "600",
    "cca3": "PRY",
    "cioc": "PAR"
  },
  "provinces": [
    "Alto Paraguay",
    "Alto Parana",
    "Amambay",
    "Asuncion (city)",
    "Boqueron",
    "Caaguazu",
    "Caazapa",
    "Canindeyu",
    "Central",
    "Concepcion",
    "Cordillera",
    "Guaira",
    "Itapua",
    "Misiones",
    "Neembucu",
    "Paraguari",
    "Presidente Hayes",
    "San Pedro"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PRY",
        "properties": {
          "name": "Paraguay"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -62.685057,
                -22.249029
              ],
              [
                -62.291179,
                -21.051635
              ],
              [
                -62.265961,
                -20.513735
              ],
              [
                -61.786326,
                -19.633737
              ],
              [
                -60.043565,
                -19.342747
              ],
              [
                -59.115042,
                -19.356906
              ],
              [
                -58.183471,
                -19.868399
              ],
              [
                -58.166392,
                -20.176701
              ],
              [
                -57.870674,
                -20.732688
              ],
              [
                -57.937156,
                -22.090176
              ],
              [
                -56.88151,
                -22.282154
              ],
              [
                -56.473317,
                -22.0863
              ],
              [
                -55.797958,
                -22.35693
              ],
              [
                -55.610683,
                -22.655619
              ],
              [
                -55.517639,
                -23.571998
              ],
              [
                -55.400747,
                -23.956935
              ],
              [
                -55.027902,
                -24.001274
              ],
              [
                -54.652834,
                -23.839578
              ],
              [
                -54.29296,
                -24.021014
              ],
              [
                -54.293476,
                -24.5708
              ],
              [
                -54.428946,
                -25.162185
              ],
              [
                -54.625291,
                -25.739255
              ],
              [
                -54.788795,
                -26.621786
              ],
              [
                -55.695846,
                -27.387837
              ],
              [
                -56.486702,
                -27.548499
              ],
              [
                -57.60976,
                -27.395899
              ],
              [
                -58.618174,
                -27.123719
              ],
              [
                -57.63366,
                -25.603657
              ],
              [
                -57.777217,
                -25.16234
              ],
              [
                -58.807128,
                -24.771459
              ],
              [
                -60.028966,
                -24.032796
              ],
              [
                -60.846565,
                -23.880713
              ],
              [
                -62.685057,
                -22.249029
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],172:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Peru",
    "official": "Republic of Peru",
    "native": {
      "aym": {
        "official": "Piruw Suyu",
        "common": "Piruw"
      },
      "que": {
        "official": "Piruw Ripuwlika",
        "common": "Piruw"
      },
      "spa": {
        "official": "República del Perú",
        "common": "Perú"
      }
    }
  },
  "tld": [
    ".pe"
  ],
  "currency": [
    "PEN"
  ],
  "callingCode": [
    "51"
  ],
  "capital": "Lima",
  "altSpellings": [
    "PE",
    "Republic of Peru",
    "República del Perú"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "aym": "Aymara",
    "que": "Quechua",
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Peru",
      "common": "Peru"
    },
    "fra": {
      "official": "République du Pérou",
      "common": "Pérou"
    },
    "hrv": {
      "official": "Republika Peru",
      "common": "Peru"
    },
    "ita": {
      "official": "Repubblica del Perù",
      "common": "Perù"
    },
    "jpn": {
      "official": "ペルー共和国",
      "common": "ペルー"
    },
    "nld": {
      "official": "Republiek Peru",
      "common": "Peru"
    },
    "por": {
      "official": "República do Peru",
      "common": "Perú"
    },
    "rus": {
      "official": "Республика Перу",
      "common": "Перу"
    },
    "spa": {
      "official": "República de Perú",
      "common": "Perú"
    },
    "fin": {
      "official": "Perun tasavalta",
      "common": "Peru"
    }
  },
  "latlng": [
    -10,
    -76
  ],
  "demonym": "Peruvian",
  "landlocked": false,
  "borders": [
    "BOL",
    "BRA",
    "CHL",
    "COL",
    "ECU"
  ],
  "area": 1285216,
  "codes": {
    "cca2": "PE",
    "ccn3": "604",
    "cca3": "PER",
    "cioc": "PER"
  },
  "provinces": [
    "Amazonas",
    "Ancash",
    "Apurimac",
    "Arequipa",
    "Ayacucho",
    "Cajamarca",
    "Callao",
    "Cusco",
    "Huancavelica",
    "Huanuco",
    "Ica",
    "Junin",
    "La Libertad",
    "Lambayeque",
    "Lima",
    "Loreto",
    "Madre de Dios",
    "Moquegua",
    "Pasco",
    "Piura",
    "Puno",
    "San Martin",
    "Tacna",
    "Tumbes",
    "Ucayali"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PER",
        "properties": {
          "name": "Peru"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.590424,
                -17.580012
              ],
              [
                -69.858444,
                -18.092694
              ],
              [
                -70.372572,
                -18.347975
              ],
              [
                -71.37525,
                -17.773799
              ],
              [
                -71.462041,
                -17.363488
              ],
              [
                -73.44453,
                -16.359363
              ],
              [
                -75.237883,
                -15.265683
              ],
              [
                -76.009205,
                -14.649286
              ],
              [
                -76.423469,
                -13.823187
              ],
              [
                -76.259242,
                -13.535039
              ],
              [
                -77.106192,
                -12.222716
              ],
              [
                -78.092153,
                -10.377712
              ],
              [
                -79.036953,
                -8.386568
              ],
              [
                -79.44592,
                -7.930833
              ],
              [
                -79.760578,
                -7.194341
              ],
              [
                -80.537482,
                -6.541668
              ],
              [
                -81.249996,
                -6.136834
              ],
              [
                -80.926347,
                -5.690557
              ],
              [
                -81.410943,
                -4.736765
              ],
              [
                -81.09967,
                -4.036394
              ],
              [
                -80.302561,
                -3.404856
              ],
              [
                -80.184015,
                -3.821162
              ],
              [
                -80.469295,
                -4.059287
              ],
              [
                -80.442242,
                -4.425724
              ],
              [
                -80.028908,
                -4.346091
              ],
              [
                -79.624979,
                -4.454198
              ],
              [
                -79.205289,
                -4.959129
              ],
              [
                -78.639897,
                -4.547784
              ],
              [
                -78.450684,
                -3.873097
              ],
              [
                -77.837905,
                -3.003021
              ],
              [
                -76.635394,
                -2.608678
              ],
              [
                -75.544996,
                -1.56161
              ],
              [
                -75.233723,
                -0.911417
              ],
              [
                -75.373223,
                -0.152032
              ],
              [
                -75.106625,
                -0.057205
              ],
              [
                -74.441601,
                -0.53082
              ],
              [
                -74.122395,
                -1.002833
              ],
              [
                -73.659504,
                -1.260491
              ],
              [
                -73.070392,
                -2.308954
              ],
              [
                -72.325787,
                -2.434218
              ],
              [
                -71.774761,
                -2.16979
              ],
              [
                -71.413646,
                -2.342802
              ],
              [
                -70.813476,
                -2.256865
              ],
              [
                -70.047709,
                -2.725156
              ],
              [
                -70.692682,
                -3.742872
              ],
              [
                -70.394044,
                -3.766591
              ],
              [
                -69.893635,
                -4.298187
              ],
              [
                -70.794769,
                -4.251265
              ],
              [
                -70.928843,
                -4.401591
              ],
              [
                -71.748406,
                -4.593983
              ],
              [
                -72.891928,
                -5.274561
              ],
              [
                -72.964507,
                -5.741251
              ],
              [
                -73.219711,
                -6.089189
              ],
              [
                -73.120027,
                -6.629931
              ],
              [
                -73.724487,
                -6.918595
              ],
              [
                -73.723401,
                -7.340999
              ],
              [
                -73.987235,
                -7.52383
              ],
              [
                -73.571059,
                -8.424447
              ],
              [
                -73.015383,
                -9.032833
              ],
              [
                -73.226713,
                -9.462213
              ],
              [
                -72.563033,
                -9.520194
              ],
              [
                -72.184891,
                -10.053598
              ],
              [
                -71.302412,
                -10.079436
              ],
              [
                -70.481894,
                -9.490118
              ],
              [
                -70.548686,
                -11.009147
              ],
              [
                -70.093752,
                -11.123972
              ],
              [
                -69.529678,
                -10.951734
              ],
              [
                -68.66508,
                -12.5613
              ],
              [
                -68.88008,
                -12.899729
              ],
              [
                -68.929224,
                -13.602684
              ],
              [
                -68.948887,
                -14.453639
              ],
              [
                -69.339535,
                -14.953195
              ],
              [
                -69.160347,
                -15.323974
              ],
              [
                -69.389764,
                -15.660129
              ],
              [
                -68.959635,
                -16.500698
              ],
              [
                -69.590424,
                -17.580012
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],173:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Philippines",
    "official": "Republic of the Philippines",
    "native": {
      "eng": {
        "official": "Republic of the Philippines",
        "common": "Philippines"
      },
      "fil": {
        "official": "Republic of the Philippines",
        "common": "Pilipinas"
      }
    }
  },
  "tld": [
    ".ph"
  ],
  "currency": [
    "PHP"
  ],
  "callingCode": [
    "63"
  ],
  "capital": "Manila",
  "altSpellings": [
    "PH",
    "Republic of the Philippines",
    "Repúblika ng Pilipinas"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "eng": "English",
    "fil": "Filipino"
  },
  "translations": {
    "deu": {
      "official": "Republik der Philippinen",
      "common": "Philippinen"
    },
    "fra": {
      "official": "République des Philippines",
      "common": "Philippines"
    },
    "hrv": {
      "official": "Republika Filipini",
      "common": "Filipini"
    },
    "ita": {
      "official": "Repubblica delle Filippine",
      "common": "Filippine"
    },
    "jpn": {
      "official": "フィリピン共和国",
      "common": "フィリピン"
    },
    "nld": {
      "official": "Republiek der Filipijnen",
      "common": "Filipijnen"
    },
    "por": {
      "official": "República das Filipinas",
      "common": "Filipinas"
    },
    "rus": {
      "official": "Республика Филиппины",
      "common": "Филиппины"
    },
    "spa": {
      "official": "República de las Filipinas",
      "common": "Filipinas"
    },
    "fin": {
      "official": "Filippiinien tasavalta",
      "common": "Filippiinit"
    }
  },
  "latlng": [
    13,
    122
  ],
  "demonym": "Filipino",
  "landlocked": false,
  "borders": [],
  "area": 342353,
  "codes": {
    "cca2": "PH",
    "ccn3": "608",
    "cca3": "PHL",
    "cioc": "PHI"
  },
  "provinces": [
    "Abra",
    "Agusan del Norte",
    "Agusan del Sur",
    "Aklan",
    "Albay",
    "Angeles",
    "Antique",
    "Aurora",
    "Bacolod",
    "Bago",
    "Baguio",
    "Bais",
    "Basilan",
    "Basilan City",
    "Bataan",
    "Batanes",
    "Batangas",
    "Batangas City",
    "Benguet",
    "Bohol",
    "Bukidnon",
    "Bulacan",
    "Butuan",
    "Cabanatuan",
    "Cadiz",
    "Cagayan",
    "Cagayan de Oro",
    "Calbayog",
    "Caloocan",
    "Camarines Norte",
    "Camarines Sur",
    "Camiguin",
    "Canlaon",
    "Capiz",
    "Catanduanes",
    "Cavite",
    "Cavite City",
    "Cebu",
    "Cebu City",
    "Cotabato",
    "Dagupan",
    "Danao",
    "Dapitan",
    "Davao City Davao",
    "Davao del Sur",
    "Davao Oriental",
    "Dipolog",
    "Dumaguete",
    "Eastern Samar",
    "General Santos",
    "Gingoog",
    "Ifugao",
    "Iligan",
    "Ilocos Norte",
    "Ilocos Sur",
    "Iloilo",
    "Iloilo City",
    "Iriga",
    "Isabela",
    "Kalinga-Apayao",
    "La Carlota",
    "La Union",
    "Laguna",
    "Lanao del Norte",
    "Lanao del Sur",
    "Laoag",
    "Lapu-Lapu",
    "Legaspi",
    "Leyte",
    "Lipa",
    "Lucena",
    "Maguindanao",
    "Mandaue",
    "Manila",
    "Marawi",
    "Marinduque",
    "Masbate",
    "Mindoro Occidental",
    "Mindoro Oriental",
    "Misamis Occidental",
    "Misamis Oriental",
    "Mountain",
    "Naga",
    "Negros Occidental",
    "Negros Oriental",
    "North Cotabato",
    "Northern Samar",
    "Nueva Ecija",
    "Nueva Vizcaya",
    "Olongapo",
    "Ormoc",
    "Oroquieta",
    "Ozamis",
    "Pagadian",
    "Palawan",
    "Palayan",
    "Pampanga",
    "Pangasinan",
    "Pasay",
    "Puerto Princesa",
    "Quezon",
    "Quezon City",
    "Quirino",
    "Rizal",
    "Romblon",
    "Roxas",
    "Samar",
    "San Carlos (in Negros Occidental)",
    "San Carlos (in Pangasinan)",
    "San Jose",
    "San Pablo",
    "Silay",
    "Siquijor",
    "Sorsogon",
    "South Cotabato",
    "Southern Leyte",
    "Sultan Kudarat",
    "Sulu",
    "Surigao",
    "Surigao del Norte",
    "Surigao del Sur",
    "Tacloban",
    "Tagaytay",
    "Tagbilaran",
    "Tangub",
    "Tarlac",
    "Tawitawi",
    "Toledo",
    "Trece Martires",
    "Zambales",
    "Zamboanga",
    "Zamboanga del Norte",
    "Zamboanga del Sur"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PHL",
        "properties": {
          "name": "Philippines"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  126.376814,
                  8.414706
                ],
                [
                  126.478513,
                  7.750354
                ],
                [
                  126.537424,
                  7.189381
                ],
                [
                  126.196773,
                  6.274294
                ],
                [
                  125.831421,
                  7.293715
                ],
                [
                  125.363852,
                  6.786485
                ],
                [
                  125.683161,
                  6.049657
                ],
                [
                  125.396512,
                  5.581003
                ],
                [
                  124.219788,
                  6.161355
                ],
                [
                  123.93872,
                  6.885136
                ],
                [
                  124.243662,
                  7.36061
                ],
                [
                  123.610212,
                  7.833527
                ],
                [
                  123.296071,
                  7.418876
                ],
                [
                  122.825506,
                  7.457375
                ],
                [
                  122.085499,
                  6.899424
                ],
                [
                  121.919928,
                  7.192119
                ],
                [
                  122.312359,
                  8.034962
                ],
                [
                  122.942398,
                  8.316237
                ],
                [
                  123.487688,
                  8.69301
                ],
                [
                  123.841154,
                  8.240324
                ],
                [
                  124.60147,
                  8.514158
                ],
                [
                  124.764612,
                  8.960409
                ],
                [
                  125.471391,
                  8.986997
                ],
                [
                  125.412118,
                  9.760335
                ],
                [
                  126.222714,
                  9.286074
                ],
                [
                  126.306637,
                  8.782487
                ],
                [
                  126.376814,
                  8.414706
                ]
              ]
            ],
            [
              [
                [
                  123.982438,
                  10.278779
                ],
                [
                  123.623183,
                  9.950091
                ],
                [
                  123.309921,
                  9.318269
                ],
                [
                  122.995883,
                  9.022189
                ],
                [
                  122.380055,
                  9.713361
                ],
                [
                  122.586089,
                  9.981045
                ],
                [
                  122.837081,
                  10.261157
                ],
                [
                  122.947411,
                  10.881868
                ],
                [
                  123.49885,
                  10.940624
                ],
                [
                  123.337774,
                  10.267384
                ],
                [
                  124.077936,
                  11.232726
                ],
                [
                  123.982438,
                  10.278779
                ]
              ]
            ],
            [
              [
                [
                  118.504581,
                  9.316383
                ],
                [
                  117.174275,
                  8.3675
                ],
                [
                  117.664477,
                  9.066889
                ],
                [
                  118.386914,
                  9.6845
                ],
                [
                  118.987342,
                  10.376292
                ],
                [
                  119.511496,
                  11.369668
                ],
                [
                  119.689677,
                  10.554291
                ],
                [
                  119.029458,
                  10.003653
                ],
                [
                  118.504581,
                  9.316383
                ]
              ]
            ],
            [
              [
                [
                  121.883548,
                  11.891755
                ],
                [
                  122.483821,
                  11.582187
                ],
                [
                  123.120217,
                  11.58366
                ],
                [
                  123.100838,
                  11.165934
                ],
                [
                  122.637714,
                  10.741308
                ],
                [
                  122.00261,
                  10.441017
                ],
                [
                  121.967367,
                  10.905691
                ],
                [
                  122.03837,
                  11.415841
                ],
                [
                  121.883548,
                  11.891755
                ]
              ]
            ],
            [
              [
                [
                  125.502552,
                  12.162695
                ],
                [
                  125.783465,
                  11.046122
                ],
                [
                  125.011884,
                  11.311455
                ],
                [
                  125.032761,
                  10.975816
                ],
                [
                  125.277449,
                  10.358722
                ],
                [
                  124.801819,
                  10.134679
                ],
                [
                  124.760168,
                  10.837995
                ],
                [
                  124.459101,
                  10.88993
                ],
                [
                  124.302522,
                  11.495371
                ],
                [
                  124.891013,
                  11.415583
                ],
                [
                  124.87799,
                  11.79419
                ],
                [
                  124.266762,
                  12.557761
                ],
                [
                  125.227116,
                  12.535721
                ],
                [
                  125.502552,
                  12.162695
                ]
              ]
            ],
            [
              [
                [
                  121.527394,
                  13.06959
                ],
                [
                  121.26219,
                  12.20556
                ],
                [
                  120.833896,
                  12.704496
                ],
                [
                  120.323436,
                  13.466413
                ],
                [
                  121.180128,
                  13.429697
                ],
                [
                  121.527394,
                  13.06959
                ]
              ]
            ],
            [
              [
                [
                  121.321308,
                  18.504065
                ],
                [
                  121.937601,
                  18.218552
                ],
                [
                  122.246006,
                  18.47895
                ],
                [
                  122.336957,
                  18.224883
                ],
                [
                  122.174279,
                  17.810283
                ],
                [
                  122.515654,
                  17.093505
                ],
                [
                  122.252311,
                  16.262444
                ],
                [
                  121.662786,
                  15.931018
                ],
                [
                  121.50507,
                  15.124814
                ],
                [
                  121.728829,
                  14.328376
                ],
                [
                  122.258925,
                  14.218202
                ],
                [
                  122.701276,
                  14.336541
                ],
                [
                  123.950295,
                  13.782131
                ],
                [
                  123.855107,
                  13.237771
                ],
                [
                  124.181289,
                  12.997527
                ],
                [
                  124.077419,
                  12.536677
                ],
                [
                  123.298035,
                  13.027526
                ],
                [
                  122.928652,
                  13.55292
                ],
                [
                  122.671355,
                  13.185836
                ],
                [
                  122.03465,
                  13.784482
                ],
                [
                  121.126385,
                  13.636687
                ],
                [
                  120.628637,
                  13.857656
                ],
                [
                  120.679384,
                  14.271016
                ],
                [
                  120.991819,
                  14.525393
                ],
                [
                  120.693336,
                  14.756671
                ],
                [
                  120.564145,
                  14.396279
                ],
                [
                  120.070429,
                  14.970869
                ],
                [
                  119.920929,
                  15.406347
                ],
                [
                  119.883773,
                  16.363704
                ],
                [
                  120.286488,
                  16.034629
                ],
                [
                  120.390047,
                  17.599081
                ],
                [
                  120.715867,
                  18.505227
                ],
                [
                  121.321308,
                  18.504065
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],174:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Pitcairn Islands",
    "official": "Pitcairn Group of Islands",
    "native": {
      "eng": {
        "official": "Pitcairn Group of Islands",
        "common": "Pitcairn Islands"
      }
    }
  },
  "tld": [
    ".pn"
  ],
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "64"
  ],
  "capital": "Adamstown",
  "altSpellings": [
    "PN",
    "Pitcairn",
    "Pitcairn Henderson Ducie and Oeno Islands"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Pitcairn Inselgruppe",
      "common": "Pitcairn"
    },
    "fra": {
      "official": "Groupe d'îles Pitcairn",
      "common": "Îles Pitcairn"
    },
    "hrv": {
      "official": "Pitcairn skupine otoka",
      "common": "Pitcairnovo otočje"
    },
    "ita": {
      "official": "Pitcairn gruppo di isole",
      "common": "Isole Pitcairn"
    },
    "jpn": {
      "official": "島のピトケアングループ",
      "common": "ピトケアン"
    },
    "nld": {
      "official": "Pitcairn groep eilanden",
      "common": "Pitcairneilanden"
    },
    "por": {
      "official": "Pitcairn grupo de ilhas",
      "common": "Ilhas Pitcairn"
    },
    "rus": {
      "official": "Питкэрн группа островов",
      "common": "Острова Питкэрн"
    },
    "spa": {
      "official": "Grupo de Islas Pitcairn",
      "common": "Islas Pitcairn"
    },
    "fin": {
      "official": "Pitcairn",
      "common": "Pitcairn"
    }
  },
  "latlng": [
    -25.06666666,
    -130.1
  ],
  "demonym": "Pitcairn Islander",
  "landlocked": false,
  "borders": [],
  "area": 47,
  "codes": {
    "cca2": "PN",
    "ccn3": "612",
    "cca3": "PCN",
    "cioc": ""
  }
}
},{}],175:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Poland",
    "official": "Republic of Poland",
    "native": {
      "pol": {
        "official": "Rzeczpospolita Polska",
        "common": "Polska"
      }
    }
  },
  "tld": [
    ".pl"
  ],
  "currency": [
    "PLN"
  ],
  "callingCode": [
    "48"
  ],
  "capital": "Warsaw",
  "altSpellings": [
    "PL",
    "Republic of Poland",
    "Rzeczpospolita Polska"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "pol": "Polish"
  },
  "translations": {
    "deu": {
      "official": "Republik Polen",
      "common": "Polen"
    },
    "fra": {
      "official": "République de Pologne",
      "common": "Pologne"
    },
    "hrv": {
      "official": "Republika Poljska",
      "common": "Poljska"
    },
    "ita": {
      "official": "Repubblica di Polonia",
      "common": "Polonia"
    },
    "jpn": {
      "official": "ポーランド共和国",
      "common": "ポーランド"
    },
    "nld": {
      "official": "Republiek Polen",
      "common": "Polen"
    },
    "por": {
      "official": "República da Polónia",
      "common": "Polónia"
    },
    "rus": {
      "official": "Республика Польша",
      "common": "Польша"
    },
    "spa": {
      "official": "República de Polonia",
      "common": "Polonia"
    },
    "fin": {
      "official": "Puolan tasavalta",
      "common": "Puola"
    }
  },
  "latlng": [
    52,
    20
  ],
  "demonym": "Polish",
  "landlocked": false,
  "borders": [
    "BLR",
    "CZE",
    "DEU",
    "LTU",
    "RUS",
    "SVK",
    "UKR"
  ],
  "area": 312679,
  "codes": {
    "cca2": "PL",
    "ccn3": "616",
    "cca3": "POL",
    "cioc": "POL"
  },
  "provinces": [
    "Dolnoslaskie",
    "Kujawsko-Pomorskie",
    "Lodzkie",
    "Lubelskie",
    "Lubuskie",
    "Malopolskie",
    "Mazowieckie",
    "Opolskie",
    "Podkarpackie",
    "Podlaskie",
    "Pomorskie",
    "Slaskie",
    "Swietokrzyskie",
    "Warminsko-Mazurskie",
    "Wielkopolskie",
    "Zachodniopomorskie"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "POL",
        "properties": {
          "name": "Poland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                15.016996,
                51.106674
              ],
              [
                14.607098,
                51.745188
              ],
              [
                14.685026,
                52.089947
              ],
              [
                14.4376,
                52.62485
              ],
              [
                14.074521,
                52.981263
              ],
              [
                14.353315,
                53.248171
              ],
              [
                14.119686,
                53.757029
              ],
              [
                14.8029,
                54.050706
              ],
              [
                16.363477,
                54.513159
              ],
              [
                17.622832,
                54.851536
              ],
              [
                18.620859,
                54.682606
              ],
              [
                18.696255,
                54.438719
              ],
              [
                19.66064,
                54.426084
              ],
              [
                20.892245,
                54.312525
              ],
              [
                22.731099,
                54.327537
              ],
              [
                23.243987,
                54.220567
              ],
              [
                23.484128,
                53.912498
              ],
              [
                23.527536,
                53.470122
              ],
              [
                23.804935,
                53.089731
              ],
              [
                23.799199,
                52.691099
              ],
              [
                23.199494,
                52.486977
              ],
              [
                23.508002,
                52.023647
              ],
              [
                23.527071,
                51.578454
              ],
              [
                24.029986,
                50.705407
              ],
              [
                23.922757,
                50.424881
              ],
              [
                23.426508,
                50.308506
              ],
              [
                22.51845,
                49.476774
              ],
              [
                22.776419,
                49.027395
              ],
              [
                22.558138,
                49.085738
              ],
              [
                21.607808,
                49.470107
              ],
              [
                20.887955,
                49.328772
              ],
              [
                20.415839,
                49.431453
              ],
              [
                19.825023,
                49.217125
              ],
              [
                19.320713,
                49.571574
              ],
              [
                18.909575,
                49.435846
              ],
              [
                18.853144,
                49.49623
              ],
              [
                18.392914,
                49.988629
              ],
              [
                17.649445,
                50.049038
              ],
              [
                17.554567,
                50.362146
              ],
              [
                16.868769,
                50.473974
              ],
              [
                16.719476,
                50.215747
              ],
              [
                16.176253,
                50.422607
              ],
              [
                16.238627,
                50.697733
              ],
              [
                15.490972,
                50.78473
              ],
              [
                15.016996,
                51.106674
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],176:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Portugal",
    "official": "Portuguese Republic",
    "native": {
      "por": {
        "official": "República português",
        "common": "Portugal"
      }
    }
  },
  "tld": [
    ".pt"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "351"
  ],
  "capital": "Lisbon",
  "altSpellings": [
    "PT",
    "Portuguesa",
    "Portuguese Republic",
    "República Portuguesa"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "deu": {
      "official": "Portugiesische Republik",
      "common": "Portugal"
    },
    "fra": {
      "official": "République portugaise",
      "common": "Portugal"
    },
    "hrv": {
      "official": "Portugalska Republika",
      "common": "Portugal"
    },
    "ita": {
      "official": "Repubblica portoghese",
      "common": "Portogallo"
    },
    "jpn": {
      "official": "ポルトガル共和国",
      "common": "ポルトガル"
    },
    "nld": {
      "official": "Portugese Republiek",
      "common": "Portugal"
    },
    "por": {
      "official": "República português",
      "common": "Portugal"
    },
    "rus": {
      "official": "Португальская Республика",
      "common": "Португалия"
    },
    "spa": {
      "official": "República Portuguesa",
      "common": "Portugal"
    },
    "fin": {
      "official": "Portugalin tasavalta",
      "common": "Portugali"
    }
  },
  "latlng": [
    39.5,
    -8
  ],
  "demonym": "Portuguese",
  "landlocked": false,
  "borders": [
    "ESP"
  ],
  "area": 92090,
  "codes": {
    "cca2": "PT",
    "ccn3": "620",
    "cca3": "PRT",
    "cioc": "POR"
  },
  "provinces": [
    "Acores (Azores)",
    "Aveiro",
    "Beja",
    "Braga",
    "Braganca",
    "Castelo Branco",
    "Coimbra",
    "Evora",
    "Faro",
    "Guarda",
    "Leiria",
    "Lisboa",
    "Madeira",
    "Portalegre",
    "Porto",
    "Santarem",
    "Setubal",
    "Viana do Castelo",
    "Vila Real",
    "Viseu"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PRT",
        "properties": {
          "name": "Portugal"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -9.034818,
                41.880571
              ],
              [
                -8.671946,
                42.134689
              ],
              [
                -8.263857,
                42.280469
              ],
              [
                -8.013175,
                41.790886
              ],
              [
                -7.422513,
                41.792075
              ],
              [
                -7.251309,
                41.918346
              ],
              [
                -6.668606,
                41.883387
              ],
              [
                -6.389088,
                41.381815
              ],
              [
                -6.851127,
                41.111083
              ],
              [
                -6.86402,
                40.330872
              ],
              [
                -7.026413,
                40.184524
              ],
              [
                -7.066592,
                39.711892
              ],
              [
                -7.498632,
                39.629571
              ],
              [
                -7.098037,
                39.030073
              ],
              [
                -7.374092,
                38.373059
              ],
              [
                -7.029281,
                38.075764
              ],
              [
                -7.166508,
                37.803894
              ],
              [
                -7.537105,
                37.428904
              ],
              [
                -7.453726,
                37.097788
              ],
              [
                -7.855613,
                36.838269
              ],
              [
                -8.382816,
                36.97888
              ],
              [
                -8.898857,
                36.868809
              ],
              [
                -8.746101,
                37.651346
              ],
              [
                -8.839998,
                38.266243
              ],
              [
                -9.287464,
                38.358486
              ],
              [
                -9.526571,
                38.737429
              ],
              [
                -9.446989,
                39.392066
              ],
              [
                -9.048305,
                39.755093
              ],
              [
                -8.977353,
                40.159306
              ],
              [
                -8.768684,
                40.760639
              ],
              [
                -8.790853,
                41.184334
              ],
              [
                -8.990789,
                41.543459
              ],
              [
                -9.034818,
                41.880571
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],177:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Puerto Rico",
    "official": "Commonwealth of Puerto Rico",
    "native": {
      "eng": {
        "official": "Commonwealth of Puerto Rico",
        "common": "Puerto Rico"
      },
      "spa": {
        "official": "Estado Libre Asociado de Puerto Rico",
        "common": "Puerto Rico"
      }
    }
  },
  "tld": [
    ".pr"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1787",
    "1939"
  ],
  "capital": "San Juan",
  "altSpellings": [
    "PR",
    "Commonwealth of Puerto Rico",
    "Estado Libre Asociado de Puerto Rico"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English",
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Commonwealth von Puerto Rico",
      "common": "Puerto Rico"
    },
    "fra": {
      "official": "Porto Rico",
      "common": "Porto Rico"
    },
    "hrv": {
      "official": "Zajednica Puerto Rico",
      "common": "Portoriko"
    },
    "ita": {
      "official": "Commonwealth di Porto Rico",
      "common": "Porto Rico"
    },
    "jpn": {
      "official": "プエルトリコのコモンウェルス",
      "common": "プエルトリコ"
    },
    "nld": {
      "official": "Gemenebest van Puerto Rico",
      "common": "Puerto Rico"
    },
    "por": {
      "official": "Commonwealth of Puerto Rico",
      "common": "Porto Rico"
    },
    "rus": {
      "official": "Содружество Пуэрто-Рико",
      "common": "Пуэрто-Рико"
    },
    "spa": {
      "official": "Asociado de Puerto Rico",
      "common": "Puerto Rico"
    },
    "fin": {
      "official": "Puerto Rico",
      "common": "Puerto Rico"
    }
  },
  "latlng": [
    18.25,
    -66.5
  ],
  "demonym": "Puerto Rican",
  "landlocked": false,
  "borders": [],
  "area": 8870,
  "codes": {
    "cca2": "PR",
    "ccn3": "630",
    "cca3": "PRI",
    "cioc": "PUR"
  },
  "provinces": [
    "Adjuntas",
    "Aguada",
    "Aguadilla",
    "Aguas Buenas",
    "Aibonito",
    "Anasco",
    "Arecibo",
    "Arroyo",
    "Barceloneta",
    "Barranquitas",
    "Bayamon",
    "Cabo Rojo",
    "Caguas",
    "Camuy",
    "Canovanas",
    "Carolina",
    "Catano",
    "Cayey",
    "Ceiba",
    "Ciales",
    "Cidra",
    "Coamo",
    "Comerio",
    "Corozal",
    "Culebra",
    "Dorado",
    "Fajardo",
    "Florida",
    "Guanica",
    "Guayama",
    "Guayanilla",
    "Guaynabo",
    "Gurabo",
    "Hatillo",
    "Hormigueros",
    "Humacao",
    "Isabela",
    "Jayuya",
    "Juana Diaz",
    "Juncos",
    "Lajas",
    "Lares",
    "Las Marias",
    "Las Piedras",
    "Loiza",
    "Luquillo",
    "Manati",
    "Maricao",
    "Maunabo",
    "Mayaguez",
    "Moca",
    "Morovis",
    "Naguabo",
    "Naranjito",
    "Orocovis",
    "Patillas",
    "Penuelas",
    "Ponce",
    "Quebradillas",
    "Rincon",
    "Rio Grande",
    "Sabana Grande",
    "Salinas",
    "San German",
    "San Juan",
    "San Lorenzo",
    "San Sebastian",
    "Santa Isabel",
    "Toa Alta",
    "Toa Baja",
    "Trujillo Alto",
    "Utuado",
    "Vega Alta",
    "Vega Baja",
    "Vieques",
    "Villalba",
    "Yabucoa",
    "Yauco"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "PRI",
        "properties": {
          "name": "Puerto Rico"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -66.282434,
                18.514762
              ],
              [
                -65.771303,
                18.426679
              ],
              [
                -65.591004,
                18.228035
              ],
              [
                -65.847164,
                17.975906
              ],
              [
                -66.599934,
                17.981823
              ],
              [
                -67.184162,
                17.946553
              ],
              [
                -67.242428,
                18.37446
              ],
              [
                -67.100679,
                18.520601
              ],
              [
                -66.282434,
                18.514762
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],178:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Qatar",
    "official": "State of Qatar",
    "native": {
      "ara": {
        "official": "دولة قطر",
        "common": "قطر"
      }
    }
  },
  "tld": [
    ".qa",
    "قطر."
  ],
  "currency": [
    "QAR"
  ],
  "callingCode": [
    "974"
  ],
  "capital": "Doha",
  "altSpellings": [
    "QA",
    "State of Qatar",
    "Dawlat Qaṭar"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Staat Katar",
      "common": "Katar"
    },
    "fra": {
      "official": "État du Qatar",
      "common": "Qatar"
    },
    "hrv": {
      "official": "Država Katar",
      "common": "Katar"
    },
    "ita": {
      "official": "Stato del Qatar",
      "common": "Qatar"
    },
    "jpn": {
      "official": "カタール国",
      "common": "カタール"
    },
    "nld": {
      "official": "Staat Qatar",
      "common": "Qatar"
    },
    "por": {
      "official": "Estado do Qatar",
      "common": "Catar"
    },
    "rus": {
      "official": "Государство Катар",
      "common": "Катар"
    },
    "spa": {
      "official": "Estado de Qatar",
      "common": "Catar"
    },
    "fin": {
      "official": "Qatarin valtio",
      "common": "Qatar"
    }
  },
  "latlng": [
    25.5,
    51.25
  ],
  "demonym": "Qatari",
  "landlocked": false,
  "borders": [
    "SAU"
  ],
  "area": 11586,
  "codes": {
    "cca2": "QA",
    "ccn3": "634",
    "cca3": "QAT",
    "cioc": "QAT"
  },
  "provinces": [
    "Ad Dawhah",
    "Al Ghuwayriyah",
    "Al Jumayliyah",
    "Al Khawr",
    "Al Wakrah",
    "Ar Rayyan",
    "Jarayan al Batinah",
    "Madinat ash Shamal",
    "Umm Salal"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "QAT",
        "properties": {
          "name": "Qatar"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                50.810108,
                24.754743
              ],
              [
                50.743911,
                25.482424
              ],
              [
                51.013352,
                26.006992
              ],
              [
                51.286462,
                26.114582
              ],
              [
                51.589079,
                25.801113
              ],
              [
                51.6067,
                25.21567
              ],
              [
                51.389608,
                24.627386
              ],
              [
                51.112415,
                24.556331
              ],
              [
                50.810108,
                24.754743
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],179:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Réunion",
    "official": "Réunion Island",
    "native": {
      "fra": {
        "official": "Ile de la Réunion",
        "common": "La Réunion"
      }
    }
  },
  "tld": [
    ".re"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "262"
  ],
  "capital": "Saint-Denis",
  "altSpellings": [
    "RE",
    "Reunion"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Réunion",
      "common": "Réunion"
    },
    "fra": {
      "official": "Ile de la Réunion",
      "common": "Réunion"
    },
    "hrv": {
      "official": "Réunion Island",
      "common": "Réunion"
    },
    "ita": {
      "official": "Réunion",
      "common": "Riunione"
    },
    "jpn": {
      "official": "レユニオン島",
      "common": "レユニオン"
    },
    "nld": {
      "official": "Réunion",
      "common": "Réunion"
    },
    "por": {
      "official": "Ilha da Reunião",
      "common": "Reunião"
    },
    "rus": {
      "official": "Реюньон",
      "common": "Реюньон"
    },
    "spa": {
      "official": "Isla de la Reunión",
      "common": "Reunión"
    },
    "fin": {
      "official": "Réunion",
      "common": "Réunion"
    }
  },
  "latlng": [
    -21.15,
    55.5
  ],
  "demonym": "French",
  "landlocked": false,
  "borders": [],
  "area": 2511,
  "codes": {
    "cca2": "RE",
    "ccn3": "638",
    "cca3": "REU",
    "cioc": ""
  }
}
},{}],180:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Republic of the Congo",
    "official": "Republic of the Congo",
    "native": {
      "fra": {
        "official": "République du Congo",
        "common": "République du Congo"
      },
      "kon": {
        "official": "Repubilika ya Kongo",
        "common": "Repubilika ya Kongo"
      },
      "lin": {
        "official": "Republíki ya Kongó",
        "common": "Republíki ya Kongó"
      }
    }
  },
  "tld": [
    ".cg"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "242"
  ],
  "capital": "Brazzaville",
  "altSpellings": [
    "CG",
    "Congo",
    "Congo-Brazzaville"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French",
    "kon": "Kikongo",
    "lin": "Lingala"
  },
  "translations": {
    "cym": {
      "official": "Republic of the Congo",
      "common": "Gweriniaeth y Congo"
    },
    "deu": {
      "official": "Republik Kongo",
      "common": "Kongo"
    },
    "fra": {
      "official": "République du Congo",
      "common": "Congo"
    },
    "hrv": {
      "official": "Republika Kongo",
      "common": "Kongo"
    },
    "ita": {
      "official": "Repubblica del Congo",
      "common": "Congo"
    },
    "jpn": {
      "official": "コンゴ共和国",
      "common": "コンゴ共和国"
    },
    "nld": {
      "official": "Republiek Congo",
      "common": "Congo"
    },
    "por": {
      "official": "República do Congo",
      "common": "Congo"
    },
    "rus": {
      "official": "Республика Конго",
      "common": "Республика Конго"
    },
    "spa": {
      "official": "República del Congo",
      "common": "Congo"
    },
    "fin": {
      "official": "Kongon tasavalta",
      "common": "Kongo-Brazzaville"
    }
  },
  "latlng": [
    -1,
    15
  ],
  "demonym": "Congolese",
  "landlocked": false,
  "borders": [
    "AGO",
    "CMR",
    "CAF",
    "COD",
    "GAB"
  ],
  "area": 342000,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the Republic of the Congo.svg",
  "codes": {
    "cca2": "CG",
    "ccn3": "178",
    "cca3": "COG",
    "cioc": "CGO"
  }
}
},{}],181:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Romania",
    "official": "Romania",
    "native": {
      "ron": {
        "official": "România",
        "common": "România"
      }
    }
  },
  "tld": [
    ".ro"
  ],
  "currency": [
    "RON"
  ],
  "callingCode": [
    "40"
  ],
  "capital": "Bucharest",
  "altSpellings": [
    "RO",
    "Rumania",
    "Roumania",
    "România"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "ron": "Romanian"
  },
  "translations": {
    "deu": {
      "official": "Rumänien",
      "common": "Rumänien"
    },
    "fra": {
      "official": "Roumanie",
      "common": "Roumanie"
    },
    "hrv": {
      "official": "Rumunija",
      "common": "Rumunjska"
    },
    "ita": {
      "official": "Romania",
      "common": "Romania"
    },
    "jpn": {
      "official": "ルーマニア",
      "common": "ルーマニア"
    },
    "nld": {
      "official": "Roemenië",
      "common": "Roemenië"
    },
    "por": {
      "official": "Romênia",
      "common": "Roménia"
    },
    "rus": {
      "official": "Румыния",
      "common": "Румыния"
    },
    "spa": {
      "official": "Rumania",
      "common": "Rumania"
    },
    "fin": {
      "official": "Romania",
      "common": "Romania"
    }
  },
  "latlng": [
    46,
    25
  ],
  "demonym": "Romanian",
  "landlocked": false,
  "borders": [
    "BGR",
    "HUN",
    "MDA",
    "SRB",
    "UKR"
  ],
  "area": 238391,
  "codes": {
    "cca2": "RO",
    "ccn3": "642",
    "cca3": "ROU",
    "cioc": "ROU"
  }
}
},{}],182:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Russia",
    "official": "Russian Federation",
    "native": {
      "rus": {
        "official": "Русская Федерация",
        "common": "Россия"
      }
    }
  },
  "tld": [
    ".ru",
    ".su",
    ".рф"
  ],
  "currency": [
    "RUB"
  ],
  "callingCode": [
    "7"
  ],
  "capital": "Moscow",
  "altSpellings": [
    "RU",
    "Rossiya",
    "Russian Federation",
    "Российская Федерация",
    "Rossiyskaya Federatsiya"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "rus": "Russian"
  },
  "translations": {
    "deu": {
      "official": "Russische Föderation",
      "common": "Russland"
    },
    "fra": {
      "official": "Fédération de Russie",
      "common": "Russie"
    },
    "hrv": {
      "official": "Ruska Federacija",
      "common": "Rusija"
    },
    "ita": {
      "official": "Federazione russa",
      "common": "Russia"
    },
    "jpn": {
      "official": "ロシア連邦",
      "common": "ロシア連邦"
    },
    "nld": {
      "official": "Russische Federatie",
      "common": "Rusland"
    },
    "por": {
      "official": "Federação Russa",
      "common": "Rússia"
    },
    "rus": {
      "official": "Россия Федерация",
      "common": "Россия"
    },
    "spa": {
      "official": "Federación de Rusia",
      "common": "Rusia"
    },
    "fin": {
      "official": "Venäjän federaatio",
      "common": "Venäjä"
    }
  },
  "latlng": [
    60,
    100
  ],
  "demonym": "Russian",
  "landlocked": false,
  "borders": [
    "AZE",
    "BLR",
    "CHN",
    "EST",
    "FIN",
    "GEO",
    "KAZ",
    "PRK",
    "LVA",
    "LTU",
    "MNG",
    "NOR",
    "POL",
    "UKR"
  ],
  "area": 17098242,
  "codes": {
    "cca2": "RU",
    "ccn3": "643",
    "cca3": "RUS",
    "cioc": "RUS"
  },
  "provinces": [
    "Adygeya (Maykop)",
    "Aginskiy Buryatskiy (Aginskoye)",
    "Altay (Gorno-Altaysk)",
    "Altayskiy (Barnaul)",
    "Amurskaya (Blagoveshchensk)",
    "Arkhangel'skaya",
    "Astrakhanskaya",
    "Bashkortostan (Ufa)",
    "Belgorodskaya",
    "Bryanskaya",
    "Buryatiya (Ulan-Ude)",
    "Chechnya (Groznyy)",
    "Chelyabinskaya",
    "Chitinskaya",
    "Chukotskiy (Anadyr')",
    "Chuvashiya (Cheboksary)",
    "Dagestan (Makhachkala)",
    "Evenkiyskiy (Tura)",
    "Ingushetiya (Nazran')",
    "Irkutskaya",
    "Ivanovskaya",
    "Kabardino-Balkariya (Nal'chik)",
    "Kaliningradskaya",
    "Kalmykiya (Elista)",
    "Kaluzhskaya",
    "Kamchatskaya (Petropavlovsk-Kamchatskiy)",
    "Karachayevo-Cherkesiya (Cherkessk)",
    "Kareliya (Petrozavodsk)",
    "Kemerovskaya",
    "Khabarovskiy",
    "Khakasiya (Abakan)",
    "Khanty-Mansiyskiy (Khanty-Mansiysk)",
    "Kirovskaya",
    "Komi (Syktyvkar)",
    "Komi-Permyatskiy (Kudymkar)",
    "Koryakskiy (Palana)",
    "Kostromskaya",
    "Krasnodarskiy",
    "Krasnoyarskiy",
    "Kurganskaya",
    "Kurskaya",
    "Leningradskaya",
    "Lipetskaya",
    "Magadanskaya",
    "Mariy-El (Yoshkar-Ola)",
    "Mordoviya (Saransk)",
    "Moskovskaya",
    "Moskva (Moscow)",
    "Murmanskaya",
    "Nenetskiy (Nar'yan-Mar)",
    "Nizhegorodskaya",
    "Novgorodskaya",
    "Novosibirskaya",
    "Omskaya",
    "Orenburgskaya",
    "Orlovskaya (Orel)",
    "Penzenskaya",
    "Permskaya",
    "Primorskiy (Vladivostok)",
    "Pskovskaya",
    "Rostovskaya",
    "Ryazanskaya",
    "Sakha (Yakutsk)",
    "Sakhalinskaya (Yuzhno-Sakhalinsk)",
    "Samarskaya",
    "Sankt-Peterburg (Saint Petersburg)",
    "Saratovskaya",
    "Severnaya Osetiya-Alaniya [North Ossetia] (Vladikavkaz)",
    "Smolenskaya",
    "Stavropol'skiy",
    "Sverdlovskaya (Yekaterinburg)",
    "Tambovskaya",
    "Tatarstan (Kazan')",
    "Taymyrskiy (Dudinka)",
    "Tomskaya",
    "Tul'skaya",
    "Tverskaya",
    "Tyumenskaya",
    "Tyva (Kyzyl)",
    "Udmurtiya (Izhevsk)",
    "Ul'yanovskaya",
    "Ust'-Ordynskiy Buryatskiy (Ust'-Ordynskiy)",
    "Vladimirskaya",
    "Volgogradskaya",
    "Vologodskaya",
    "Voronezhskaya",
    "Yamalo-Nenetskiy (Salekhard)",
    "Yaroslavskaya",
    "Yevreyskaya"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "RUS",
        "properties": {
          "name": "Russia"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  143.648007,
                  50.7476
                ],
                [
                  144.654148,
                  48.976391
                ],
                [
                  143.173928,
                  49.306551
                ],
                [
                  142.558668,
                  47.861575
                ],
                [
                  143.533492,
                  46.836728
                ],
                [
                  143.505277,
                  46.137908
                ],
                [
                  142.747701,
                  46.740765
                ],
                [
                  142.09203,
                  45.966755
                ],
                [
                  141.906925,
                  46.805929
                ],
                [
                  142.018443,
                  47.780133
                ],
                [
                  141.904445,
                  48.859189
                ],
                [
                  142.1358,
                  49.615163
                ],
                [
                  142.179983,
                  50.952342
                ],
                [
                  141.594076,
                  51.935435
                ],
                [
                  141.682546,
                  53.301966
                ],
                [
                  142.606934,
                  53.762145
                ],
                [
                  142.209749,
                  54.225476
                ],
                [
                  142.654786,
                  54.365881
                ],
                [
                  142.914616,
                  53.704578
                ],
                [
                  143.260848,
                  52.74076
                ],
                [
                  143.235268,
                  51.75666
                ],
                [
                  143.648007,
                  50.7476
                ]
              ]
            ],
            [
              [
                [
                  22.731099,
                  54.327537
                ],
                [
                  20.892245,
                  54.312525
                ],
                [
                  19.66064,
                  54.426084
                ],
                [
                  19.888481,
                  54.86616
                ],
                [
                  21.268449,
                  55.190482
                ],
                [
                  22.315724,
                  55.015299
                ],
                [
                  22.757764,
                  54.856574
                ],
                [
                  22.651052,
                  54.582741
                ],
                [
                  22.731099,
                  54.327537
                ]
              ]
            ],
            [
              [
                [
                  -175.01425,
                  66.58435
                ],
                [
                  -174.33983,
                  66.33556
                ],
                [
                  -174.57182,
                  67.06219
                ],
                [
                  -171.85731,
                  66.91308
                ],
                [
                  -169.89958,
                  65.97724
                ],
                [
                  -170.89107,
                  65.54139
                ],
                [
                  -172.53025,
                  65.43791
                ],
                [
                  -172.555,
                  64.46079
                ],
                [
                  -172.95533,
                  64.25269
                ],
                [
                  -173.89184,
                  64.2826
                ],
                [
                  -174.65392,
                  64.63125
                ],
                [
                  -175.98353,
                  64.92288
                ],
                [
                  -176.20716,
                  65.35667
                ],
                [
                  -177.22266,
                  65.52024
                ],
                [
                  -178.35993,
                  65.39052
                ],
                [
                  -178.90332,
                  65.74044
                ],
                [
                  -178.68611,
                  66.11211
                ],
                [
                  -179.88377,
                  65.87456
                ],
                [
                  -179.43268,
                  65.40411
                ],
                [
                  -180,
                  64.979709
                ],
                [
                  -180,
                  68.963636
                ],
                [
                  -177.55,
                  68.2
                ],
                [
                  -174.92825,
                  67.20589
                ],
                [
                  -175.01425,
                  66.58435
                ]
              ]
            ],
            [
              [
                [
                  180,
                  70.832199
                ],
                [
                  178.903425,
                  70.78114
                ],
                [
                  178.7253,
                  71.0988
                ],
                [
                  180,
                  71.515714
                ],
                [
                  180,
                  70.832199
                ]
              ]
            ],
            [
              [
                [
                  -178.69378,
                  70.89302
                ],
                [
                  -180,
                  70.832199
                ],
                [
                  -180,
                  71.515714
                ],
                [
                  -179.871875,
                  71.55762
                ],
                [
                  -179.02433,
                  71.55553
                ],
                [
                  -177.577945,
                  71.26948
                ],
                [
                  -177.663575,
                  71.13277
                ],
                [
                  -178.69378,
                  70.89302
                ]
              ]
            ],
            [
              [
                [
                  143.60385,
                  73.21244
                ],
                [
                  142.08763,
                  73.20544
                ],
                [
                  140.038155,
                  73.31692
                ],
                [
                  139.86312,
                  73.36983
                ],
                [
                  140.81171,
                  73.76506
                ],
                [
                  142.06207,
                  73.85758
                ],
                [
                  143.48283,
                  73.47525
                ],
                [
                  143.60385,
                  73.21244
                ]
              ]
            ],
            [
              [
                [
                  150.73167,
                  75.08406
                ],
                [
                  149.575925,
                  74.68892
                ],
                [
                  147.977465,
                  74.778355
                ],
                [
                  146.11919,
                  75.17298
                ],
                [
                  146.358485,
                  75.49682
                ],
                [
                  148.22223,
                  75.345845
                ],
                [
                  150.73167,
                  75.08406
                ]
              ]
            ],
            [
              [
                [
                  145.086285,
                  75.562625
                ],
                [
                  144.3,
                  74.82
                ],
                [
                  140.61381,
                  74.84768
                ],
                [
                  138.95544,
                  74.61148
                ],
                [
                  136.97439,
                  75.26167
                ],
                [
                  137.51176,
                  75.94917
                ],
                [
                  138.831075,
                  76.13676
                ],
                [
                  141.471615,
                  76.09289
                ],
                [
                  145.086285,
                  75.562625
                ]
              ]
            ],
            [
              [
                [
                  57.535693,
                  70.720464
                ],
                [
                  56.944979,
                  70.632743
                ],
                [
                  53.677375,
                  70.762658
                ],
                [
                  53.412017,
                  71.206662
                ],
                [
                  51.601895,
                  71.474759
                ],
                [
                  51.455754,
                  72.014881
                ],
                [
                  52.478275,
                  72.229442
                ],
                [
                  52.444169,
                  72.774731
                ],
                [
                  54.427614,
                  73.627548
                ],
                [
                  53.50829,
                  73.749814
                ],
                [
                  55.902459,
                  74.627486
                ],
                [
                  55.631933,
                  75.081412
                ],
                [
                  57.868644,
                  75.60939
                ],
                [
                  61.170044,
                  76.251883
                ],
                [
                  64.498368,
                  76.439055
                ],
                [
                  66.210977,
                  76.809782
                ],
                [
                  68.15706,
                  76.939697
                ],
                [
                  68.852211,
                  76.544811
                ],
                [
                  68.180573,
                  76.233642
                ],
                [
                  64.637326,
                  75.737755
                ],
                [
                  61.583508,
                  75.260885
                ],
                [
                  58.477082,
                  74.309056
                ],
                [
                  56.986786,
                  73.333044
                ],
                [
                  55.419336,
                  72.371268
                ],
                [
                  55.622838,
                  71.540595
                ],
                [
                  57.535693,
                  70.720464
                ]
              ]
            ],
            [
              [
                [
                  106.97013,
                  76.97419
                ],
                [
                  107.24,
                  76.48
                ],
                [
                  108.1538,
                  76.72335
                ],
                [
                  111.07726,
                  76.71
                ],
                [
                  113.33151,
                  76.22224
                ],
                [
                  114.13417,
                  75.84764
                ],
                [
                  113.88539,
                  75.32779
                ],
                [
                  112.77918,
                  75.03186
                ],
                [
                  110.15125,
                  74.47673
                ],
                [
                  109.4,
                  74.18
                ],
                [
                  110.64,
                  74.04
                ],
                [
                  112.11919,
                  73.78774
                ],
                [
                  113.01954,
                  73.97693
                ],
                [
                  113.52958,
                  73.33505
                ],
                [
                  113.96881,
                  73.59488
                ],
                [
                  115.56782,
                  73.75285
                ],
                [
                  118.77633,
                  73.58772
                ],
                [
                  119.02,
                  73.12
                ],
                [
                  123.20066,
                  72.97122
                ],
                [
                  123.25777,
                  73.73503
                ],
                [
                  125.38,
                  73.56
                ],
                [
                  126.97644,
                  73.56549
                ],
                [
                  128.59126,
                  73.03871
                ],
                [
                  129.05157,
                  72.39872
                ],
                [
                  128.46,
                  71.98
                ],
                [
                  129.71599,
                  71.19304
                ],
                [
                  131.28858,
                  70.78699
                ],
                [
                  132.2535,
                  71.8363
                ],
                [
                  133.85766,
                  71.38642
                ],
                [
                  135.56193,
                  71.65525
                ],
                [
                  137.49755,
                  71.34763
                ],
                [
                  138.23409,
                  71.62803
                ],
                [
                  139.86983,
                  71.48783
                ],
                [
                  139.14791,
                  72.41619
                ],
                [
                  140.46817,
                  72.84941
                ],
                [
                  149.5,
                  72.2
                ],
                [
                  150.35118,
                  71.60643
                ],
                [
                  152.9689,
                  70.84222
                ],
                [
                  157.00688,
                  71.03141
                ],
                [
                  158.99779,
                  70.86672
                ],
                [
                  159.83031,
                  70.45324
                ],
                [
                  159.70866,
                  69.72198
                ],
                [
                  160.94053,
                  69.43728
                ],
                [
                  162.27907,
                  69.64204
                ],
                [
                  164.05248,
                  69.66823
                ],
                [
                  165.94037,
                  69.47199
                ],
                [
                  167.83567,
                  69.58269
                ],
                [
                  169.57763,
                  68.6938
                ],
                [
                  170.81688,
                  69.01363
                ],
                [
                  170.0082,
                  69.65276
                ],
                [
                  170.45345,
                  70.09703
                ],
                [
                  173.64391,
                  69.81743
                ],
                [
                  175.72403,
                  69.87725
                ],
                [
                  178.6,
                  69.4
                ],
                [
                  180,
                  68.963636
                ],
                [
                  180,
                  64.979709
                ],
                [
                  179.99281,
                  64.97433
                ],
                [
                  178.7072,
                  64.53493
                ],
                [
                  177.41128,
                  64.60821
                ],
                [
                  178.313,
                  64.07593
                ],
                [
                  178.90825,
                  63.25197
                ],
                [
                  179.37034,
                  62.98262
                ],
                [
                  179.48636,
                  62.56894
                ],
                [
                  179.22825,
                  62.3041
                ],
                [
                  177.3643,
                  62.5219
                ],
                [
                  174.56929,
                  61.76915
                ],
                [
                  173.68013,
                  61.65261
                ],
                [
                  172.15,
                  60.95
                ],
                [
                  170.6985,
                  60.33618
                ],
                [
                  170.33085,
                  59.88177
                ],
                [
                  168.90046,
                  60.57355
                ],
                [
                  166.29498,
                  59.78855
                ],
                [
                  165.84,
                  60.16
                ],
                [
                  164.87674,
                  59.7316
                ],
                [
                  163.53929,
                  59.86871
                ],
                [
                  163.21711,
                  59.21101
                ],
                [
                  162.01733,
                  58.24328
                ],
                [
                  162.05297,
                  57.83912
                ],
                [
                  163.19191,
                  57.61503
                ],
                [
                  163.05794,
                  56.15924
                ],
                [
                  162.12958,
                  56.12219
                ],
                [
                  161.70146,
                  55.28568
                ],
                [
                  162.11749,
                  54.85514
                ],
                [
                  160.36877,
                  54.34433
                ],
                [
                  160.02173,
                  53.20257
                ],
                [
                  158.53094,
                  52.95868
                ],
                [
                  158.23118,
                  51.94269
                ],
                [
                  156.78979,
                  51.01105
                ],
                [
                  156.42,
                  51.7
                ],
                [
                  155.99182,
                  53.15895
                ],
                [
                  155.43366,
                  55.38103
                ],
                [
                  155.91442,
                  56.76792
                ],
                [
                  156.75815,
                  57.3647
                ],
                [
                  156.81035,
                  57.83204
                ],
                [
                  158.36433,
                  58.05575
                ],
                [
                  160.15064,
                  59.31477
                ],
                [
                  161.87204,
                  60.343
                ],
                [
                  163.66969,
                  61.1409
                ],
                [
                  164.47355,
                  62.55061
                ],
                [
                  163.25842,
                  62.46627
                ],
                [
                  162.65791,
                  61.6425
                ],
                [
                  160.12148,
                  60.54423
                ],
                [
                  159.30232,
                  61.77396
                ],
                [
                  156.72068,
                  61.43442
                ],
                [
                  154.21806,
                  59.75818
                ],
                [
                  155.04375,
                  59.14495
                ],
                [
                  152.81185,
                  58.88385
                ],
                [
                  151.26573,
                  58.78089
                ],
                [
                  151.33815,
                  59.50396
                ],
                [
                  149.78371,
                  59.65573
                ],
                [
                  148.54481,
                  59.16448
                ],
                [
                  145.48722,
                  59.33637
                ],
                [
                  142.19782,
                  59.03998
                ],
                [
                  138.95848,
                  57.08805
                ],
                [
                  135.12619,
                  54.72959
                ],
                [
                  136.70171,
                  54.60355
                ],
                [
                  137.19342,
                  53.97732
                ],
                [
                  138.1647,
                  53.75501
                ],
                [
                  138.80463,
                  54.25455
                ],
                [
                  139.90151,
                  54.18968
                ],
                [
                  141.34531,
                  53.08957
                ],
                [
                  141.37923,
                  52.23877
                ],
                [
                  140.59742,
                  51.23967
                ],
                [
                  140.51308,
                  50.04553
                ],
                [
                  140.06193,
                  48.44671
                ],
                [
                  138.55472,
                  46.99965
                ],
                [
                  138.21971,
                  46.30795
                ],
                [
                  136.86232,
                  45.1435
                ],
                [
                  135.51535,
                  43.989
                ],
                [
                  134.86939,
                  43.39821
                ],
                [
                  133.53687,
                  42.81147
                ],
                [
                  132.90627,
                  42.79849
                ],
                [
                  132.27807,
                  43.28456
                ],
                [
                  130.93587,
                  42.55274
                ],
                [
                  130.78,
                  42.22
                ],
                [
                  130.64,
                  42.395
                ],
                [
                  130.633866,
                  42.903015
                ],
                [
                  131.144688,
                  42.92999
                ],
                [
                  131.288555,
                  44.11152
                ],
                [
                  131.02519,
                  44.96796
                ],
                [
                  131.883454,
                  45.321162
                ],
                [
                  133.09712,
                  45.14409
                ],
                [
                  133.769644,
                  46.116927
                ],
                [
                  134.11235,
                  47.21248
                ],
                [
                  134.50081,
                  47.57845
                ],
                [
                  135.026311,
                  48.47823
                ],
                [
                  133.373596,
                  48.183442
                ],
                [
                  132.50669,
                  47.78896
                ],
                [
                  130.98726,
                  47.79013
                ],
                [
                  130.582293,
                  48.729687
                ],
                [
                  129.397818,
                  49.4406
                ],
                [
                  127.6574,
                  49.76027
                ],
                [
                  127.287456,
                  50.739797
                ],
                [
                  126.939157,
                  51.353894
                ],
                [
                  126.564399,
                  51.784255
                ],
                [
                  125.946349,
                  52.792799
                ],
                [
                  125.068211,
                  53.161045
                ],
                [
                  123.57147,
                  53.4588
                ],
                [
                  122.245748,
                  53.431726
                ],
                [
                  121.003085,
                  53.251401
                ],
                [
                  120.177089,
                  52.753886
                ],
                [
                  120.725789,
                  52.516226
                ],
                [
                  120.7382,
                  51.96411
                ],
                [
                  120.18208,
                  51.64355
                ],
                [
                  119.27939,
                  50.58292
                ],
                [
                  119.288461,
                  50.142883
                ],
                [
                  117.879244,
                  49.510983
                ],
                [
                  116.678801,
                  49.888531
                ],
                [
                  115.485695,
                  49.805177
                ],
                [
                  114.96211,
                  50.140247
                ],
                [
                  114.362456,
                  50.248303
                ],
                [
                  112.89774,
                  49.543565
                ],
                [
                  111.581231,
                  49.377968
                ],
                [
                  110.662011,
                  49.130128
                ],
                [
                  109.402449,
                  49.292961
                ],
                [
                  108.475167,
                  49.282548
                ],
                [
                  107.868176,
                  49.793705
                ],
                [
                  106.888804,
                  50.274296
                ],
                [
                  105.886591,
                  50.406019
                ],
                [
                  104.62158,
                  50.27532
                ],
                [
                  103.676545,
                  50.089966
                ],
                [
                  102.25589,
                  50.51056
                ],
                [
                  102.06521,
                  51.25991
                ],
                [
                  100.88948,
                  51.516856
                ],
                [
                  99.981732,
                  51.634006
                ],
                [
                  98.861491,
                  52.047366
                ],
                [
                  97.82574,
                  51.010995
                ],
                [
                  98.231762,
                  50.422401
                ],
                [
                  97.25976,
                  49.72605
                ],
                [
                  95.81402,
                  49.97746
                ],
                [
                  94.815949,
                  50.013433
                ],
                [
                  94.147566,
                  50.480537
                ],
                [
                  93.10421,
                  50.49529
                ],
                [
                  92.234712,
                  50.802171
                ],
                [
                  90.713667,
                  50.331812
                ],
                [
                  88.805567,
                  49.470521
                ],
                [
                  87.751264,
                  49.297198
                ],
                [
                  87.35997,
                  49.214981
                ],
                [
                  86.829357,
                  49.826675
                ],
                [
                  85.54127,
                  49.692859
                ],
                [
                  85.11556,
                  50.117303
                ],
                [
                  84.416377,
                  50.3114
                ],
                [
                  83.935115,
                  50.889246
                ],
                [
                  83.383004,
                  51.069183
                ],
                [
                  81.945986,
                  50.812196
                ],
                [
                  80.568447,
                  51.388336
                ],
                [
                  80.03556,
                  50.864751
                ],
                [
                  77.800916,
                  53.404415
                ],
                [
                  76.525179,
                  54.177003
                ],
                [
                  76.8911,
                  54.490524
                ],
                [
                  74.38482,
                  53.54685
                ],
                [
                  73.425679,
                  53.48981
                ],
                [
                  73.508516,
                  54.035617
                ],
                [
                  72.22415,
                  54.376655
                ],
                [
                  71.180131,
                  54.133285
                ],
                [
                  70.865267,
                  55.169734
                ],
                [
                  69.068167,
                  55.38525
                ],
                [
                  68.1691,
                  54.970392
                ],
                [
                  65.66687,
                  54.60125
                ],
                [
                  65.178534,
                  54.354228
                ],
                [
                  61.4366,
                  54.00625
                ],
                [
                  60.978066,
                  53.664993
                ],
                [
                  61.699986,
                  52.979996
                ],
                [
                  60.739993,
                  52.719986
                ],
                [
                  60.927269,
                  52.447548
                ],
                [
                  59.967534,
                  51.96042
                ],
                [
                  61.588003,
                  51.272659
                ],
                [
                  61.337424,
                  50.79907
                ],
                [
                  59.932807,
                  50.842194
                ],
                [
                  59.642282,
                  50.545442
                ],
                [
                  58.36332,
                  51.06364
                ],
                [
                  56.77798,
                  51.04355
                ],
                [
                  55.71694,
                  50.62171
                ],
                [
                  54.532878,
                  51.02624
                ],
                [
                  52.328724,
                  51.718652
                ],
                [
                  50.766648,
                  51.692762
                ],
                [
                  48.702382,
                  50.605128
                ],
                [
                  48.577841,
                  49.87476
                ],
                [
                  47.54948,
                  50.454698
                ],
                [
                  46.751596,
                  49.356006
                ],
                [
                  47.043672,
                  49.152039
                ],
                [
                  46.466446,
                  48.394152
                ],
                [
                  47.31524,
                  47.71585
                ],
                [
                  48.05725,
                  47.74377
                ],
                [
                  48.694734,
                  47.075628
                ],
                [
                  48.59325,
                  46.56104
                ],
                [
                  49.10116,
                  46.39933
                ],
                [
                  48.64541,
                  45.80629
                ],
                [
                  47.67591,
                  45.64149
                ],
                [
                  46.68201,
                  44.6092
                ],
                [
                  47.59094,
                  43.66016
                ],
                [
                  47.49252,
                  42.98658
                ],
                [
                  48.58437,
                  41.80888
                ],
                [
                  47.987283,
                  41.405819
                ],
                [
                  47.815666,
                  41.151416
                ],
                [
                  47.373315,
                  41.219732
                ],
                [
                  46.686071,
                  41.827137
                ],
                [
                  46.404951,
                  41.860675
                ],
                [
                  45.7764,
                  42.09244
                ],
                [
                  45.470279,
                  42.502781
                ],
                [
                  44.537623,
                  42.711993
                ],
                [
                  43.93121,
                  42.55496
                ],
                [
                  43.75599,
                  42.74083
                ],
                [
                  42.3944,
                  43.2203
                ],
                [
                  40.92219,
                  43.38215
                ],
                [
                  40.076965,
                  43.553104
                ],
                [
                  39.955009,
                  43.434998
                ],
                [
                  38.68,
                  44.28
                ],
                [
                  37.53912,
                  44.65721
                ],
                [
                  36.67546,
                  45.24469
                ],
                [
                  37.40317,
                  45.40451
                ],
                [
                  38.23295,
                  46.24087
                ],
                [
                  37.67372,
                  46.63657
                ],
                [
                  39.14767,
                  47.04475
                ],
                [
                  39.1212,
                  47.26336
                ],
                [
                  38.223538,
                  47.10219
                ],
                [
                  38.255112,
                  47.5464
                ],
                [
                  38.77057,
                  47.82562
                ],
                [
                  39.738278,
                  47.898937
                ],
                [
                  39.89562,
                  48.23241
                ],
                [
                  39.67465,
                  48.78382
                ],
                [
                  40.080789,
                  49.30743
                ],
                [
                  40.06904,
                  49.60105
                ],
                [
                  38.594988,
                  49.926462
                ],
                [
                  38.010631,
                  49.915662
                ],
                [
                  37.39346,
                  50.383953
                ],
                [
                  36.626168,
                  50.225591
                ],
                [
                  35.356116,
                  50.577197
                ],
                [
                  35.37791,
                  50.77394
                ],
                [
                  35.022183,
                  51.207572
                ],
                [
                  34.224816,
                  51.255993
                ],
                [
                  34.141978,
                  51.566413
                ],
                [
                  34.391731,
                  51.768882
                ],
                [
                  33.7527,
                  52.335075
                ],
                [
                  32.715761,
                  52.238465
                ],
                [
                  32.412058,
                  52.288695
                ],
                [
                  32.15944,
                  52.06125
                ],
                [
                  31.78597,
                  52.10168
                ],
                [
                  31.540018,
                  52.742052
                ],
                [
                  31.305201,
                  53.073996
                ],
                [
                  31.49764,
                  53.16743
                ],
                [
                  32.304519,
                  53.132726
                ],
                [
                  32.693643,
                  53.351421
                ],
                [
                  32.405599,
                  53.618045
                ],
                [
                  31.731273,
                  53.794029
                ],
                [
                  31.791424,
                  53.974639
                ],
                [
                  31.384472,
                  54.157056
                ],
                [
                  30.757534,
                  54.811771
                ],
                [
                  30.971836,
                  55.081548
                ],
                [
                  30.873909,
                  55.550976
                ],
                [
                  29.896294,
                  55.789463
                ],
                [
                  29.371572,
                  55.670091
                ],
                [
                  29.229513,
                  55.918344
                ],
                [
                  28.176709,
                  56.16913
                ],
                [
                  27.855282,
                  56.759326
                ],
                [
                  27.770016,
                  57.244258
                ],
                [
                  27.288185,
                  57.474528
                ],
                [
                  27.716686,
                  57.791899
                ],
                [
                  27.42015,
                  58.72457
                ],
                [
                  28.131699,
                  59.300825
                ],
                [
                  27.98112,
                  59.47537
                ],
                [
                  29.1177,
                  60.02805
                ],
                [
                  28.07,
                  60.50352
                ],
                [
                  30.211107,
                  61.780028
                ],
                [
                  31.139991,
                  62.357693
                ],
                [
                  31.516092,
                  62.867687
                ],
                [
                  30.035872,
                  63.552814
                ],
                [
                  30.444685,
                  64.204453
                ],
                [
                  29.54443,
                  64.948672
                ],
                [
                  30.21765,
                  65.80598
                ],
                [
                  29.054589,
                  66.944286
                ],
                [
                  29.977426,
                  67.698297
                ],
                [
                  28.445944,
                  68.364613
                ],
                [
                  28.59193,
                  69.064777
                ],
                [
                  29.39955,
                  69.15692
                ],
                [
                  31.10108,
                  69.55811
                ],
                [
                  32.13272,
                  69.90595
                ],
                [
                  33.77547,
                  69.30142
                ],
                [
                  36.51396,
                  69.06342
                ],
                [
                  40.29234,
                  67.9324
                ],
                [
                  41.05987,
                  67.45713
                ],
                [
                  41.12595,
                  66.79158
                ],
                [
                  40.01583,
                  66.26618
                ],
                [
                  38.38295,
                  65.99953
                ],
                [
                  33.91871,
                  66.75961
                ],
                [
                  33.18444,
                  66.63253
                ],
                [
                  34.81477,
                  65.90015
                ],
                [
                  34.878574,
                  65.436213
                ],
                [
                  34.94391,
                  64.41437
                ],
                [
                  36.23129,
                  64.10945
                ],
                [
                  37.01273,
                  63.84983
                ],
                [
                  37.14197,
                  64.33471
                ],
                [
                  36.539579,
                  64.76446
                ],
                [
                  37.17604,
                  65.14322
                ],
                [
                  39.59345,
                  64.52079
                ],
                [
                  40.4356,
                  64.76446
                ],
                [
                  39.7626,
                  65.49682
                ],
                [
                  42.09309,
                  66.47623
                ],
                [
                  43.01604,
                  66.41858
                ],
                [
                  43.94975,
                  66.06908
                ],
                [
                  44.53226,
                  66.75634
                ],
                [
                  43.69839,
                  67.35245
                ],
                [
                  44.18795,
                  67.95051
                ],
                [
                  43.45282,
                  68.57079
                ],
                [
                  46.25,
                  68.25
                ],
                [
                  46.82134,
                  67.68997
                ],
                [
                  45.55517,
                  67.56652
                ],
                [
                  45.56202,
                  67.01005
                ],
                [
                  46.34915,
                  66.66767
                ],
                [
                  47.89416,
                  66.88455
                ],
                [
                  48.13876,
                  67.52238
                ],
                [
                  50.22766,
                  67.99867
                ],
                [
                  53.71743,
                  68.85738
                ],
                [
                  54.47171,
                  68.80815
                ],
                [
                  53.48582,
                  68.20131
                ],
                [
                  54.72628,
                  68.09702
                ],
                [
                  55.44268,
                  68.43866
                ],
                [
                  57.31702,
                  68.46628
                ],
                [
                  58.802,
                  68.88082
                ],
                [
                  59.94142,
                  68.27844
                ],
                [
                  61.07784,
                  68.94069
                ],
                [
                  60.03,
                  69.52
                ],
                [
                  60.55,
                  69.85
                ],
                [
                  63.504,
                  69.54739
                ],
                [
                  64.888115,
                  69.234835
                ],
                [
                  68.51216,
                  68.09233
                ],
                [
                  69.18068,
                  68.61563
                ],
                [
                  68.16444,
                  69.14436
                ],
                [
                  68.13522,
                  69.35649
                ],
                [
                  66.93008,
                  69.45461
                ],
                [
                  67.25976,
                  69.92873
                ],
                [
                  66.72492,
                  70.70889
                ],
                [
                  66.69466,
                  71.02897
                ],
                [
                  68.54006,
                  71.9345
                ],
                [
                  69.19636,
                  72.84336
                ],
                [
                  69.94,
                  73.04
                ],
                [
                  72.58754,
                  72.77629
                ],
                [
                  72.79603,
                  72.22006
                ],
                [
                  71.84811,
                  71.40898
                ],
                [
                  72.47011,
                  71.09019
                ],
                [
                  72.79188,
                  70.39114
                ],
                [
                  72.5647,
                  69.02085
                ],
                [
                  73.66787,
                  68.4079
                ],
                [
                  73.2387,
                  67.7404
                ],
                [
                  71.28,
                  66.32
                ],
                [
                  72.42301,
                  66.17267
                ],
                [
                  72.82077,
                  66.53267
                ],
                [
                  73.92099,
                  66.78946
                ],
                [
                  74.18651,
                  67.28429
                ],
                [
                  75.052,
                  67.76047
                ],
                [
                  74.46926,
                  68.32899
                ],
                [
                  74.93584,
                  68.98918
                ],
                [
                  73.84236,
                  69.07146
                ],
                [
                  73.60187,
                  69.62763
                ],
                [
                  74.3998,
                  70.63175
                ],
                [
                  73.1011,
                  71.44717
                ],
                [
                  74.89082,
                  72.12119
                ],
                [
                  74.65926,
                  72.83227
                ],
                [
                  75.15801,
                  72.85497
                ],
                [
                  75.68351,
                  72.30056
                ],
                [
                  75.28898,
                  71.33556
                ],
                [
                  76.35911,
                  71.15287
                ],
                [
                  75.90313,
                  71.87401
                ],
                [
                  77.57665,
                  72.26717
                ],
                [
                  79.65202,
                  72.32011
                ],
                [
                  81.5,
                  71.75
                ],
                [
                  80.61071,
                  72.58285
                ],
                [
                  80.51109,
                  73.6482
                ],
                [
                  82.25,
                  73.85
                ],
                [
                  84.65526,
                  73.80591
                ],
                [
                  86.8223,
                  73.93688
                ],
                [
                  86.00956,
                  74.45967
                ],
                [
                  87.16682,
                  75.11643
                ],
                [
                  88.31571,
                  75.14393
                ],
                [
                  90.26,
                  75.64
                ],
                [
                  92.90058,
                  75.77333
                ],
                [
                  93.23421,
                  76.0472
                ],
                [
                  95.86,
                  76.14
                ],
                [
                  96.67821,
                  75.91548
                ],
                [
                  98.92254,
                  76.44689
                ],
                [
                  100.75967,
                  76.43028
                ],
                [
                  101.03532,
                  76.86189
                ],
                [
                  101.99084,
                  77.28754
                ],
                [
                  104.3516,
                  77.69792
                ],
                [
                  106.06664,
                  77.37389
                ],
                [
                  104.705,
                  77.1274
                ],
                [
                  106.97013,
                  76.97419
                ]
              ]
            ],
            [
              [
                [
                  105.07547,
                  78.30689
                ],
                [
                  99.43814,
                  77.921
                ],
                [
                  101.2649,
                  79.23399
                ],
                [
                  102.08635,
                  79.34641
                ],
                [
                  102.837815,
                  79.28129
                ],
                [
                  105.37243,
                  78.71334
                ],
                [
                  105.07547,
                  78.30689
                ]
              ]
            ],
            [
              [
                [
                  51.136187,
                  80.54728
                ],
                [
                  49.793685,
                  80.415428
                ],
                [
                  48.894411,
                  80.339567
                ],
                [
                  48.754937,
                  80.175468
                ],
                [
                  47.586119,
                  80.010181
                ],
                [
                  46.502826,
                  80.247247
                ],
                [
                  47.072455,
                  80.559424
                ],
                [
                  44.846958,
                  80.58981
                ],
                [
                  46.799139,
                  80.771918
                ],
                [
                  48.318477,
                  80.78401
                ],
                [
                  48.522806,
                  80.514569
                ],
                [
                  49.09719,
                  80.753986
                ],
                [
                  50.039768,
                  80.918885
                ],
                [
                  51.522933,
                  80.699726
                ],
                [
                  51.136187,
                  80.54728
                ]
              ]
            ],
            [
              [
                [
                  99.93976,
                  78.88094
                ],
                [
                  97.75794,
                  78.7562
                ],
                [
                  94.97259,
                  79.044745
                ],
                [
                  93.31288,
                  79.4265
                ],
                [
                  92.5454,
                  80.14379
                ],
                [
                  91.18107,
                  80.34146
                ],
                [
                  93.77766,
                  81.0246
                ],
                [
                  95.940895,
                  81.2504
                ],
                [
                  97.88385,
                  80.746975
                ],
                [
                  100.186655,
                  79.780135
                ],
                [
                  99.93976,
                  78.88094
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],183:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Rwanda",
    "official": "Republic of Rwanda",
    "native": {
      "eng": {
        "official": "Republic of Rwanda",
        "common": "Rwanda"
      },
      "fra": {
        "official": "République rwandaise",
        "common": "Rwanda"
      },
      "kin": {
        "official": "Repubulika y'u Rwanda",
        "common": "Rwanda"
      }
    }
  },
  "tld": [
    ".rw"
  ],
  "currency": [
    "RWF"
  ],
  "callingCode": [
    "250"
  ],
  "capital": "Kigali",
  "altSpellings": [
    "RW",
    "Republic of Rwanda",
    "Repubulika y'u Rwanda",
    "République du Rwanda"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English",
    "fra": "French",
    "kin": "Kinyarwanda"
  },
  "translations": {
    "deu": {
      "official": "Republik Ruanda",
      "common": "Ruanda"
    },
    "fra": {
      "official": "République rwandaise",
      "common": "Rwanda"
    },
    "hrv": {
      "official": "Republika Ruandi",
      "common": "Ruanda"
    },
    "ita": {
      "official": "Repubblica del Ruanda",
      "common": "Ruanda"
    },
    "jpn": {
      "official": "ルワンダ共和国",
      "common": "ルワンダ"
    },
    "nld": {
      "official": "Republiek Rwanda",
      "common": "Rwanda"
    },
    "por": {
      "official": "República do Ruanda",
      "common": "Ruanda"
    },
    "rus": {
      "official": "Республика Руанда",
      "common": "Руанда"
    },
    "spa": {
      "official": "República de Rwanda",
      "common": "Ruanda"
    },
    "fin": {
      "official": "Ruandan tasavalta",
      "common": "Ruanda"
    }
  },
  "latlng": [
    -2,
    30
  ],
  "demonym": "Rwandan",
  "landlocked": true,
  "borders": [
    "BDI",
    "COD",
    "TZA",
    "UGA"
  ],
  "area": 26338,
  "codes": {
    "cca2": "RW",
    "ccn3": "646",
    "cca3": "RWA",
    "cioc": "RWA"
  },
  "provinces": [
    "Butare",
    "Byumba",
    "Cyangugu",
    "Gikongoro",
    "Gisenyi",
    "Gitarama",
    "Kibungo",
    "Kibuye",
    "Kigali Rurale",
    "Kigali-ville",
    "Ruhengeri",
    "Umutara"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "RWA",
        "properties": {
          "name": "Rwanda"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                30.419105,
                -1.134659
              ],
              [
                30.816135,
                -1.698914
              ],
              [
                30.758309,
                -2.28725
              ],
              [
                30.469696,
                -2.413858
              ],
              [
                29.938359,
                -2.348487
              ],
              [
                29.632176,
                -2.917858
              ],
              [
                29.024926,
                -2.839258
              ],
              [
                29.117479,
                -2.292211
              ],
              [
                29.254835,
                -2.21511
              ],
              [
                29.291887,
                -1.620056
              ],
              [
                29.579466,
                -1.341313
              ],
              [
                29.821519,
                -1.443322
              ],
              [
                30.419105,
                -1.134659
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],184:[function(require,module,exports){
module.exports={
  "name": {
    "common": "São Tomé and Príncipe",
    "official": "Democratic Republic of São Tomé and Príncipe",
    "native": {
      "por": {
        "official": "República Democrática do São Tomé e Príncipe",
        "common": "São Tomé e Príncipe"
      }
    }
  },
  "tld": [
    ".st"
  ],
  "currency": [
    "STD"
  ],
  "callingCode": [
    "239"
  ],
  "capital": "São Tomé",
  "altSpellings": [
    "ST",
    "Democratic Republic of São Tomé and Príncipe",
    "Sao Tome and Principe",
    "República Democrática de São Tomé e Príncipe"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Republik São Tomé und Príncipe",
      "common": "São Tomé und Príncipe"
    },
    "fra": {
      "official": "République démocratique de São Tomé et Príncipe",
      "common": "São Tomé et Príncipe"
    },
    "hrv": {
      "official": "Demokratska Republika São Tome i Principe",
      "common": "Sveti Toma i Princip"
    },
    "ita": {
      "official": "Repubblica democratica di São Tomé e Príncipe",
      "common": "São Tomé e Príncipe"
    },
    "jpn": {
      "official": "サントメ·プリンシペ民主共和国",
      "common": "サントメ・プリンシペ"
    },
    "nld": {
      "official": "Democratische Republiek Sao Tomé en Principe",
      "common": "Sao Tomé en Principe"
    },
    "por": {
      "official": "República Democrática de São Tomé e Príncipe",
      "common": "São Tomé e Príncipe"
    },
    "rus": {
      "official": "Демократическая Республика Сан-Томе и Принсипи",
      "common": "Сан-Томе и Принсипи"
    },
    "spa": {
      "official": "República Democrática de Santo Tomé y Príncipe",
      "common": "Santo Tomé y Príncipe"
    },
    "fin": {
      "official": "São Tomé ja Príncipen demokraattinen tasavalta",
      "common": "São Téme ja Príncipe"
    }
  },
  "latlng": [
    1,
    7
  ],
  "demonym": "Sao Tomean",
  "landlocked": false,
  "borders": [],
  "area": 964,
  "codes": {
    "cca2": "ST",
    "ccn3": "678",
    "cca3": "STP",
    "cioc": "STP"
  }
}
},{}],185:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Barthélemy",
    "official": "Collectivity of Saint Barthélemy",
    "native": {
      "fra": {
        "official": "Collectivité de Saint-Barthélemy",
        "common": "Saint-Barthélemy"
      }
    }
  },
  "tld": [
    ".bl"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "590"
  ],
  "capital": "Gustavia",
  "altSpellings": [
    "BL",
    "St. Barthelemy",
    "Collectivity of Saint Barthélemy",
    "Collectivité de Saint-Barthélemy"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Gebietskörperschaft Saint -Barthélemy",
      "common": "Saint-Barthélemy"
    },
    "fra": {
      "official": "Collectivité de Saint-Barthélemy",
      "common": "Saint-Barthélemy"
    },
    "hrv": {
      "official": "Kolektivnost sv Barthélemy",
      "common": "Saint Barthélemy"
    },
    "ita": {
      "official": "Collettività di Saint Barthélemy",
      "common": "Antille Francesi"
    },
    "jpn": {
      "official": "サン·バルテルミー島の集合体",
      "common": "サン・バルテルミー"
    },
    "nld": {
      "official": "Gemeenschap Saint Barthélemy",
      "common": "Saint Barthélemy"
    },
    "por": {
      "official": "Coletividade de Saint Barthélemy",
      "common": "São Bartolomeu"
    },
    "rus": {
      "official": "Коллективность Санкт -Бартельми",
      "common": "Сен-Бартелеми"
    },
    "spa": {
      "official": "Colectividad de San Barthélemy",
      "common": "San Bartolomé"
    },
    "fin": {
      "official": "Saint-Barthélemyn yhteisö",
      "common": "Saint-Barthélemy"
    }
  },
  "latlng": [
    18.5,
    -63.41666666
  ],
  "demonym": "Saint Barthélemy Islander",
  "landlocked": false,
  "borders": [],
  "area": 21,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Saint Barthelemy (local).svg",
  "codes": {
    "cca2": "BL",
    "ccn3": "652",
    "cca3": "BLM",
    "cioc": ""
  }
}
},{}],186:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Kitts and Nevis",
    "official": "Federation of Saint Christopher and Nevisa",
    "native": {
      "eng": {
        "official": "Federation of Saint Christopher and Nevisa",
        "common": "Saint Kitts and Nevis"
      }
    }
  },
  "tld": [
    ".kn"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1869"
  ],
  "capital": "Basseterre",
  "altSpellings": [
    "KN",
    "Federation of Saint Christopher and Nevis"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Föderation von Saint Kitts und Nevisa",
      "common": "Saint Christopher und Nevis"
    },
    "fra": {
      "official": "Fédération de Saint -Christophe-et Nevisa",
      "common": "Saint-Christophe-et-Niévès"
    },
    "hrv": {
      "official": "Federacija Sv.Kristofora i Nevisa",
      "common": "Sveti Kristof i Nevis"
    },
    "ita": {
      "official": "Federazione di Saint Christopher e Nevisa",
      "common": "Saint Kitts e Nevis"
    },
    "jpn": {
      "official": "セントクリストファーNevisa連盟",
      "common": "セントクリストファー・ネイビス"
    },
    "nld": {
      "official": "Federatie van Saint Kitts en Nevisa",
      "common": "Saint Kitts en Nevis"
    },
    "por": {
      "official": "Federação de São Cristóvão e Nevisa",
      "common": "São Cristóvão e Nevis"
    },
    "rus": {
      "official": "Федерация Сент-Кристофер и Nevisa",
      "common": "Сент-Китс и Невис"
    },
    "spa": {
      "official": "Federación de San Cristóbal y Nevisa",
      "common": "San Cristóbal y Nieves"
    },
    "fin": {
      "official": "Saint Christopherin ja Nevisin federaatio",
      "common": "Saint Kitts ja Nevis"
    }
  },
  "latlng": [
    17.33333333,
    -62.75
  ],
  "demonym": "Kittitian or Nevisian",
  "landlocked": false,
  "borders": [],
  "area": 261,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Saint Kitts and Nevis.svg",
  "codes": {
    "cca2": "KN",
    "ccn3": "659",
    "cca3": "KNA",
    "cioc": "SKN"
  },
  "provinces": [
    "Christ Church Nichola Town",
    "Saint Anne Sandy Point",
    "Saint George Basseterre",
    "Saint George Gingerland",
    "Saint James Windward",
    "Saint John Capisterre",
    "Saint John Figtree",
    "Saint Mary Cayon",
    "Saint Paul Capisterre",
    "Saint Paul Charlestown",
    "Saint Peter Basseterre",
    "Saint Thomas Lowland",
    "Saint Thomas Middle Island",
    "Trinity Palmetto Point"
  ],
  "geoJSON": {}
}
},{}],187:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Lucia",
    "official": "Saint Lucia",
    "native": {
      "eng": {
        "official": "Saint Lucia",
        "common": "Saint Lucia"
      }
    }
  },
  "tld": [
    ".lc"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1758"
  ],
  "capital": "Castries",
  "altSpellings": [
    "LC"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "St. Lucia",
      "common": "Saint Lucia"
    },
    "fra": {
      "official": "Sainte-Lucie",
      "common": "Sainte-Lucie"
    },
    "hrv": {
      "official": "Sveta Lucija",
      "common": "Sveta Lucija"
    },
    "ita": {
      "official": "Santa Lucia",
      "common": "Santa Lucia"
    },
    "jpn": {
      "official": "セントルシア",
      "common": "セントルシア"
    },
    "nld": {
      "official": "Saint Lucia",
      "common": "Saint Lucia"
    },
    "por": {
      "official": "Santa Lúcia",
      "common": "Santa Lúcia"
    },
    "rus": {
      "official": "Сент-Люсия",
      "common": "Сент-Люсия"
    },
    "spa": {
      "official": "Santa Lucía",
      "common": "Santa Lucía"
    },
    "fin": {
      "official": "Saint Lucia",
      "common": "Saint Lucia"
    }
  },
  "latlng": [
    13.88333333,
    -60.96666666
  ],
  "demonym": "Saint Lucian",
  "landlocked": false,
  "borders": [],
  "area": 616,
  "codes": {
    "cca2": "LC",
    "ccn3": "662",
    "cca3": "LCA",
    "cioc": "LCA"
  },
  "provinces": [
    "Anse-la-Raye",
    "Castries",
    "Choiseul",
    "Dauphin",
    "Dennery",
    "Gros Islet",
    "Laborie",
    "Micoud",
    "Praslin",
    "Soufriere",
    "Vieux Fort"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],188:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Martin",
    "official": "Saint Martin",
    "native": {
      "fra": {
        "official": "Saint-Martin",
        "common": "Saint-Martin"
      }
    }
  },
  "tld": [
    ".fr",
    ".gp"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "590"
  ],
  "capital": "Marigot",
  "altSpellings": [
    "MF",
    "Collectivity of Saint Martin",
    "Collectivité de Saint-Martin",
    "Saint Martin (French part)"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "St. Martin",
      "common": "Saint Martin"
    },
    "fra": {
      "official": "Saint-Martin",
      "common": "Saint-Martin"
    },
    "hrv": {
      "official": "Saint Martin",
      "common": "Sveti Martin"
    },
    "ita": {
      "official": "saint Martin",
      "common": "Saint Martin"
    },
    "jpn": {
      "official": "サンマルタン島",
      "common": "サン・マルタン（フランス領）"
    },
    "nld": {
      "official": "Saint Martin",
      "common": "Saint-Martin"
    },
    "por": {
      "official": "saint Martin",
      "common": "São Martinho"
    },
    "rus": {
      "official": "Сен-Мартен",
      "common": "Сен-Мартен"
    },
    "spa": {
      "official": "Saint Martin",
      "common": "Saint Martin"
    },
    "fin": {
      "official": "Saint-Martin",
      "common": "Saint-Martin"
    }
  },
  "latlng": [
    18.08333333,
    -63.95
  ],
  "demonym": "Saint Martin Islander",
  "landlocked": false,
  "borders": [
    "SXM"
  ],
  "area": 53,
  "codes": {
    "cca2": "MF",
    "ccn3": "663",
    "cca3": "MAF",
    "cioc": ""
  }
}
},{}],189:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Pierre and Miquelon",
    "official": "Saint Pierre and Miquelon",
    "native": {
      "fra": {
        "official": "Collectivité territoriale de Saint-Pierre-et-Miquelon",
        "common": "Saint-Pierre-et-Miquelon"
      }
    }
  },
  "tld": [
    ".pm"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "508"
  ],
  "capital": "Saint-Pierre",
  "altSpellings": [
    "PM",
    "Collectivité territoriale de Saint-Pierre-et-Miquelon"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "St. Pierre und Miquelon",
      "common": "Saint-Pierre und Miquelon"
    },
    "fra": {
      "official": "Saint-Pierre-et-Miquelon",
      "common": "Saint-Pierre-et-Miquelon"
    },
    "hrv": {
      "official": "Saint Pierre i Miquelon",
      "common": "Sveti Petar i Mikelon"
    },
    "ita": {
      "official": "Saint Pierre e Miquelon",
      "common": "Saint-Pierre e Miquelon"
    },
    "jpn": {
      "official": "サンピエール島·ミクロン島",
      "common": "サンピエール島・ミクロン島"
    },
    "nld": {
      "official": "Saint-Pierre en Miquelon",
      "common": "Saint Pierre en Miquelon"
    },
    "por": {
      "official": "Saint Pierre e Miquelon",
      "common": "Saint-Pierre e Miquelon"
    },
    "rus": {
      "official": "Сен-Пьер и Микелон",
      "common": "Сен-Пьер и Микелон"
    },
    "spa": {
      "official": "San Pedro y Miquelón",
      "common": "San Pedro y Miquelón"
    },
    "fin": {
      "official": "Saint-Pierre ja Miquelon",
      "common": "Saint-Pierre ja Miquelon"
    }
  },
  "latlng": [
    46.83333333,
    -56.33333333
  ],
  "demonym": "French",
  "landlocked": false,
  "borders": [],
  "area": 242,
  "codes": {
    "cca2": "PM",
    "ccn3": "666",
    "cca3": "SPM",
    "cioc": ""
  },
  "provinces": [
    "Miquelon",
    "Saint Pierre"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],190:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Vincent and the Grenadines",
    "official": "Saint Vincent and the Grenadines",
    "native": {
      "eng": {
        "official": "Saint Vincent and the Grenadines",
        "common": "Saint Vincent and the Grenadines"
      }
    }
  },
  "tld": [
    ".vc"
  ],
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1784"
  ],
  "capital": "Kingstown",
  "altSpellings": [
    "VC"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "St. Vincent und die Grenadinen",
      "common": "Saint Vincent und die Grenadinen"
    },
    "fra": {
      "official": "Saint-Vincent-et-les Grenadines",
      "common": "Saint-Vincent-et-les-Grenadines"
    },
    "hrv": {
      "official": "Sveti Vincent i Grenadini",
      "common": "Sveti Vincent i Grenadini"
    },
    "ita": {
      "official": "Saint Vincent e Grenadine",
      "common": "Saint Vincent e Grenadine"
    },
    "jpn": {
      "official": "セントビンセントおよびグレナディーン諸島",
      "common": "セントビンセントおよびグレナディーン諸島"
    },
    "nld": {
      "official": "Saint Vincent en de Grenadines",
      "common": "Saint Vincent en de Grenadines"
    },
    "por": {
      "official": "São Vicente e Granadinas",
      "common": "São Vincente e Granadinas"
    },
    "rus": {
      "official": "Сент-Винсент и Гренадины",
      "common": "Сент-Винсент и Гренадины"
    },
    "spa": {
      "official": "San Vicente y las Granadinas",
      "common": "San Vicente y Granadinas"
    },
    "fin": {
      "official": "Saint Vincent ja Grenadiinit",
      "common": "Saint Vincent ja Grenadiinit"
    }
  },
  "latlng": [
    13.25,
    -61.2
  ],
  "demonym": "Saint Vincentian",
  "landlocked": false,
  "borders": [],
  "area": 389,
  "codes": {
    "cca2": "VC",
    "ccn3": "670",
    "cca3": "VCT",
    "cioc": "VIN"
  },
  "provinces": [
    "Charlotte",
    "Grenadines",
    "Saint Andrew",
    "Saint David",
    "Saint George",
    "Saint Patrick"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],191:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Samoa",
    "official": "Independent State of Samoa",
    "native": {
      "eng": {
        "official": "Independent State of Samoa",
        "common": "Samoa"
      },
      "smo": {
        "official": "Malo Saʻoloto Tutoʻatasi o Sāmoa",
        "common": "Sāmoa"
      }
    }
  },
  "tld": [
    ".ws"
  ],
  "currency": [
    "WST"
  ],
  "callingCode": [
    "685"
  ],
  "capital": "Apia",
  "altSpellings": [
    "WS",
    "Independent State of Samoa",
    "Malo Saʻoloto Tutoʻatasi o Sāmoa"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "smo": "Samoan"
  },
  "translations": {
    "deu": {
      "official": "Unabhängige Staat Samoa",
      "common": "Samoa"
    },
    "fra": {
      "official": "Samoa",
      "common": "Samoa"
    },
    "hrv": {
      "official": "Nezavisna Država Samoa",
      "common": "Samoa"
    },
    "ita": {
      "official": "Stato indipendente di Samoa",
      "common": "Samoa"
    },
    "jpn": {
      "official": "サモア独立国",
      "common": "サモア"
    },
    "nld": {
      "official": "Onafhankelijke Staat Samoa",
      "common": "Samoa"
    },
    "por": {
      "official": "Estado Independente de Samoa",
      "common": "Samoa"
    },
    "rus": {
      "official": "Независимое Государство Самоа",
      "common": "Самоа"
    },
    "spa": {
      "official": "Estado Independiente de Samoa",
      "common": "Samoa"
    },
    "fin": {
      "official": "Samoan itsenäinen valtio",
      "common": "Samoa"
    }
  },
  "latlng": [
    -13.58333333,
    -172.33333333
  ],
  "demonym": "Samoan",
  "landlocked": false,
  "borders": [],
  "area": 2842,
  "codes": {
    "cca2": "WS",
    "ccn3": "882",
    "cca3": "WSM",
    "cioc": "SAM"
  },
  "provinces": [
    "A'ana",
    "Aiga-i-le-Tai",
    "Atua",
    "Fa'asaleleaga",
    "Gaga'emauga",
    "Gagaifomauga",
    "Palauli",
    "Satupa'itea",
    "Tuamasaga",
    "Va'a-o-Fonoti",
    "Vaisigano"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],192:[function(require,module,exports){
module.exports={
  "name": {
    "common": "San Marino",
    "official": "Most Serene Republic of San Marino",
    "native": {
      "ita": {
        "official": "Serenissima Repubblica di San Marino",
        "common": "San Marino"
      }
    }
  },
  "tld": [
    ".sm"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "378"
  ],
  "capital": "City of San Marino",
  "altSpellings": [
    "SM",
    "Republic of San Marino",
    "Repubblica di San Marino"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "ita": "Italian"
  },
  "translations": {
    "deu": {
      "official": "Republik San Marino",
      "common": "San Marino"
    },
    "fra": {
      "official": "République de Saint-Marin",
      "common": "Saint-Marin"
    },
    "hrv": {
      "official": "Većina Serene Republika San Marino",
      "common": "San Marino"
    },
    "ita": {
      "official": "Serenissima Repubblica di San Marino",
      "common": "San Marino"
    },
    "jpn": {
      "official": "サンマリノのほとんどセリーヌ共和国",
      "common": "サンマリノ"
    },
    "nld": {
      "official": "Meest Serene Republiek San Marino",
      "common": "San Marino"
    },
    "por": {
      "official": "Sereníssima República de San Marino",
      "common": "San Marino"
    },
    "rus": {
      "official": "Большинство Serene Республика Сан-Марино",
      "common": "Сан-Марино"
    },
    "spa": {
      "official": "Serenísima República de San Marino",
      "common": "San Marino"
    },
    "fin": {
      "official": "San Marinon seesteinen tasavalta",
      "common": "San Marino"
    }
  },
  "latlng": [
    43.76666666,
    12.41666666
  ],
  "demonym": "Sammarinese",
  "landlocked": true,
  "borders": [
    "ITA"
  ],
  "area": 61,
  "codes": {
    "cca2": "SM",
    "ccn3": "674",
    "cca3": "SMR",
    "cioc": "SMR"
  },
  "provinces": [
    "Acquaviva",
    "Borgo Maggiore",
    "Chiesanuova",
    "Domagnano",
    "Faetano",
    "Fiorentino",
    "Monte Giardino",
    "San Marino",
    "Serravalle"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],193:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saudi Arabia",
    "official": "Kingdom of Saudi Arabia",
    "native": {
      "ara": {
        "official": "المملكة العربية السعودية",
        "common": "العربية السعودية"
      }
    }
  },
  "tld": [
    ".sa",
    ".السعودية"
  ],
  "currency": [
    "SAR"
  ],
  "callingCode": [
    "966"
  ],
  "capital": "Riyadh",
  "altSpellings": [
    "Saudi",
    "SA",
    "Kingdom of Saudi Arabia",
    "Al-Mamlakah al-‘Arabiyyah as-Su‘ūdiyyah"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Königreich Saudi-Arabien",
      "common": "Saudi-Arabien"
    },
    "fra": {
      "official": "Royaume d'Arabie Saoudite",
      "common": "Arabie Saoudite"
    },
    "hrv": {
      "official": "Kraljevina Saudijska Arabija",
      "common": "Saudijska Arabija"
    },
    "ita": {
      "official": "Arabia Saudita",
      "common": "Arabia Saudita"
    },
    "jpn": {
      "official": "サウジアラビア王国",
      "common": "サウジアラビア"
    },
    "nld": {
      "official": "Koninkrijk van Saoedi-Arabië",
      "common": "Saoedi-Arabië"
    },
    "por": {
      "official": "Reino da Arábia Saudita",
      "common": "Arábia Saudita"
    },
    "rus": {
      "official": "Королевство Саудовская Аравия",
      "common": "Саудовская Аравия"
    },
    "spa": {
      "official": "Reino de Arabia Saudita",
      "common": "Arabia Saudí"
    },
    "fin": {
      "official": "Saudi-Arabian kuningaskunta",
      "common": "Saudi-Arabia"
    }
  },
  "latlng": [
    25,
    45
  ],
  "demonym": "Saudi Arabian",
  "landlocked": false,
  "borders": [
    "IRQ",
    "JOR",
    "KWT",
    "OMN",
    "QAT",
    "ARE",
    "YEM"
  ],
  "area": 2149690,
  "codes": {
    "cca2": "SA",
    "ccn3": "682",
    "cca3": "SAU",
    "cioc": "KSA"
  },
  "provinces": [
    "'Asir",
    "Al Bahah",
    "Al Hudud ash Shamaliyah",
    "Al Jawf",
    "Al Madinah",
    "Al Qasim",
    "Ar Riyad",
    "Ash Sharqiyah (Eastern Province)",
    "Ha'il",
    "Jizan",
    "Makkah",
    "Najran",
    "Tabuk"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SAU",
        "properties": {
          "name": "Saudi Arabia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                42.779332,
                16.347891
              ],
              [
                42.649573,
                16.774635
              ],
              [
                42.347989,
                17.075806
              ],
              [
                42.270888,
                17.474722
              ],
              [
                41.754382,
                17.833046
              ],
              [
                41.221391,
                18.6716
              ],
              [
                40.939341,
                19.486485
              ],
              [
                40.247652,
                20.174635
              ],
              [
                39.801685,
                20.338862
              ],
              [
                39.139399,
                21.291905
              ],
              [
                39.023696,
                21.986875
              ],
              [
                39.066329,
                22.579656
              ],
              [
                38.492772,
                23.688451
              ],
              [
                38.02386,
                24.078686
              ],
              [
                37.483635,
                24.285495
              ],
              [
                37.154818,
                24.858483
              ],
              [
                37.209491,
                25.084542
              ],
              [
                36.931627,
                25.602959
              ],
              [
                36.639604,
                25.826228
              ],
              [
                36.249137,
                26.570136
              ],
              [
                35.640182,
                27.37652
              ],
              [
                35.130187,
                28.063352
              ],
              [
                34.632336,
                28.058546
              ],
              [
                34.787779,
                28.607427
              ],
              [
                34.83222,
                28.957483
              ],
              [
                34.956037,
                29.356555
              ],
              [
                36.068941,
                29.197495
              ],
              [
                36.501214,
                29.505254
              ],
              [
                36.740528,
                29.865283
              ],
              [
                37.503582,
                30.003776
              ],
              [
                37.66812,
                30.338665
              ],
              [
                37.998849,
                30.5085
              ],
              [
                37.002166,
                31.508413
              ],
              [
                39.004886,
                32.010217
              ],
              [
                39.195468,
                32.161009
              ],
              [
                40.399994,
                31.889992
              ],
              [
                41.889981,
                31.190009
              ],
              [
                44.709499,
                29.178891
              ],
              [
                46.568713,
                29.099025
              ],
              [
                47.459822,
                29.002519
              ],
              [
                47.708851,
                28.526063
              ],
              [
                48.416094,
                28.552004
              ],
              [
                48.807595,
                27.689628
              ],
              [
                49.299554,
                27.461218
              ],
              [
                49.470914,
                27.109999
              ],
              [
                50.152422,
                26.689663
              ],
              [
                50.212935,
                26.277027
              ],
              [
                50.113303,
                25.943972
              ],
              [
                50.239859,
                25.60805
              ],
              [
                50.527387,
                25.327808
              ],
              [
                50.660557,
                24.999896
              ],
              [
                50.810108,
                24.754743
              ],
              [
                51.112415,
                24.556331
              ],
              [
                51.389608,
                24.627386
              ],
              [
                51.579519,
                24.245497
              ],
              [
                51.617708,
                24.014219
              ],
              [
                52.000733,
                23.001154
              ],
              [
                55.006803,
                22.496948
              ],
              [
                55.208341,
                22.70833
              ],
              [
                55.666659,
                22.000001
              ],
              [
                54.999982,
                19.999994
              ],
              [
                52.00001,
                19.000003
              ],
              [
                49.116672,
                18.616668
              ],
              [
                48.183344,
                18.166669
              ],
              [
                47.466695,
                17.116682
              ],
              [
                47.000005,
                16.949999
              ],
              [
                46.749994,
                17.283338
              ],
              [
                46.366659,
                17.233315
              ],
              [
                45.399999,
                17.333335
              ],
              [
                45.216651,
                17.433329
              ],
              [
                44.062613,
                17.410359
              ],
              [
                43.791519,
                17.319977
              ],
              [
                43.380794,
                17.579987
              ],
              [
                43.115798,
                17.08844
              ],
              [
                43.218375,
                16.66689
              ],
              [
                42.779332,
                16.347891
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],194:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Senegal",
    "official": "Republic of Senegal",
    "native": {
      "fra": {
        "official": "République du Sénégal",
        "common": "Sénégal"
      }
    }
  },
  "tld": [
    ".sn"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "221"
  ],
  "capital": "Dakar",
  "altSpellings": [
    "SN",
    "Republic of Senegal",
    "République du Sénégal"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Senegal",
      "common": "Senegal"
    },
    "fra": {
      "official": "République du Sénégal",
      "common": "Sénégal"
    },
    "hrv": {
      "official": "Republika Senegal",
      "common": "Senegal"
    },
    "ita": {
      "official": "Repubblica del Senegal",
      "common": "Senegal"
    },
    "jpn": {
      "official": "セネガル共和国",
      "common": "セネガル"
    },
    "nld": {
      "official": "Republiek Senegal",
      "common": "Senegal"
    },
    "por": {
      "official": "República do Senegal",
      "common": "Senegal"
    },
    "rus": {
      "official": "Республика Сенегал",
      "common": "Сенегал"
    },
    "spa": {
      "official": "República de Senegal",
      "common": "Senegal"
    },
    "fin": {
      "official": "Senegalin tasavalta",
      "common": "Senegal"
    }
  },
  "latlng": [
    14,
    -14
  ],
  "demonym": "Senegalese",
  "landlocked": false,
  "borders": [
    "GMB",
    "GIN",
    "GNB",
    "MLI",
    "MRT"
  ],
  "area": 196722,
  "codes": {
    "cca2": "SN",
    "ccn3": "686",
    "cca3": "SEN",
    "cioc": "SEN"
  },
  "provinces": [
    "Dakar",
    "Diourbel",
    "Fatick",
    "Kaolack",
    "Kolda",
    "Louga",
    "Saint-Louis",
    "Tambacounda",
    "Thies",
    "Ziguinchor"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SEN",
        "properties": {
          "name": "Senegal"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -16.713729,
                13.594959
              ],
              [
                -17.126107,
                14.373516
              ],
              [
                -17.625043,
                14.729541
              ],
              [
                -17.185173,
                14.919477
              ],
              [
                -16.700706,
                15.621527
              ],
              [
                -16.463098,
                16.135036
              ],
              [
                -16.12069,
                16.455663
              ],
              [
                -15.623666,
                16.369337
              ],
              [
                -15.135737,
                16.587282
              ],
              [
                -14.577348,
                16.598264
              ],
              [
                -14.099521,
                16.304302
              ],
              [
                -13.435738,
                16.039383
              ],
              [
                -12.830658,
                15.303692
              ],
              [
                -12.17075,
                14.616834
              ],
              [
                -12.124887,
                13.994727
              ],
              [
                -11.927716,
                13.422075
              ],
              [
                -11.553398,
                13.141214
              ],
              [
                -11.467899,
                12.754519
              ],
              [
                -11.513943,
                12.442988
              ],
              [
                -11.658301,
                12.386583
              ],
              [
                -12.203565,
                12.465648
              ],
              [
                -12.278599,
                12.35444
              ],
              [
                -12.499051,
                12.33209
              ],
              [
                -13.217818,
                12.575874
              ],
              [
                -13.700476,
                12.586183
              ],
              [
                -15.548477,
                12.62817
              ],
              [
                -15.816574,
                12.515567
              ],
              [
                -16.147717,
                12.547762
              ],
              [
                -16.677452,
                12.384852
              ],
              [
                -16.841525,
                13.151394
              ],
              [
                -15.931296,
                13.130284
              ],
              [
                -15.691001,
                13.270353
              ],
              [
                -15.511813,
                13.27857
              ],
              [
                -15.141163,
                13.509512
              ],
              [
                -14.712197,
                13.298207
              ],
              [
                -14.277702,
                13.280585
              ],
              [
                -13.844963,
                13.505042
              ],
              [
                -14.046992,
                13.794068
              ],
              [
                -14.376714,
                13.62568
              ],
              [
                -14.687031,
                13.630357
              ],
              [
                -15.081735,
                13.876492
              ],
              [
                -15.39877,
                13.860369
              ],
              [
                -15.624596,
                13.623587
              ],
              [
                -16.713729,
                13.594959
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],195:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Serbia",
    "official": "Republic of Serbia",
    "native": {
      "srp": {
        "official": "Република Србија",
        "common": "Србија"
      }
    }
  },
  "tld": [
    ".rs",
    ".срб"
  ],
  "currency": [
    "RSD"
  ],
  "callingCode": [
    "381"
  ],
  "capital": "Belgrade",
  "altSpellings": [
    "RS",
    "Srbija",
    "Republic of Serbia",
    "Република Србија",
    "Republika Srbija"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "srp": "Serbian"
  },
  "translations": {
    "deu": {
      "official": "Republik Serbien",
      "common": "Serbien"
    },
    "fra": {
      "official": "République de Serbie",
      "common": "Serbie"
    },
    "hrv": {
      "official": "Republika Srbija",
      "common": "Srbija"
    },
    "ita": {
      "official": "Repubblica di Serbia",
      "common": "Serbia"
    },
    "jpn": {
      "official": "セルビア共和国",
      "common": "セルビア"
    },
    "nld": {
      "official": "Republiek Servië",
      "common": "Servië"
    },
    "por": {
      "official": "República da Sérvia",
      "common": "Sérvia"
    },
    "rus": {
      "official": "Республика Сербия",
      "common": "Сербия"
    },
    "spa": {
      "official": "República de Serbia",
      "common": "Serbia"
    },
    "fin": {
      "official": "Serbian tasavalta",
      "common": "Serbia"
    }
  },
  "latlng": [
    44,
    21
  ],
  "demonym": "Serbian",
  "landlocked": true,
  "borders": [
    "BIH",
    "BGR",
    "HRV",
    "HUN",
    "KOS",
    "MKD",
    "MNE",
    "ROU"
  ],
  "area": 88361,
  "codes": {
    "cca2": "RS",
    "ccn3": "688",
    "cca3": "SRB",
    "cioc": "SRB"
  }
}
},{}],196:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Seychelles",
    "official": "Republic of Seychelles",
    "native": {
      "crs": {
        "official": "Repiblik Sesel",
        "common": "Sesel"
      },
      "eng": {
        "official": "Republic of Seychelles",
        "common": "Seychelles"
      },
      "fra": {
        "official": "République des Seychelles",
        "common": "Seychelles"
      }
    }
  },
  "tld": [
    ".sc"
  ],
  "currency": [
    "SCR"
  ],
  "callingCode": [
    "248"
  ],
  "capital": "Victoria",
  "altSpellings": [
    "SC",
    "Republic of Seychelles",
    "Repiblik Sesel",
    "République des Seychelles"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "crs": "Seychellois Creole",
    "eng": "English",
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik der Seychellen",
      "common": "Seychellen"
    },
    "fra": {
      "official": "République des Seychelles",
      "common": "Seychelles"
    },
    "hrv": {
      "official": "Republika Sejšeli",
      "common": "Sejšeli"
    },
    "ita": {
      "official": "Repubblica delle Seychelles",
      "common": "Seychelles"
    },
    "jpn": {
      "official": "セイシェル共和国",
      "common": "セーシェル"
    },
    "nld": {
      "official": "Republiek der Seychellen",
      "common": "Seychellen"
    },
    "por": {
      "official": "República das Seychelles",
      "common": "Seicheles"
    },
    "rus": {
      "official": "Республика Сейшельские Острова",
      "common": "Сейшельские Острова"
    },
    "spa": {
      "official": "República de las Seychelles",
      "common": "Seychelles"
    },
    "fin": {
      "official": "Seychellien tasavalta",
      "common": "Seychellit"
    }
  },
  "latlng": [
    -4.58333333,
    55.66666666
  ],
  "demonym": "Seychellois",
  "landlocked": false,
  "borders": [],
  "area": 452,
  "codes": {
    "cca2": "SC",
    "ccn3": "690",
    "cca3": "SYC",
    "cioc": "SEY"
  },
  "provinces": [
    "Anse aux Pins",
    "Anse Boileau",
    "Anse Etoile",
    "Anse Louis",
    "Anse Royale",
    "Baie Lazare",
    "Baie Sainte Anne",
    "Beau Vallon",
    "Bel Air",
    "Bel Ombre",
    "Cascade",
    "Glacis",
    "Grand' Anse (on Mahe)",
    "Grand' Anse (on Praslin)",
    "La Digue",
    "La Riviere Anglaise",
    "Mont Buxton",
    "Mont Fleuri",
    "Plaisance",
    "Pointe La Rue",
    "Port Glaud",
    "Saint Louis",
    "Takamaka"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],197:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sierra Leone",
    "official": "Republic of Sierra Leone",
    "native": {
      "eng": {
        "official": "Republic of Sierra Leone",
        "common": "Sierra Leone"
      }
    }
  },
  "tld": [
    ".sl"
  ],
  "currency": [
    "SLL"
  ],
  "callingCode": [
    "232"
  ],
  "capital": "Freetown",
  "altSpellings": [
    "SL",
    "Republic of Sierra Leone"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Sierra Leone",
      "common": "Sierra Leone"
    },
    "fra": {
      "official": "République de Sierra Leone",
      "common": "Sierra Leone"
    },
    "hrv": {
      "official": "Republika Sijera Leone",
      "common": "Sijera Leone"
    },
    "ita": {
      "official": "Repubblica della Sierra Leone",
      "common": "Sierra Leone"
    },
    "jpn": {
      "official": "シエラレオネ共和国",
      "common": "シエラレオネ"
    },
    "nld": {
      "official": "Republiek Sierra Leone",
      "common": "Sierra Leone"
    },
    "por": {
      "official": "República da Serra Leoa",
      "common": "Serra Leoa"
    },
    "rus": {
      "official": "Республика Сьерра-Леоне",
      "common": "Сьерра-Леоне"
    },
    "spa": {
      "official": "República de Sierra Leona",
      "common": "Sierra Leone"
    },
    "fin": {
      "official": "Sierra Leonen tasavalta",
      "common": "Sierra Leone"
    }
  },
  "latlng": [
    8.5,
    -11.5
  ],
  "demonym": "Sierra Leonean",
  "landlocked": false,
  "borders": [
    "GIN",
    "LBR"
  ],
  "area": 71740,
  "codes": {
    "cca2": "SL",
    "ccn3": "694",
    "cca3": "SLE",
    "cioc": "SLE"
  },
  "provinces": [
    "Eastern",
    "Northern",
    "Southern",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SLE",
        "properties": {
          "name": "Sierra Leone"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -11.438779,
                6.785917
              ],
              [
                -11.708195,
                6.860098
              ],
              [
                -12.428099,
                7.262942
              ],
              [
                -12.949049,
                7.798646
              ],
              [
                -13.124025,
                8.163946
              ],
              [
                -13.24655,
                8.903049
              ],
              [
                -12.711958,
                9.342712
              ],
              [
                -12.596719,
                9.620188
              ],
              [
                -12.425929,
                9.835834
              ],
              [
                -12.150338,
                9.858572
              ],
              [
                -11.917277,
                10.046984
              ],
              [
                -11.117481,
                10.045873
              ],
              [
                -10.839152,
                9.688246
              ],
              [
                -10.622395,
                9.26791
              ],
              [
                -10.65477,
                8.977178
              ],
              [
                -10.494315,
                8.715541
              ],
              [
                -10.505477,
                8.348896
              ],
              [
                -10.230094,
                8.406206
              ],
              [
                -10.695595,
                7.939464
              ],
              [
                -11.146704,
                7.396706
              ],
              [
                -11.199802,
                7.105846
              ],
              [
                -11.438779,
                6.785917
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],198:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Singapore",
    "official": "Republic of Singapore",
    "native": {
      "cmn": {
        "official": "新加坡共和国",
        "common": "新加坡"
      },
      "eng": {
        "official": "Republic of Singapore",
        "common": "Singapore"
      },
      "msa": {
        "official": "Republik Singapura",
        "common": "Singapura"
      },
      "tam": {
        "official": "சிங்கப்பூர் குடியரசு",
        "common": "சிங்கப்பூர்"
      }
    }
  },
  "tld": [
    ".sg",
    ".新加坡",
    ".சிங்கப்பூர்"
  ],
  "currency": [
    "SGD"
  ],
  "callingCode": [
    "65"
  ],
  "capital": "Singapore",
  "altSpellings": [
    "SG",
    "Singapura",
    "Republik Singapura",
    "新加坡共和国"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "cmn": "Mandarin",
    "eng": "English",
    "msa": "Malay",
    "tam": "Tamil"
  },
  "translations": {
    "deu": {
      "official": "Republik Singapur",
      "common": "Singapur"
    },
    "fra": {
      "official": "République de Singapour",
      "common": "Singapour"
    },
    "hrv": {
      "official": "Republika Singapur",
      "common": "Singapur"
    },
    "ita": {
      "official": "Repubblica di Singapore",
      "common": "Singapore"
    },
    "jpn": {
      "official": "シンガポール共和国",
      "common": "シンガポール"
    },
    "nld": {
      "official": "Republiek Singapore",
      "common": "Singapore"
    },
    "por": {
      "official": "República de Singapura",
      "common": "Singapura"
    },
    "rus": {
      "official": "Республика Сингапур",
      "common": "Сингапур"
    },
    "spa": {
      "official": "República de Singapur",
      "common": "Singapur"
    },
    "fin": {
      "official": "Singaporen tasavalta",
      "common": "Singapore"
    }
  },
  "latlng": [
    1.36666666,
    103.8
  ],
  "demonym": "Singaporean",
  "landlocked": false,
  "borders": [],
  "area": 710,
  "codes": {
    "cca2": "SG",
    "ccn3": "702",
    "cca3": "SGP",
    "cioc": "SIN"
  },
  "provinces": [
    "Singapore"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],199:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sint Maarten",
    "official": "Sint Maarten",
    "native": {
      "eng": {
        "official": "Sint Maarten",
        "common": "Sint Maarten"
      },
      "fra": {
        "official": "Saint-Martin",
        "common": "Saint-Martin"
      },
      "nld": {
        "official": "Sint Maarten",
        "common": "Sint Maarten"
      }
    }
  },
  "tld": [
    ".sx"
  ],
  "currency": [
    "ANG"
  ],
  "callingCode": [
    "1721"
  ],
  "capital": "Philipsburg",
  "altSpellings": [
    "SX",
    "Sint Maarten (Dutch part)"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English",
    "fra": "French",
    "nld": "Dutch"
  },
  "translations": {
    "deu": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "fra": {
      "official": "Sint Maarten",
      "common": "Saint-Martin"
    },
    "ita": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "jpn": {
      "official": "シントマールテン島",
      "common": "シント・マールテン"
    },
    "nld": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "por": {
      "official": "Sint Maarten",
      "common": "São Martinho"
    },
    "rus": {
      "official": "Синт-Маартен",
      "common": "Синт-Мартен"
    },
    "spa": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "fin": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    }
  },
  "latlng": [
    18.033333,
    -63.05
  ],
  "demonym": "St. Maartener",
  "landlocked": false,
  "borders": [
    "MAF"
  ],
  "area": 34,
  "codes": {
    "cca2": "SX",
    "ccn3": "534",
    "cca3": "SXM",
    "cioc": ""
  }
}
},{}],200:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Slovakia",
    "official": "Slovak Republic",
    "native": {
      "slk": {
        "official": "Slovenská republika",
        "common": "Slovensko"
      }
    }
  },
  "tld": [
    ".sk"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "421"
  ],
  "capital": "Bratislava",
  "altSpellings": [
    "SK",
    "Slovak Republic",
    "Slovenská republika"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "slk": "Slovak"
  },
  "translations": {
    "deu": {
      "official": "Slowakische Republik",
      "common": "Slowakei"
    },
    "fra": {
      "official": "République slovaque",
      "common": "Slovaquie"
    },
    "hrv": {
      "official": "slovačka",
      "common": "Slovačka"
    },
    "ita": {
      "official": "Repubblica slovacca",
      "common": "Slovacchia"
    },
    "jpn": {
      "official": "スロバキア共和国",
      "common": "スロバキア"
    },
    "nld": {
      "official": "Slowaakse Republiek",
      "common": "Slowakije"
    },
    "por": {
      "official": "República Eslovaca",
      "common": "Eslováquia"
    },
    "rus": {
      "official": "Словацкая Республика",
      "common": "Словакия"
    },
    "spa": {
      "official": "República Eslovaca",
      "common": "República Eslovaca"
    },
    "fin": {
      "official": "Slovakian tasavalta",
      "common": "Slovakia"
    }
  },
  "latlng": [
    48.66666666,
    19.5
  ],
  "demonym": "Slovak",
  "landlocked": true,
  "borders": [
    "AUT",
    "CZE",
    "HUN",
    "POL",
    "UKR"
  ],
  "area": 49037,
  "codes": {
    "cca2": "SK",
    "ccn3": "703",
    "cca3": "SVK",
    "cioc": "SVK"
  },
  "provinces": [
    "Banskobystricky",
    "Bratislavsky",
    "Kosicky",
    "Nitriansky",
    "Presovsky",
    "Trenciansky",
    "Trnavsky",
    "Zilinsky"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SVK",
        "properties": {
          "name": "Slovakia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                18.853144,
                49.49623
              ],
              [
                18.909575,
                49.435846
              ],
              [
                19.320713,
                49.571574
              ],
              [
                19.825023,
                49.217125
              ],
              [
                20.415839,
                49.431453
              ],
              [
                20.887955,
                49.328772
              ],
              [
                21.607808,
                49.470107
              ],
              [
                22.558138,
                49.085738
              ],
              [
                22.280842,
                48.825392
              ],
              [
                22.085608,
                48.422264
              ],
              [
                21.872236,
                48.319971
              ],
              [
                20.801294,
                48.623854
              ],
              [
                20.473562,
                48.56285
              ],
              [
                20.239054,
                48.327567
              ],
              [
                19.769471,
                48.202691
              ],
              [
                19.661364,
                48.266615
              ],
              [
                19.174365,
                48.111379
              ],
              [
                18.777025,
                48.081768
              ],
              [
                18.696513,
                47.880954
              ],
              [
                17.857133,
                47.758429
              ],
              [
                17.488473,
                47.867466
              ],
              [
                16.979667,
                48.123497
              ],
              [
                16.879983,
                48.470013
              ],
              [
                16.960288,
                48.596982
              ],
              [
                17.101985,
                48.816969
              ],
              [
                17.545007,
                48.800019
              ],
              [
                17.886485,
                48.903475
              ],
              [
                17.913512,
                48.996493
              ],
              [
                18.104973,
                49.043983
              ],
              [
                18.170498,
                49.271515
              ],
              [
                18.399994,
                49.315001
              ],
              [
                18.554971,
                49.495015
              ],
              [
                18.853144,
                49.49623
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],201:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Slovenia",
    "official": "Republic of Slovenia",
    "native": {
      "slv": {
        "official": "Republika Slovenija",
        "common": "Slovenija"
      }
    }
  },
  "tld": [
    ".si"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "386"
  ],
  "capital": "Ljubljana",
  "altSpellings": [
    "SI",
    "Republic of Slovenia",
    "Republika Slovenija"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "slv": "Slovene"
  },
  "translations": {
    "deu": {
      "official": "Republik Slowenien",
      "common": "Slowenien"
    },
    "fra": {
      "official": "République de Slovénie",
      "common": "Slovénie"
    },
    "hrv": {
      "official": "Republika Slovenija",
      "common": "Slovenija"
    },
    "ita": {
      "official": "Repubblica di Slovenia",
      "common": "Slovenia"
    },
    "jpn": {
      "official": "スロベニア共和国",
      "common": "スロベニア"
    },
    "nld": {
      "official": "Republiek Slovenië",
      "common": "Slovenië"
    },
    "por": {
      "official": "República da Eslovénia",
      "common": "Eslovénia"
    },
    "rus": {
      "official": "Республика Словения",
      "common": "Словения"
    },
    "spa": {
      "official": "República de Eslovenia",
      "common": "Eslovenia"
    },
    "fin": {
      "official": "Slovenian tasavalta",
      "common": "Slovenia"
    }
  },
  "latlng": [
    46.11666666,
    14.81666666
  ],
  "demonym": "Slovene",
  "landlocked": false,
  "borders": [
    "AUT",
    "HRV",
    "ITA",
    "HUN"
  ],
  "area": 20273,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Slovenia.svg",
  "codes": {
    "cca2": "SI",
    "ccn3": "705",
    "cca3": "SVN",
    "cioc": "SLO"
  },
  "provinces": [
    "Ajdovscina",
    "Beltinci",
    "Bled",
    "Bohinj",
    "Borovnica",
    "Bovec",
    "Brda",
    "Brezice",
    "Brezovica",
    "Cankova-Tisina",
    "Celje",
    "Cerklje na Gorenjskem",
    "Cerknica",
    "Cerkno",
    "Crensovci",
    "Crna na Koroskem",
    "Crnomelj",
    "Destrnik-Trnovska Vas",
    "Divaca",
    "Dobrepolje",
    "Dobrova-Horjul-Polhov Gradec",
    "Dol pri Ljubljani",
    "Domzale",
    "Dornava",
    "Dravograd",
    "Duplek",
    "Gorenja Vas-Poljane",
    "Gorisnica",
    "Gornja Radgona",
    "Gornji Grad",
    "Gornji Petrovci",
    "Grosuplje",
    "Hodos Salovci",
    "Hrastnik",
    "Hrpelje-Kozina",
    "Idrija",
    "Ig",
    "Ilirska Bistrica",
    "Ivancna Gorica",
    "Izola",
    "Jesenice",
    "Jursinci",
    "Kamnik",
    "Kanal",
    "Kidricevo",
    "Kobarid",
    "Kobilje",
    "Kocevje",
    "Komen",
    "Koper",
    "Kozje",
    "Kranj",
    "Kranjska Gora",
    "Krsko",
    "Kungota",
    "Kuzma",
    "Lasko",
    "Lenart",
    "Lendava",
    "Litija",
    "Ljubljana",
    "Ljubno",
    "Ljutomer",
    "Logatec",
    "Loska Dolina",
    "Loski Potok",
    "Luce",
    "Lukovica",
    "Majsperk",
    "Maribor",
    "Medvode",
    "Menges",
    "Metlika",
    "Mezica",
    "Miren-Kostanjevica",
    "Mislinja",
    "Moravce",
    "Moravske Toplice",
    "Mozirje",
    "Murska Sobota",
    "Muta",
    "Naklo",
    "Nazarje",
    "Nova Gorica",
    "Novo Mesto",
    "Odranci",
    "Ormoz",
    "Osilnica",
    "Pesnica",
    "Piran",
    "Pivka",
    "Podcetrtek",
    "Podvelka-Ribnica",
    "Postojna",
    "Preddvor",
    "Ptuj",
    "Puconci",
    "Race-Fram",
    "Radece",
    "Radenci",
    "Radlje ob Dravi",
    "Radovljica",
    "Ravne-Prevalje",
    "Ribnica",
    "Rogasevci",
    "Rogaska Slatina",
    "Rogatec",
    "Ruse",
    "Semic",
    "Sencur",
    "Sentilj",
    "Sentjernej",
    "Sentjur pri Celju",
    "Sevnica",
    "Sezana",
    "Skocjan",
    "Skofja Loka",
    "Skofljica",
    "Slovenj Gradec",
    "Slovenska Bistrica",
    "Slovenske Konjice",
    "Smarje pri Jelsah",
    "Smartno ob Paki",
    "Sostanj",
    "Starse",
    "Store",
    "Sveti Jurij",
    "Tolmin",
    "Trbovlje",
    "Trebnje",
    "Trzic",
    "Turnisce",
    "Velenje",
    "Velike Lasce",
    "Videm",
    "Vipava",
    "Vitanje",
    "Vodice",
    "Vojnik",
    "Vrhnika",
    "Vuzenica",
    "Zagorje ob Savi",
    "Zalec",
    "Zavrc",
    "Zelezniki",
    "Ziri",
    "Zrece"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SVN",
        "properties": {
          "name": "Slovenia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                13.806475,
                46.509306
              ],
              [
                14.632472,
                46.431817
              ],
              [
                15.137092,
                46.658703
              ],
              [
                16.011664,
                46.683611
              ],
              [
                16.202298,
                46.852386
              ],
              [
                16.370505,
                46.841327
              ],
              [
                16.564808,
                46.503751
              ],
              [
                15.768733,
                46.238108
              ],
              [
                15.67153,
                45.834154
              ],
              [
                15.323954,
                45.731783
              ],
              [
                15.327675,
                45.452316
              ],
              [
                14.935244,
                45.471695
              ],
              [
                14.595109,
                45.634941
              ],
              [
                14.411968,
                45.466166
              ],
              [
                13.71506,
                45.500324
              ],
              [
                13.93763,
                45.591016
              ],
              [
                13.69811,
                46.016778
              ],
              [
                13.806475,
                46.509306
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],202:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Solomon Islands",
    "official": "Solomon Islands",
    "native": {
      "eng": {
        "official": "Solomon Islands",
        "common": "Solomon Islands"
      }
    }
  },
  "tld": [
    ".sb"
  ],
  "currency": [
    "SBD"
  ],
  "callingCode": [
    "677"
  ],
  "capital": "Honiara",
  "altSpellings": [
    "SB"
  ],
  "region": "Oceania",
  "subregion": "Melanesia",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Salomon-Inseln",
      "common": "Salomonen"
    },
    "fra": {
      "official": "Îles Salomon",
      "common": "Îles Salomon"
    },
    "hrv": {
      "official": "Solomonski Otoci",
      "common": "Solomonski Otoci"
    },
    "ita": {
      "official": "Isole Salomone",
      "common": "Isole Salomone"
    },
    "jpn": {
      "official": "ソロモン諸島",
      "common": "ソロモン諸島"
    },
    "nld": {
      "official": "Solomon eilanden",
      "common": "Salomonseilanden"
    },
    "por": {
      "official": "Ilhas Salomão",
      "common": "Ilhas Salomão"
    },
    "rus": {
      "official": "Соломоновы острова",
      "common": "Соломоновы Острова"
    },
    "spa": {
      "official": "islas Salomón",
      "common": "Islas Salomón"
    },
    "fin": {
      "official": "Salomonsaaret",
      "common": "Salomonsaaret"
    }
  },
  "latlng": [
    -8,
    159
  ],
  "demonym": "Solomon Islander",
  "landlocked": false,
  "borders": [],
  "area": 28896,
  "codes": {
    "cca2": "SB",
    "ccn3": "090",
    "cca3": "SLB",
    "cioc": "SOL"
  },
  "provinces": [
    "Bellona",
    "Central",
    "Choiseul (Lauru)",
    "Guadalcanal",
    "Honiara",
    "Isabel",
    "Makira",
    "Malaita",
    "Rennell",
    "Temotu",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SLB",
        "properties": {
          "name": "Solomon Islands"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  162.119025,
                  -10.482719
                ],
                [
                  162.398646,
                  -10.826367
                ],
                [
                  161.700032,
                  -10.820011
                ],
                [
                  161.319797,
                  -10.204751
                ],
                [
                  161.917383,
                  -10.446701
                ],
                [
                  162.119025,
                  -10.482719
                ]
              ]
            ],
            [
              [
                [
                  160.852229,
                  -9.872937
                ],
                [
                  160.462588,
                  -9.89521
                ],
                [
                  159.849447,
                  -9.794027
                ],
                [
                  159.640003,
                  -9.63998
                ],
                [
                  159.702945,
                  -9.24295
                ],
                [
                  160.362956,
                  -9.400304
                ],
                [
                  160.688518,
                  -9.610162
                ],
                [
                  160.852229,
                  -9.872937
                ]
              ]
            ],
            [
              [
                [
                  161.679982,
                  -9.599982
                ],
                [
                  161.529397,
                  -9.784312
                ],
                [
                  160.788253,
                  -8.917543
                ],
                [
                  160.579997,
                  -8.320009
                ],
                [
                  160.920028,
                  -8.320009
                ],
                [
                  161.280006,
                  -9.120011
                ],
                [
                  161.679982,
                  -9.599982
                ]
              ]
            ],
            [
              [
                [
                  159.875027,
                  -8.33732
                ],
                [
                  159.917402,
                  -8.53829
                ],
                [
                  159.133677,
                  -8.114181
                ],
                [
                  158.586114,
                  -7.754824
                ],
                [
                  158.21115,
                  -7.421872
                ],
                [
                  158.359978,
                  -7.320018
                ],
                [
                  158.820001,
                  -7.560003
                ],
                [
                  159.640003,
                  -8.020027
                ],
                [
                  159.875027,
                  -8.33732
                ]
              ]
            ],
            [
              [
                [
                  157.538426,
                  -7.34782
                ],
                [
                  157.33942,
                  -7.404767
                ],
                [
                  156.90203,
                  -7.176874
                ],
                [
                  156.491358,
                  -6.765943
                ],
                [
                  156.542828,
                  -6.599338
                ],
                [
                  157.14,
                  -7.021638
                ],
                [
                  157.538426,
                  -7.34782
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],203:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Somalia",
    "official": "Federal Republic of Somalia",
    "native": {
      "ara": {
        "official": "جمهورية الصومال‎‎",
        "common": "الصومال‎‎"
      },
      "som": {
        "official": "Jamhuuriyadda Federaalka Soomaaliya",
        "common": "Soomaaliya"
      }
    }
  },
  "tld": [
    ".so"
  ],
  "currency": [
    "SOS"
  ],
  "callingCode": [
    "252"
  ],
  "capital": "Mogadishu",
  "altSpellings": [
    "SO",
    "aṣ-Ṣūmāl",
    "Federal Republic of Somalia",
    "Jamhuuriyadda Federaalka Soomaaliya",
    "Jumhūriyyat aṣ-Ṣūmāl al-Fiderāliyya"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "ara": "Arabic",
    "som": "Somali"
  },
  "translations": {
    "deu": {
      "official": "Bundesrepublik Somalia",
      "common": "Somalia"
    },
    "fra": {
      "official": "République fédérale de Somalie",
      "common": "Somalie"
    },
    "hrv": {
      "official": "Savezna Republika Somaliji",
      "common": "Somalija"
    },
    "ita": {
      "official": "Repubblica federale di Somalia",
      "common": "Somalia"
    },
    "jpn": {
      "official": "ソマリア連邦共和国",
      "common": "ソマリア"
    },
    "nld": {
      "official": "Federale Republiek Somalië",
      "common": "Somalië"
    },
    "por": {
      "official": "República Federal da Somália",
      "common": "Somália"
    },
    "rus": {
      "official": "Федеративная Республика Сомали",
      "common": "Сомали"
    },
    "spa": {
      "official": "República Federal de Somalia",
      "common": "Somalia"
    },
    "fin": {
      "official": "Somalian liittotasavalta",
      "common": "Somalia"
    }
  },
  "latlng": [
    10,
    49
  ],
  "demonym": "Somali",
  "landlocked": false,
  "borders": [
    "DJI",
    "ETH",
    "KEN"
  ],
  "area": 637657,
  "codes": {
    "cca2": "SO",
    "ccn3": "706",
    "cca3": "SOM",
    "cioc": "SOM"
  },
  "provinces": [
    "Awdal",
    "Bakool",
    "Banaadir",
    "Bari",
    "Bay",
    "Galguduud",
    "Gedo",
    "Hiiraan",
    "Jubbada Dhexe",
    "Jubbada Hoose",
    "Mudug",
    "Nugaal",
    "Sanaag",
    "Shabeellaha Dhexe",
    "Shabeellaha Hoose",
    "Sool",
    "Togdheer",
    "Woqooyi Galbeed"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SOM",
        "properties": {
          "name": "Somalia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                49.72862,
                11.5789
              ],
              [
                50.25878,
                11.67957
              ],
              [
                50.73202,
                12.0219
              ],
              [
                51.1112,
                12.02464
              ],
              [
                51.13387,
                11.74815
              ],
              [
                51.04153,
                11.16651
              ],
              [
                51.04531,
                10.6409
              ],
              [
                50.83418,
                10.27972
              ],
              [
                50.55239,
                9.19874
              ],
              [
                50.07092,
                8.08173
              ],
              [
                49.4527,
                6.80466
              ],
              [
                48.59455,
                5.33911
              ],
              [
                47.74079,
                4.2194
              ],
              [
                46.56476,
                2.85529
              ],
              [
                45.56399,
                2.04576
              ],
              [
                44.06815,
                1.05283
              ],
              [
                43.13597,
                0.2922
              ],
              [
                42.04157,
                -0.91916
              ],
              [
                41.81095,
                -1.44647
              ],
              [
                41.58513,
                -1.68325
              ],
              [
                40.993,
                -0.85829
              ],
              [
                40.98105,
                2.78452
              ],
              [
                41.855083,
                3.918912
              ],
              [
                42.12861,
                4.23413
              ],
              [
                42.76967,
                4.25259
              ],
              [
                43.66087,
                4.95755
              ],
              [
                44.9636,
                5.00162
              ],
              [
                47.78942,
                8.003
              ],
              [
                48.486736,
                8.837626
              ],
              [
                48.93813,
                9.451749
              ],
              [
                48.938233,
                9.9735
              ],
              [
                48.938491,
                10.982327
              ],
              [
                48.942005,
                11.394266
              ],
              [
                48.948205,
                11.410617
              ],
              [
                49.26776,
                11.43033
              ],
              [
                49.72862,
                11.5789
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],204:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Africa",
    "official": "Republic of South Africa",
    "native": {
      "afr": {
        "official": "Republiek van Suid-Afrika",
        "common": "South Africa"
      },
      "eng": {
        "official": "Republic of South Africa",
        "common": "South Africa"
      },
      "nbl": {
        "official": "IRiphabliki yeSewula Afrika",
        "common": "Sewula Afrika"
      },
      "nso": {
        "official": "Rephaboliki ya Afrika-Borwa ",
        "common": "Afrika-Borwa"
      },
      "sot": {
        "official": "Rephaboliki ya Afrika Borwa",
        "common": "Afrika Borwa"
      },
      "ssw": {
        "official": "IRiphabhulikhi yeNingizimu Afrika",
        "common": "Ningizimu Afrika"
      },
      "tsn": {
        "official": "Rephaboliki ya Aforika Borwa",
        "common": "Aforika Borwa"
      },
      "tso": {
        "official": "Riphabliki ra Afrika Dzonga",
        "common": "Afrika Dzonga"
      },
      "ven": {
        "official": "Riphabuḽiki ya Afurika Tshipembe",
        "common": "Afurika Tshipembe"
      },
      "xho": {
        "official": "IRiphabliki yaseMzantsi Afrika",
        "common": "Mzantsi Afrika"
      },
      "zul": {
        "official": "IRiphabliki yaseNingizimu Afrika",
        "common": "Ningizimu Afrika"
      }
    }
  },
  "tld": [
    ".za"
  ],
  "currency": [
    "ZAR"
  ],
  "callingCode": [
    "27"
  ],
  "capital": "Pretoria",
  "altSpellings": [
    "ZA",
    "RSA",
    "Suid-Afrika",
    "Republic of South Africa"
  ],
  "region": "Africa",
  "subregion": "Southern Africa",
  "languages": {
    "afr": "Afrikaans",
    "eng": "English",
    "nbl": "Southern Ndebele",
    "nso": "Northern Sotho",
    "sot": "Southern Sotho",
    "ssw": "Swazi",
    "tsn": "Tswana",
    "tso": "Tsonga",
    "ven": "Venda",
    "xho": "Xhosa",
    "zul": "Zulu"
  },
  "translations": {
    "deu": {
      "official": "Republik Südafrika",
      "common": "Republik Südafrika"
    },
    "fra": {
      "official": "République d'Afrique du Sud",
      "common": "Afrique du Sud"
    },
    "hrv": {
      "official": "Južnoafrička Republika",
      "common": "Južnoafrička Republika"
    },
    "ita": {
      "official": "Repubblica del Sud Africa",
      "common": "Sud Africa"
    },
    "jpn": {
      "official": "南アフリカ共和国",
      "common": "南アフリカ"
    },
    "nld": {
      "official": "Zuid -Afrika",
      "common": "Zuid-Afrika"
    },
    "por": {
      "official": "República da África do Sul",
      "common": "África do Sul"
    },
    "rus": {
      "official": "Южно-Африканская Республика",
      "common": "Южно-Африканская Республика"
    },
    "spa": {
      "official": "República de Sudáfrica",
      "common": "República de Sudáfrica"
    },
    "fin": {
      "official": "Etelä-Afrikan tasavalta",
      "common": "Etelä-Afrikka"
    }
  },
  "latlng": [
    -29,
    24
  ],
  "demonym": "South African",
  "landlocked": false,
  "borders": [
    "BWA",
    "LSO",
    "MOZ",
    "NAM",
    "SWZ",
    "ZWE"
  ],
  "area": 1221037,
  "codes": {
    "cca2": "ZA",
    "ccn3": "710",
    "cca3": "ZAF",
    "cioc": "RSA"
  },
  "provinces": [
    "Eastern Cape",
    "Free State",
    "Gauteng",
    "KwaZulu-Natal",
    "Mpumalanga",
    "North-West",
    "Northern Cape",
    "Northern Province",
    "Western Cape"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ZAF",
        "properties": {
          "name": "South Africa"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                31.521001,
                -29.257387
              ],
              [
                31.325561,
                -29.401978
              ],
              [
                30.901763,
                -29.909957
              ],
              [
                30.622813,
                -30.423776
              ],
              [
                30.055716,
                -31.140269
              ],
              [
                28.925553,
                -32.172041
              ],
              [
                28.219756,
                -32.771953
              ],
              [
                27.464608,
                -33.226964
              ],
              [
                26.419452,
                -33.61495
              ],
              [
                25.909664,
                -33.66704
              ],
              [
                25.780628,
                -33.944646
              ],
              [
                25.172862,
                -33.796851
              ],
              [
                24.677853,
                -33.987176
              ],
              [
                23.594043,
                -33.794474
              ],
              [
                22.988189,
                -33.916431
              ],
              [
                22.574157,
                -33.864083
              ],
              [
                21.542799,
                -34.258839
              ],
              [
                20.689053,
                -34.417175
              ],
              [
                20.071261,
                -34.795137
              ],
              [
                19.616405,
                -34.819166
              ],
              [
                19.193278,
                -34.462599
              ],
              [
                18.855315,
                -34.444306
              ],
              [
                18.424643,
                -33.997873
              ],
              [
                18.377411,
                -34.136521
              ],
              [
                18.244499,
                -33.867752
              ],
              [
                18.25008,
                -33.281431
              ],
              [
                17.92519,
                -32.611291
              ],
              [
                18.24791,
                -32.429131
              ],
              [
                18.221762,
                -31.661633
              ],
              [
                17.566918,
                -30.725721
              ],
              [
                17.064416,
                -29.878641
              ],
              [
                17.062918,
                -29.875954
              ],
              [
                16.344977,
                -28.576705
              ],
              [
                16.824017,
                -28.082162
              ],
              [
                17.218929,
                -28.355943
              ],
              [
                17.387497,
                -28.783514
              ],
              [
                17.836152,
                -28.856378
              ],
              [
                18.464899,
                -29.045462
              ],
              [
                19.002127,
                -28.972443
              ],
              [
                19.894734,
                -28.461105
              ],
              [
                19.895768,
                -24.76779
              ],
              [
                20.165726,
                -24.917962
              ],
              [
                20.758609,
                -25.868136
              ],
              [
                20.66647,
                -26.477453
              ],
              [
                20.889609,
                -26.828543
              ],
              [
                21.605896,
                -26.726534
              ],
              [
                22.105969,
                -26.280256
              ],
              [
                22.579532,
                -25.979448
              ],
              [
                22.824271,
                -25.500459
              ],
              [
                23.312097,
                -25.26869
              ],
              [
                23.73357,
                -25.390129
              ],
              [
                24.211267,
                -25.670216
              ],
              [
                25.025171,
                -25.71967
              ],
              [
                25.664666,
                -25.486816
              ],
              [
                25.765849,
                -25.174845
              ],
              [
                25.941652,
                -24.696373
              ],
              [
                26.485753,
                -24.616327
              ],
              [
                26.786407,
                -24.240691
              ],
              [
                27.11941,
                -23.574323
              ],
              [
                28.017236,
                -22.827754
              ],
              [
                29.432188,
                -22.091313
              ],
              [
                29.839037,
                -22.102216
              ],
              [
                30.322883,
                -22.271612
              ],
              [
                30.659865,
                -22.151567
              ],
              [
                31.191409,
                -22.25151
              ],
              [
                31.670398,
                -23.658969
              ],
              [
                31.930589,
                -24.369417
              ],
              [
                31.752408,
                -25.484284
              ],
              [
                31.837778,
                -25.843332
              ],
              [
                31.333158,
                -25.660191
              ],
              [
                31.04408,
                -25.731452
              ],
              [
                30.949667,
                -26.022649
              ],
              [
                30.676609,
                -26.398078
              ],
              [
                30.685962,
                -26.743845
              ],
              [
                31.282773,
                -27.285879
              ],
              [
                31.86806,
                -27.177927
              ],
              [
                32.071665,
                -26.73382
              ],
              [
                32.83012,
                -26.742192
              ],
              [
                32.580265,
                -27.470158
              ],
              [
                32.462133,
                -28.301011
              ],
              [
                32.203389,
                -28.752405
              ],
              [
                31.521001,
                -29.257387
              ]
            ],
            [
              [
                28.978263,
                -28.955597
              ],
              [
                28.5417,
                -28.647502
              ],
              [
                28.074338,
                -28.851469
              ],
              [
                27.532511,
                -29.242711
              ],
              [
                26.999262,
                -29.875954
              ],
              [
                27.749397,
                -30.645106
              ],
              [
                28.107205,
                -30.545732
              ],
              [
                28.291069,
                -30.226217
              ],
              [
                28.8484,
                -30.070051
              ],
              [
                29.018415,
                -29.743766
              ],
              [
                29.325166,
                -29.257387
              ],
              [
                28.978263,
                -28.955597
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],205:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Georgia",
    "official": "South Georgia and the South Sandwich Islands",
    "native": {
      "eng": {
        "official": "South Georgia and the South Sandwich Islands",
        "common": "South Georgia"
      }
    }
  },
  "tld": [
    ".gs"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "500"
  ],
  "capital": "King Edward Point",
  "altSpellings": [
    "GS",
    "South Georgia and the South Sandwich Islands"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Südgeorgien und die Südlichen Sandwichinseln",
      "common": "Südgeorgien und die Südlichen Sandwichinseln"
    },
    "fra": {
      "official": "Géorgie du Sud et les îles Sandwich du Sud",
      "common": "Géorgie du Sud-et-les Îles Sandwich du Sud"
    },
    "hrv": {
      "official": "Južna Džordžija i Otoci Južni Sendvič",
      "common": "Južna Georgija i otočje Južni Sandwich"
    },
    "ita": {
      "official": "Georgia del Sud e isole Sandwich del Sud",
      "common": "Georgia del Sud e Isole Sandwich Meridionali"
    },
    "jpn": {
      "official": "サウスジョージア·サウスサンドウィッチ諸島",
      "common": "サウスジョージア・サウスサンドウィッチ諸島"
    },
    "nld": {
      "official": "Zuid-Georgië en de Zuidelijke Sandwich-eilanden",
      "common": "Zuid-Georgia en Zuidelijke Sandwicheilanden"
    },
    "por": {
      "official": "Geórgia do Sul e Sandwich do Sul",
      "common": "Ilhas Geórgia do Sul e Sandwich do Sul"
    },
    "rus": {
      "official": "Южная Георгия и Южные Сандвичевы острова",
      "common": "Южная Георгия и Южные Сандвичевы острова"
    },
    "spa": {
      "official": "Georgia del Sur y las Islas Sandwich del Sur",
      "common": "Islas Georgias del Sur y Sandwich del Sur"
    },
    "fin": {
      "official": "Etelä-Georgia ja Eteläiset Sandwichsaaret",
      "common": "Etelä-Georgia ja Eteläiset Sandwichsaaret"
    }
  },
  "latlng": [
    -54.5,
    -37
  ],
  "demonym": "South Georgian South Sandwich Islander",
  "landlocked": false,
  "borders": [],
  "area": 3903,
  "codes": {
    "cca2": "GS",
    "ccn3": "239",
    "cca3": "SGS",
    "cioc": ""
  }
}
},{}],206:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Korea",
    "official": "Republic of Korea",
    "native": {
      "kor": {
        "official": "한국",
        "common": "대한민국"
      }
    }
  },
  "tld": [
    ".kr",
    ".한국"
  ],
  "currency": [
    "KRW"
  ],
  "callingCode": [
    "82"
  ],
  "capital": "Seoul",
  "altSpellings": [
    "KR",
    "Korea, Republic of",
    "Republic of Korea"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "kor": "Korean"
  },
  "translations": {
    "deu": {
      "official": "Republik Korea",
      "common": "Südkorea"
    },
    "fra": {
      "official": "République de Corée",
      "common": "Corée du Sud"
    },
    "hrv": {
      "official": "Republika Koreja",
      "common": "Južna Koreja"
    },
    "ita": {
      "official": "Repubblica di Corea",
      "common": "Corea del Sud"
    },
    "jpn": {
      "official": "大韓民国",
      "common": "大韓民国"
    },
    "nld": {
      "official": "Republiek Korea",
      "common": "Zuid-Korea"
    },
    "por": {
      "official": "República da Coreia",
      "common": "Coreia do Sul"
    },
    "rus": {
      "official": "Республика Корея",
      "common": "Южная Корея"
    },
    "spa": {
      "official": "República de Corea",
      "common": "Corea del Sur"
    },
    "fin": {
      "official": "Korean tasavalta",
      "common": "Etelä-Korea"
    }
  },
  "latlng": [
    37,
    127.5
  ],
  "demonym": "South Korean",
  "landlocked": false,
  "borders": [
    "PRK"
  ],
  "area": 100210,
  "codes": {
    "cca2": "KR",
    "ccn3": "410",
    "cca3": "KOR",
    "cioc": "KOR"
  }
}
},{}],207:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Sudan",
    "official": "Republic of South Sudan",
    "native": {
      "eng": {
        "official": "Republic of South Sudan",
        "common": "South Sudan"
      }
    }
  },
  "tld": [
    ".ss"
  ],
  "currency": [
    "SSP"
  ],
  "callingCode": [
    "211"
  ],
  "capital": "Juba",
  "altSpellings": [
    "SS"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Südsudan",
      "common": "Südsudan"
    },
    "fra": {
      "official": "République du Soudan du Sud",
      "common": "Soudan du Sud"
    },
    "hrv": {
      "official": "Republika Južni Sudan",
      "common": "Južni Sudan"
    },
    "ita": {
      "official": "Repubblica del Sudan del Sud",
      "common": "Sudan del sud"
    },
    "jpn": {
      "official": "南スーダン共和国",
      "common": "南スーダン"
    },
    "nld": {
      "official": "Republiek Zuid-Soedan",
      "common": "Zuid-Soedan"
    },
    "por": {
      "official": "República do Sudão do Sul",
      "common": "Sudão do Sul"
    },
    "rus": {
      "official": "Республика Южный Судан",
      "common": "Южный Судан"
    },
    "spa": {
      "official": "República de Sudán del Sur",
      "common": "Sudán del Sur"
    },
    "fin": {
      "official": "Etelä-Sudanin tasavalta",
      "common": "Etelä-Sudan"
    }
  },
  "latlng": [
    7,
    30
  ],
  "demonym": "South Sudanese",
  "landlocked": true,
  "borders": [
    "CAF",
    "COD",
    "ETH",
    "KEN",
    "SDN",
    "UGA"
  ],
  "area": 619745,
  "codes": {
    "cca2": "SS",
    "ccn3": "728",
    "cca3": "SSD",
    "cioc": ""
  }
}
},{}],208:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Spain",
    "official": "Kingdom of Spain",
    "native": {
      "cat": {
        "official": "Regne d'Espanya",
        "common": "Espanya"
      },
      "eus": {
        "official": "Espainiako Erresuma",
        "common": "Espainia"
      },
      "glg": {
        "official": "Reino de España",
        "common": ""
      },
      "oci": {
        "official": "Reialme d'Espanha",
        "common": "Espanha"
      },
      "spa": {
        "official": "Reino de España",
        "common": "España"
      }
    }
  },
  "tld": [
    ".es"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "34"
  ],
  "capital": "Madrid",
  "altSpellings": [
    "ES",
    "Kingdom of Spain",
    "Reino de España"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "cat": "Catalan",
    "eus": "Basque",
    "glg": "Galician",
    "oci": "Occitan",
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Königreich Spanien",
      "common": "Spanien"
    },
    "fra": {
      "official": "Royaume d'Espagne",
      "common": "Espagne"
    },
    "hrv": {
      "official": "Kraljevina Španjolska",
      "common": "Španjolska"
    },
    "ita": {
      "official": "Regno di Spagna",
      "common": "Spagna"
    },
    "jpn": {
      "official": "スペイン王国",
      "common": "スペイン"
    },
    "nld": {
      "official": "Koninkrijk Spanje",
      "common": "Spanje"
    },
    "por": {
      "official": "Reino de Espanha",
      "common": "Espanha"
    },
    "rus": {
      "official": "Королевство Испания",
      "common": "Испания"
    },
    "spa": {
      "official": "Reino de España",
      "common": "España"
    },
    "fin": {
      "official": "Espanjan kuningaskunta",
      "common": "Espanja"
    }
  },
  "latlng": [
    40,
    -4
  ],
  "demonym": "Spanish",
  "landlocked": false,
  "borders": [
    "AND",
    "FRA",
    "GIB",
    "PRT",
    "MAR"
  ],
  "area": 505992,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Spain.svg",
  "codes": {
    "cca2": "ES",
    "ccn3": "724",
    "cca3": "ESP",
    "cioc": "ESP"
  },
  "provinces": [
    "Andalucia",
    "Aragon",
    "Asturias",
    "Baleares (Balearic Islands)",
    "Canarias (Canary Islands)",
    "Cantabria",
    "Castilla y Leon",
    "Castilla-La Mancha",
    "Cataluna",
    "Ceuta",
    "Communidad Valencian",
    "Extremadura",
    "Galicia",
    "Islas Chafarinas",
    "La Rioja",
    "Madrid",
    "Melilla",
    "Murcia",
    "Navarra",
    "Pais Vasco (Basque Country)",
    "Penon de Alhucemas",
    "Penon de Velez de la Gomera"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SSD",
        "properties": {
          "name": "South Sudan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                33.963393,
                9.464285
              ],
              [
                33.97498,
                8.68456
              ],
              [
                33.8255,
                8.37916
              ],
              [
                33.2948,
                8.35458
              ],
              [
                32.95418,
                7.78497
              ],
              [
                33.56829,
                7.71334
              ],
              [
                34.0751,
                7.22595
              ],
              [
                34.25032,
                6.82607
              ],
              [
                34.70702,
                6.59422
              ],
              [
                35.298007,
                5.506
              ],
              [
                34.620196,
                4.847123
              ],
              [
                34.005,
                4.249885
              ],
              [
                33.39,
                3.79
              ],
              [
                32.68642,
                3.79232
              ],
              [
                31.88145,
                3.55827
              ],
              [
                31.24556,
                3.7819
              ],
              [
                30.83385,
                3.50917
              ],
              [
                29.95349,
                4.1737
              ],
              [
                29.715995,
                4.600805
              ],
              [
                29.159078,
                4.389267
              ],
              [
                28.696678,
                4.455077
              ],
              [
                28.428994,
                4.287155
              ],
              [
                27.979977,
                4.408413
              ],
              [
                27.374226,
                5.233944
              ],
              [
                27.213409,
                5.550953
              ],
              [
                26.465909,
                5.946717
              ],
              [
                26.213418,
                6.546603
              ],
              [
                25.796648,
                6.979316
              ],
              [
                25.124131,
                7.500085
              ],
              [
                25.114932,
                7.825104
              ],
              [
                24.567369,
                8.229188
              ],
              [
                23.88698,
                8.61973
              ],
              [
                24.194068,
                8.728696
              ],
              [
                24.537415,
                8.917538
              ],
              [
                24.794926,
                9.810241
              ],
              [
                25.069604,
                10.27376
              ],
              [
                25.790633,
                10.411099
              ],
              [
                25.962307,
                10.136421
              ],
              [
                26.477328,
                9.55273
              ],
              [
                26.752006,
                9.466893
              ],
              [
                27.112521,
                9.638567
              ],
              [
                27.833551,
                9.604232
              ],
              [
                27.97089,
                9.398224
              ],
              [
                28.966597,
                9.398224
              ],
              [
                29.000932,
                9.604232
              ],
              [
                29.515953,
                9.793074
              ],
              [
                29.618957,
                10.084919
              ],
              [
                29.996639,
                10.290927
              ],
              [
                30.837841,
                9.707237
              ],
              [
                31.352862,
                9.810241
              ],
              [
                31.850716,
                10.531271
              ],
              [
                32.400072,
                11.080626
              ],
              [
                32.314235,
                11.681484
              ],
              [
                32.073892,
                11.97333
              ],
              [
                32.67475,
                12.024832
              ],
              [
                32.743419,
                12.248008
              ],
              [
                33.206938,
                12.179338
              ],
              [
                33.086766,
                11.441141
              ],
              [
                33.206938,
                10.720112
              ],
              [
                33.721959,
                10.325262
              ],
              [
                33.842131,
                9.981915
              ],
              [
                33.824963,
                9.484061
              ],
              [
                33.963393,
                9.464285
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],209:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sri Lanka",
    "official": "Democratic Socialist Republic of Sri Lanka",
    "native": {
      "sin": {
        "official": "ශ්‍රී ලංකා ප්‍රජාතාන්ත්‍රික සමාජවාදී ජනරජය",
        "common": "ශ්‍රී ලංකාව"
      },
      "tam": {
        "official": "இலங்கை சனநாயக சோசலிசக் குடியரசு",
        "common": "இலங்கை"
      }
    }
  },
  "tld": [
    ".lk",
    ".இலங்கை",
    ".ලංකා"
  ],
  "currency": [
    "LKR"
  ],
  "callingCode": [
    "94"
  ],
  "capital": "Colombo",
  "altSpellings": [
    "LK",
    "ilaṅkai",
    "Democratic Socialist Republic of Sri Lanka"
  ],
  "region": "Asia",
  "subregion": "Southern Asia",
  "languages": {
    "sin": "Sinhala",
    "tam": "Tamil"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Sozialistische Republik Sri Lanka",
      "common": "Sri Lanka"
    },
    "fra": {
      "official": "République démocratique socialiste du Sri Lanka",
      "common": "Sri Lanka"
    },
    "hrv": {
      "official": "Demokratska Socijalističke Republike Šri Lanke",
      "common": "Šri Lanka"
    },
    "ita": {
      "official": "Repubblica democratica socialista dello Sri Lanka",
      "common": "Sri Lanka"
    },
    "jpn": {
      "official": "スリランカ民主社会主義共和国",
      "common": "スリランカ"
    },
    "nld": {
      "official": "Democratische Socialistische Republiek Sri Lanka",
      "common": "Sri Lanka"
    },
    "por": {
      "official": "República Democrática Socialista do Sri Lanka",
      "common": "Sri Lanka"
    },
    "rus": {
      "official": "Демократическая Социалистическая Республика Шри-Ланка",
      "common": "Шри-Ланка"
    },
    "spa": {
      "official": "República Democrática Socialista de Sri Lanka",
      "common": "Sri Lanka"
    },
    "fin": {
      "official": "Sri Lankan demokraattinen sosialistinen tasavalta",
      "common": "Sri Lanka"
    }
  },
  "latlng": [
    7,
    81
  ],
  "demonym": "Sri Lankan",
  "landlocked": false,
  "borders": [
    "IND"
  ],
  "area": 65610,
  "codes": {
    "cca2": "LK",
    "ccn3": "144",
    "cca3": "LKA",
    "cioc": "SRI"
  },
  "provinces": [
    "Central",
    "Eastern",
    "North Central",
    "North Eastern",
    "North Western",
    "Northern",
    "Sabaragamuwa",
    "Southern",
    "Uva",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "LKA",
        "properties": {
          "name": "Sri Lanka"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.787959,
                7.523055
              ],
              [
                81.637322,
                6.481775
              ],
              [
                81.21802,
                6.197141
              ],
              [
                80.348357,
                5.96837
              ],
              [
                79.872469,
                6.763463
              ],
              [
                79.695167,
                8.200843
              ],
              [
                80.147801,
                9.824078
              ],
              [
                80.838818,
                9.268427
              ],
              [
                81.304319,
                8.564206
              ],
              [
                81.787959,
                7.523055
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],210:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sudan",
    "official": "Republic of the Sudan",
    "native": {
      "ara": {
        "official": "جمهورية السودان",
        "common": "السودان"
      },
      "eng": {
        "official": "Republic of the Sudan",
        "common": "Sudan"
      }
    }
  },
  "tld": [
    ".sd"
  ],
  "currency": [
    "SDG"
  ],
  "callingCode": [
    "249"
  ],
  "capital": "Khartoum",
  "altSpellings": [
    "SD",
    "Republic of the Sudan",
    "Jumhūrīyat as-Sūdān"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ara": "Arabic",
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Sudan",
      "common": "Sudan"
    },
    "fra": {
      "official": "République du Soudan",
      "common": "Soudan"
    },
    "hrv": {
      "official": "Republika Sudan",
      "common": "Sudan"
    },
    "ita": {
      "official": "Repubblica del Sudan",
      "common": "Sudan"
    },
    "jpn": {
      "official": "スーダン共和国",
      "common": "スーダン"
    },
    "nld": {
      "official": "Republiek Soedan",
      "common": "Soedan"
    },
    "por": {
      "official": "República do Sudão",
      "common": "Sudão"
    },
    "rus": {
      "official": "Республика Судан",
      "common": "Судан"
    },
    "spa": {
      "official": "República de Sudán",
      "common": "Sudán"
    },
    "fin": {
      "official": "Sudanin tasavalta",
      "common": "Sudan"
    }
  },
  "latlng": [
    15,
    30
  ],
  "demonym": "Sudanese",
  "landlocked": false,
  "borders": [
    "CAF",
    "TCD",
    "EGY",
    "ERI",
    "ETH",
    "LBY",
    "SSD"
  ],
  "area": 1886068,
  "codes": {
    "cca2": "SD",
    "ccn3": "729",
    "cca3": "SDN",
    "cioc": "SUD"
  },
  "provinces": [
    "A'ali an Nil",
    "Al Bahr al Ahmar",
    "Al Buhayrat",
    "Al Jazirah",
    "Al Khartum",
    "Al Qadarif",
    "Al Wahdah",
    "An Nil al Abyad",
    "An Nil al Azraq",
    "Ash Shamaliyah",
    "Bahr al Jabal",
    "Gharb al Istiwa'iyah",
    "Gharb Bahr al Ghazal",
    "Gharb Darfur",
    "Gharb Kurdufan",
    "Janub Darfur",
    "Janub Kurdufan",
    "Junqali",
    "Kassala",
    "Nahr an Nil",
    "Shamal Bahr al Ghazal",
    "Shamal Darfur",
    "Shamal Kurdufan",
    "Sharq al Istiwa'iyah",
    "Sinnar",
    "Warab"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SDN",
        "properties": {
          "name": "Sudan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                33.963393,
                9.464285
              ],
              [
                33.824963,
                9.484061
              ],
              [
                33.842131,
                9.981915
              ],
              [
                33.721959,
                10.325262
              ],
              [
                33.206938,
                10.720112
              ],
              [
                33.086766,
                11.441141
              ],
              [
                33.206938,
                12.179338
              ],
              [
                32.743419,
                12.248008
              ],
              [
                32.67475,
                12.024832
              ],
              [
                32.073892,
                11.97333
              ],
              [
                32.314235,
                11.681484
              ],
              [
                32.400072,
                11.080626
              ],
              [
                31.850716,
                10.531271
              ],
              [
                31.352862,
                9.810241
              ],
              [
                30.837841,
                9.707237
              ],
              [
                29.996639,
                10.290927
              ],
              [
                29.618957,
                10.084919
              ],
              [
                29.515953,
                9.793074
              ],
              [
                29.000932,
                9.604232
              ],
              [
                28.966597,
                9.398224
              ],
              [
                27.97089,
                9.398224
              ],
              [
                27.833551,
                9.604232
              ],
              [
                27.112521,
                9.638567
              ],
              [
                26.752006,
                9.466893
              ],
              [
                26.477328,
                9.55273
              ],
              [
                25.962307,
                10.136421
              ],
              [
                25.790633,
                10.411099
              ],
              [
                25.069604,
                10.27376
              ],
              [
                24.794926,
                9.810241
              ],
              [
                24.537415,
                8.917538
              ],
              [
                24.194068,
                8.728696
              ],
              [
                23.88698,
                8.61973
              ],
              [
                23.805813,
                8.666319
              ],
              [
                23.459013,
                8.954286
              ],
              [
                23.394779,
                9.265068
              ],
              [
                23.55725,
                9.681218
              ],
              [
                23.554304,
                10.089255
              ],
              [
                22.977544,
                10.714463
              ],
              [
                22.864165,
                11.142395
              ],
              [
                22.87622,
                11.38461
              ],
              [
                22.50869,
                11.67936
              ],
              [
                22.49762,
                12.26024
              ],
              [
                22.28801,
                12.64605
              ],
              [
                21.93681,
                12.58818
              ],
              [
                22.03759,
                12.95546
              ],
              [
                22.29658,
                13.37232
              ],
              [
                22.18329,
                13.78648
              ],
              [
                22.51202,
                14.09318
              ],
              [
                22.30351,
                14.32682
              ],
              [
                22.56795,
                14.94429
              ],
              [
                23.02459,
                15.68072
              ],
              [
                23.88689,
                15.61084
              ],
              [
                23.83766,
                19.58047
              ],
              [
                23.85,
                20
              ],
              [
                25,
                20.00304
              ],
              [
                25,
                22
              ],
              [
                29.02,
                22
              ],
              [
                32.9,
                22
              ],
              [
                36.86623,
                22
              ],
              [
                37.18872,
                21.01885
              ],
              [
                36.96941,
                20.83744
              ],
              [
                37.1147,
                19.80796
              ],
              [
                37.48179,
                18.61409
              ],
              [
                37.86276,
                18.36786
              ],
              [
                38.41009,
                17.998307
              ],
              [
                37.904,
                17.42754
              ],
              [
                37.16747,
                17.26314
              ],
              [
                36.85253,
                16.95655
              ],
              [
                36.75389,
                16.29186
              ],
              [
                36.32322,
                14.82249
              ],
              [
                36.42951,
                14.42211
              ],
              [
                36.27022,
                13.56333
              ],
              [
                35.86363,
                12.57828
              ],
              [
                35.26049,
                12.08286
              ],
              [
                34.83163,
                11.31896
              ],
              [
                34.73115,
                10.91017
              ],
              [
                34.25745,
                10.63009
              ],
              [
                33.96162,
                9.58358
              ],
              [
                33.963393,
                9.464285
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],211:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Suriname",
    "official": "Republic of Suriname",
    "native": {
      "nld": {
        "official": "Republiek Suriname",
        "common": "Suriname"
      }
    }
  },
  "tld": [
    ".sr"
  ],
  "currency": [
    "SRD"
  ],
  "callingCode": [
    "597"
  ],
  "capital": "Paramaribo",
  "altSpellings": [
    "SR",
    "Sarnam",
    "Sranangron",
    "Republic of Suriname",
    "Republiek Suriname"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "nld": "Dutch"
  },
  "translations": {
    "deu": {
      "official": "Republik Suriname",
      "common": "Suriname"
    },
    "fra": {
      "official": "République du Suriname",
      "common": "Surinam"
    },
    "hrv": {
      "official": "Republika Surinam",
      "common": "Surinam"
    },
    "ita": {
      "official": "Repubblica del Suriname",
      "common": "Suriname"
    },
    "jpn": {
      "official": "スリナム共和国",
      "common": "スリナム"
    },
    "nld": {
      "official": "Republiek Suriname",
      "common": "Suriname"
    },
    "por": {
      "official": "República do Suriname",
      "common": "Suriname"
    },
    "rus": {
      "official": "Республика Суринам",
      "common": "Суринам"
    },
    "spa": {
      "official": "República de Suriname",
      "common": "Surinam"
    },
    "fin": {
      "official": "Surinamen tasavalta",
      "common": "Suriname"
    }
  },
  "latlng": [
    4,
    -56
  ],
  "demonym": "Surinamer",
  "landlocked": false,
  "borders": [
    "BRA",
    "GUF",
    "GUY"
  ],
  "area": 163820,
  "codes": {
    "cca2": "SR",
    "ccn3": "740",
    "cca3": "SUR",
    "cioc": "SUR"
  },
  "provinces": [
    "Brokopondo",
    "Commewijne",
    "Coronie",
    "Marowijne",
    "Nickerie",
    "Para",
    "Paramaribo",
    "Saramacca",
    "Sipaliwini",
    "Wanica"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SUR",
        "properties": {
          "name": "Suriname"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -57.147436,
                5.97315
              ],
              [
                -55.949318,
                5.772878
              ],
              [
                -55.84178,
                5.953125
              ],
              [
                -55.03325,
                6.025291
              ],
              [
                -53.958045,
                5.756548
              ],
              [
                -54.478633,
                4.896756
              ],
              [
                -54.399542,
                4.212611
              ],
              [
                -54.006931,
                3.620038
              ],
              [
                -54.181726,
                3.18978
              ],
              [
                -54.269705,
                2.732392
              ],
              [
                -54.524754,
                2.311849
              ],
              [
                -55.097587,
                2.523748
              ],
              [
                -55.569755,
                2.421506
              ],
              [
                -55.973322,
                2.510364
              ],
              [
                -56.073342,
                2.220795
              ],
              [
                -55.9056,
                2.021996
              ],
              [
                -55.995698,
                1.817667
              ],
              [
                -56.539386,
                1.899523
              ],
              [
                -57.150098,
                2.768927
              ],
              [
                -57.281433,
                3.333492
              ],
              [
                -57.601569,
                3.334655
              ],
              [
                -58.044694,
                4.060864
              ],
              [
                -57.86021,
                4.576801
              ],
              [
                -57.914289,
                4.812626
              ],
              [
                -57.307246,
                5.073567
              ],
              [
                -57.147436,
                5.97315
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],212:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Svalbard and Jan Mayen",
    "official": "Svalbard og Jan Mayen",
    "native": {
      "nor": {
        "official": "Svalbard og Jan Mayen",
        "common": "Svalbard og Jan Mayen"
      }
    }
  },
  "tld": [
    ".sj"
  ],
  "currency": [
    "NOK"
  ],
  "callingCode": [
    "4779"
  ],
  "capital": "Longyearbyen",
  "altSpellings": [
    "SJ",
    "Svalbard and Jan Mayen Islands"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "nor": "Norwegian"
  },
  "translations": {
    "deu": {
      "official": "Inselgruppe Spitzbergen",
      "common": "Spitzbergen"
    },
    "fra": {
      "official": "Jan Mayen Svalbard",
      "common": "Svalbard et Jan Mayen"
    },
    "hrv": {
      "official": "Svalbard og Jan Mayen",
      "common": "Svalbard i Jan Mayen"
    },
    "ita": {
      "official": "Svalbard og Jan Mayen",
      "common": "Svalbard e Jan Mayen"
    },
    "jpn": {
      "official": "スバールバル諸島OGヤンマイエン",
      "common": "スヴァールバル諸島およびヤンマイエン島"
    },
    "nld": {
      "official": "Svalbard og Jan Mayen",
      "common": "Svalbard en Jan Mayen"
    },
    "por": {
      "official": "Svalbard og Jan Mayen",
      "common": "Ilhas Svalbard e Jan Mayen"
    },
    "rus": {
      "official": "Свальбарда ог Ян-Майен",
      "common": "Шпицберген и Ян-Майен"
    },
    "spa": {
      "official": "Svalbard og Jan Mayen",
      "common": "Islas Svalbard y Jan Mayen"
    },
    "fin": {
      "official": "Huippuvuoret",
      "common": "Huippuvuoret"
    }
  },
  "latlng": [
    78,
    20
  ],
  "demonym": "Norwegian",
  "landlocked": false,
  "borders": [],
  "area": -1,
  "codes": {
    "cca2": "SJ",
    "ccn3": "744",
    "cca3": "SJM",
    "cioc": ""
  }
}
},{}],213:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Swaziland",
    "official": "Kingdom of Swaziland",
    "native": {
      "eng": {
        "official": "Kingdom of Swaziland",
        "common": "Swaziland"
      },
      "ssw": {
        "official": "Kingdom of Swaziland",
        "common": "Swaziland"
      }
    }
  },
  "tld": [
    ".sz"
  ],
  "currency": [
    "SZL"
  ],
  "callingCode": [
    "268"
  ],
  "capital": "Lobamba",
  "altSpellings": [
    "SZ",
    "weSwatini",
    "Swatini",
    "Ngwane",
    "Kingdom of Swaziland",
    "Umbuso waseSwatini"
  ],
  "region": "Africa",
  "subregion": "Southern Africa",
  "languages": {
    "eng": "English",
    "ssw": "Swazi"
  },
  "translations": {
    "deu": {
      "official": "Königreich Swasiland",
      "common": "Swasiland"
    },
    "fra": {
      "official": "Royaume du Swaziland",
      "common": "Swaziland"
    },
    "hrv": {
      "official": "Kraljevina Svazi",
      "common": "Svazi"
    },
    "ita": {
      "official": "Regno dello Swaziland",
      "common": "Swaziland"
    },
    "jpn": {
      "official": "スワジランド王国",
      "common": "スワジランド"
    },
    "nld": {
      "official": "Koninkrijk Swaziland",
      "common": "Swaziland"
    },
    "por": {
      "official": "Reino da Suazilândia",
      "common": "Suazilândia"
    },
    "rus": {
      "official": "Королевство Свазиленд",
      "common": "Свазиленд"
    },
    "spa": {
      "official": "Reino de Swazilandia",
      "common": "Suazilandia"
    },
    "fin": {
      "official": "Swazimaan kuningaskunta",
      "common": "Swazimaa"
    }
  },
  "latlng": [
    -26.5,
    31.5
  ],
  "demonym": "Swazi",
  "landlocked": true,
  "borders": [
    "MOZ",
    "ZAF"
  ],
  "area": 17364,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Swaziland.svg",
  "codes": {
    "cca2": "SZ",
    "ccn3": "748",
    "cca3": "SWZ",
    "cioc": "SWZ"
  },
  "provinces": [
    "Hhohho",
    "Lubombo",
    "Manzini",
    "Shiselweni"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SWZ",
        "properties": {
          "name": "Swaziland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                32.071665,
                -26.73382
              ],
              [
                31.86806,
                -27.177927
              ],
              [
                31.282773,
                -27.285879
              ],
              [
                30.685962,
                -26.743845
              ],
              [
                30.676609,
                -26.398078
              ],
              [
                30.949667,
                -26.022649
              ],
              [
                31.04408,
                -25.731452
              ],
              [
                31.333158,
                -25.660191
              ],
              [
                31.837778,
                -25.843332
              ],
              [
                31.985779,
                -26.29178
              ],
              [
                32.071665,
                -26.73382
              ]
            ]
          ]
        }
      }
    ]
  }
}
},{}],214:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sweden",
    "official": "Kingdom of Sweden",
    "native": {
      "swe": {
        "official": "Konungariket Sverige",
        "common": "Sverige"
      }
    }
  },
  "tld": [
    ".se"
  ],
  "currency": [
    "SEK"
  ],
  "callingCode": [
    "46"
  ],
  "capital": "Stockholm",
  "altSpellings": [
    "SE",
    "Kingdom of Sweden",
    "Konungariket Sverige"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "swe": "Swedish"
  },
  "translations": {
    "deu": {
      "official": "Königreich Schweden",
      "common": "Schweden"
    },
    "fra": {
      "official": "Royaume de Suède",
      "common": "Suède"
    },
    "hrv": {
      "official": "Kraljevina Švedska",
      "common": "Švedska"
    },
    "ita": {
      "official": "Regno di Svezia",
      "common": "Svezia"
    },
    "jpn": {
      "official": "スウェーデン王国",
      "common": "スウェーデン"
    },
    "nld": {
      "official": "Koninkrijk Zweden",
      "common": "Zweden"
    },
    "por": {
      "official": "Reino da Suécia",
      "common": "Suécia"
    },
    "rus": {
      "official": "Королевство Швеция",
      "common": "Швеция"
    },
    "spa": {
      "official": "Reino de Suecia",
      "common": "Suecia"
    },
    "fin": {
      "official": "Ruotsin kuningaskunta",
      "common": "Ruotsi"
    }
  },
  "latlng": [
    62,
    15
  ],
  "demonym": "Swedish",
  "landlocked": false,
  "borders": [
    "FIN",
    "NOR"
  ],
  "area": 450295,
  "codes": {
    "cca2": "SE",
    "ccn3": "752",
    "cca3": "SWE",
    "cioc": "SWE"
  },
  "provinces": [
    "Blekinge",
    "Dalarnas",
    "Gavleborgs",
    "Gotlands",
    "Hallands",
    "Jamtlands",
    "Jonkopings",
    "Kalmar",
    "Kronobergs",
    "Norrbottens",
    "Orebro",
    "Ostergotlands",
    "Skane",
    "Sodermanlands",
    "Stockholms",
    "Uppsala",
    "Varmlands",
    "Vasterbottens",
    "Vasternorrlands",
    "Vastmanlands",
    "Vastra Gotalands"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SWE",
        "properties": {
          "name": "Sweden"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  22.183173,
                  65.723741
                ],
                [
                  21.213517,
                  65.026005
                ],
                [
                  21.369631,
                  64.413588
                ],
                [
                  19.778876,
                  63.609554
                ],
                [
                  17.847779,
                  62.7494
                ],
                [
                  17.119555,
                  61.341166
                ],
                [
                  17.831346,
                  60.636583
                ],
                [
                  18.787722,
                  60.081914
                ],
                [
                  17.869225,
                  58.953766
                ],
                [
                  16.829185,
                  58.719827
                ],
                [
                  16.44771,
                  57.041118
                ],
                [
                  15.879786,
                  56.104302
                ],
                [
                  14.666681,
                  56.200885
                ],
                [
                  14.100721,
                  55.407781
                ],
                [
                  12.942911,
                  55.361737
                ],
                [
                  12.625101,
                  56.30708
                ],
                [
                  11.787942,
                  57.441817
                ],
                [
                  11.027369,
                  58.856149
                ],
                [
                  11.468272,
                  59.432393
                ],
                [
                  12.300366,
                  60.117933
                ],
                [
                  12.631147,
                  61.293572
                ],
                [
                  11.992064,
                  61.800362
                ],
                [
                  11.930569,
                  63.128318
                ],
                [
                  12.579935,
                  64.066219
                ],
                [
                  13.571916,
                  64.049114
                ],
                [
                  13.919905,
                  64.445421
                ],
                [
                  13.55569,
                  64.787028
                ],
                [
                  15.108411,
                  66.193867
                ],
                [
                  16.108712,
                  67.302456
                ],
                [
                  16.768879,
                  68.013937
                ],
                [
                  17.729182,
                  68.010552
                ],
                [
                  17.993868,
                  68.567391
                ],
                [
                  19.87856,
                  68.407194
                ],
                [
                  20.025269,
                  69.065139
                ],
                [
                  20.645593,
                  69.106247
                ],
                [
                  21.978535,
                  68.616846
                ],
                [
                  23.539473,
                  67.936009
                ],
                [
                  23.56588,
                  66.396051
                ],
                [
                  23.903379,
                  66.006927
                ],
                [
                  22.183173,
                  65.723741
                ]
              ],
              [
                [
                  17.061767,
                  57.385783
                ],
                [
                  17.210083,
                  57.326521
                ],
                [
                  16.430053,
                  56.179196
                ],
                [
                  16.364135,
                  56.556455
                ],
                [
                  17.061767,
                  57.385783
                ]
              ],
              [
                [
                  19.35791,
                  57.958588
                ],
                [
                  18.8031,
                  57.651279
                ],
                [
                  18.825073,
                  57.444949
                ],
                [
                  18.995361,
                  57.441993
                ],
                [
                  18.951416,
                  57.370976
                ],
                [
                  18.693237,
                  57.305756
                ],
                [
                  18.709716,
                  57.204734
                ],
                [
                  18.462524,
                  57.127295
                ],
                [
                  18.319702,
                  56.926992
                ],
                [
                  18.105468,
                  56.891003
                ],
                [
                  18.187866,
                  57.109402
                ],
                [
                  18.072509,
                  57.267163
                ],
                [
                  18.154907,
                  57.394664
                ],
                [
                  18.094482,
                  57.545312
                ],
                [
                  18.660278,
                  57.929434
                ],
                [
                  19.039306,
                  57.941098
                ],
                [
                  19.105224,
                  57.993543
                ],
                [
                  19.374389,
                  57.996454
                ],
                [
                  19.35791,
                  57.958588
                ]
              ],
              [
                [
                  20.846557,
                  63.82371
                ],
                [
                  21.066284,
                  63.829768
                ],
                [
                  20.9729,
                  63.71567
                ],
                [
                  20.824584,
                  63.579121
                ],
                [
                  20.695495,
                  63.59134
                ],
                [
                  20.819091,
                  63.714454
                ],
                [
                  20.799865,
                  63.780059
                ],
                [
                  20.846557,
                  63.82371
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],215:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Switzerland",
    "official": "Swiss Confederation",
    "native": {
      "fra": {
        "official": "Confédération suisse",
        "common": "Suisse"
      },
      "gsw": {
        "official": "Schweizerische Eidgenossenschaft",
        "common": "Schweiz"
      },
      "ita": {
        "official": "Confederazione Svizzera",
        "common": "Svizzera"
      },
      "roh": {
        "official": "Confederaziun svizra",
        "common": "Svizra"
      }
    }
  },
  "tld": [
    ".ch"
  ],
  "currency": [
    "CHE",
    "CHF",
    "CHW"
  ],
  "callingCode": [
    "41"
  ],
  "capital": "Bern",
  "altSpellings": [
    "CH",
    "Swiss Confederation",
    "Schweiz",
    "Suisse",
    "Svizzera",
    "Svizra"
  ],
  "region": "Europe",
  "subregion": "Western Europe",
  "languages": {
    "fra": "French",
    "gsw": "Swiss German",
    "ita": "Italian",
    "roh": "Romansh"
  },
  "translations": {
    "deu": {
      "official": "Schweizerische Eidgenossenschaft",
      "common": "Schweiz"
    },
    "fra": {
      "official": "Confédération suisse",
      "common": "Suisse"
    },
    "hrv": {
      "official": "švicarska Konfederacija",
      "common": "Švicarska"
    },
    "ita": {
      "official": "Confederazione svizzera",
      "common": "Svizzera"
    },
    "jpn": {
      "official": "スイス連邦",
      "common": "スイス"
    },
    "nld": {
      "official": "Zwitserse Confederatie",
      "common": "Zwitserland"
    },
    "por": {
      "official": "Confederação Suíça",
      "common": "Suíça"
    },
    "rus": {
      "official": "Швейцарская Конфедерация",
      "common": "Швейцария"
    },
    "spa": {
      "official": "Confederación Suiza",
      "common": "Suiza"
    },
    "fin": {
      "official": "Sveitsin valaliitto",
      "common": "Sveitsi"
    }
  },
  "latlng": [
    47,
    8
  ],
  "demonym": "Swiss",
  "landlocked": true,
  "borders": [
    "AUT",
    "FRA",
    "ITA",
    "LIE",
    "DEU"
  ],
  "area": 41284,
  "codes": {
    "cca2": "CH",
    "ccn3": "756",
    "cca3": "CHE",
    "cioc": "SUI"
  },
  "provinces": [
    "Aargau",
    "Ausser-Rhoden",
    "Basel-Landschaft",
    "Basel-Stadt",
    "Bern",
    "Fribourg",
    "Geneve",
    "Glarus",
    "Graubunden",
    "Inner-Rhoden",
    "Jura",
    "Luzern",
    "Neuchatel",
    "Nidwalden",
    "Obwalden",
    "Sankt Gallen",
    "Schaffhausen",
    "Schwyz",
    "Solothurn",
    "Thurgau",
    "Ticino",
    "Uri",
    "Valais",
    "Vaud",
    "Zug",
    "Zurich"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "CHE",
        "properties": {
          "name": "Switzerland"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                9.594226,
                47.525058
              ],
              [
                9.632932,
                47.347601
              ],
              [
                9.47997,
                47.10281
              ],
              [
                9.932448,
                46.920728
              ],
              [
                10.442701,
                46.893546
              ],
              [
                10.363378,
                46.483571
              ],
              [
                9.922837,
                46.314899
              ],
              [
                9.182882,
                46.440215
              ],
              [
                8.966306,
                46.036932
              ],
              [
                8.489952,
                46.005151
              ],
              [
                8.31663,
                46.163642
              ],
              [
                7.755992,
                45.82449
              ],
              [
                7.273851,
                45.776948
              ],
              [
                6.843593,
                45.991147
              ],
              [
                6.5001,
                46.429673
              ],
              [
                6.022609,
                46.27299
              ],
              [
                6.037389,
                46.725779
              ],
              [
                6.768714,
                47.287708
              ],
              [
                6.736571,
                47.541801
              ],
              [
                7.192202,
                47.449766
              ],
              [
                7.466759,
                47.620582
              ],
              [
                8.317301,
                47.61358
              ],
              [
                8.522612,
                47.830828
              ],
              [
                9.594226,
                47.525058
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],216:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Syria",
    "official": "Syrian Arab Republic",
    "native": {
      "ara": {
        "official": "الجمهورية العربية السورية",
        "common": "سوريا"
      }
    }
  },
  "tld": [
    ".sy",
    "سوريا."
  ],
  "currency": [
    "SYP"
  ],
  "callingCode": [
    "963"
  ],
  "capital": "Damascus",
  "altSpellings": [
    "SY",
    "Syrian Arab Republic",
    "Al-Jumhūrīyah Al-ʻArabīyah As-Sūrīyah"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Arabische Republik Syrien",
      "common": "Syrien"
    },
    "fra": {
      "official": "République arabe syrienne",
      "common": "Syrie"
    },
    "hrv": {
      "official": "Sirijska Arapska Republika",
      "common": "Sirija"
    },
    "ita": {
      "official": "Repubblica araba siriana",
      "common": "Siria"
    },
    "jpn": {
      "official": "シリアアラブ共和国",
      "common": "シリア・アラブ共和国"
    },
    "nld": {
      "official": "Syrische Arabische Republiek",
      "common": "Syrië"
    },
    "por": {
      "official": "República Árabe Síria",
      "common": "Síria"
    },
    "rus": {
      "official": "Сирийская Арабская Республика",
      "common": "Сирия"
    },
    "spa": {
      "official": "República Árabe Siria",
      "common": "Siria"
    },
    "fin": {
      "official": "Syyrian arabitasavalta",
      "common": "Syyria"
    }
  },
  "latlng": [
    35,
    38
  ],
  "demonym": "Syrian",
  "landlocked": false,
  "borders": [
    "IRQ",
    "ISR",
    "JOR",
    "LBN",
    "TUR"
  ],
  "area": 185180,
  "codes": {
    "cca2": "SY",
    "ccn3": "760",
    "cca3": "SYR",
    "cioc": "SYR"
  },
  "provinces": [
    "Al Hasakah",
    "Al Ladhiqiyah",
    "Al Qunaytirah",
    "Ar Raqqah",
    "As Suwayda'",
    "Dar'a",
    "Dayr az Zawr",
    "Dimashq",
    "Halab",
    "Hamah",
    "Hims",
    "Idlib",
    "Rif Dimashq",
    "Tartus"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "SYR",
        "properties": {
          "name": "Syria"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                38.792341,
                33.378686
              ],
              [
                36.834062,
                32.312938
              ],
              [
                35.719918,
                32.709192
              ],
              [
                35.700798,
                32.716014
              ],
              [
                35.836397,
                32.868123
              ],
              [
                35.821101,
                33.277426
              ],
              [
                36.06646,
                33.824912
              ],
              [
                36.61175,
                34.201789
              ],
              [
                36.448194,
                34.593935
              ],
              [
                35.998403,
                34.644914
              ],
              [
                35.905023,
                35.410009
              ],
              [
                36.149763,
                35.821535
              ],
              [
                36.41755,
                36.040617
              ],
              [
                36.685389,
                36.259699
              ],
              [
                36.739494,
                36.81752
              ],
              [
                37.066761,
                36.623036
              ],
              [
                38.167727,
                36.90121
              ],
              [
                38.699891,
                36.712927
              ],
              [
                39.52258,
                36.716054
              ],
              [
                40.673259,
                37.091276
              ],
              [
                41.212089,
                37.074352
              ],
              [
                42.349591,
                37.229873
              ],
              [
                41.837064,
                36.605854
              ],
              [
                41.289707,
                36.358815
              ],
              [
                41.383965,
                35.628317
              ],
              [
                41.006159,
                34.419372
              ],
              [
                38.792341,
                33.378686
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],217:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Taiwan",
    "official": "Republic of China (Taiwan)",
    "native": {
      "cmn": {
        "official": "中华民国",
        "common": "臺灣"
      }
    }
  },
  "tld": [
    ".tw",
    ".台湾",
    ".台灣"
  ],
  "currency": [
    "TWD"
  ],
  "callingCode": [
    "886"
  ],
  "capital": "Taipei",
  "altSpellings": [
    "TW",
    "Táiwān",
    "Republic of China",
    "中華民國",
    "Zhōnghuá Mínguó",
    "Chinese Taipei for IOC",
    "Taiwan, Province of China"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "cmn": "Mandarin"
  },
  "translations": {
    "deu": {
      "official": "Republik China (Taiwan)",
      "common": "Taiwan"
    },
    "fra": {
      "official": "République de Chine (Taïwan)",
      "common": "Taïwan"
    },
    "hrv": {
      "official": "Republika Kina",
      "common": "Tajvan"
    },
    "ita": {
      "official": "Repubblica cinese (Taiwan)",
      "common": "Taiwan"
    },
    "jpn": {
      "official": "中華民国",
      "common": "台湾（台湾省/中華民国）"
    },
    "nld": {
      "official": "Republiek China (Taiwan)",
      "common": "Taiwan"
    },
    "por": {
      "official": "República da China",
      "common": "Ilha Formosa"
    },
    "rus": {
      "official": "Китайская Республика",
      "common": "Тайвань"
    },
    "spa": {
      "official": "República de China en Taiwán",
      "common": "Taiwán"
    },
    "fin": {
      "official": "Kiinan tasavalta",
      "common": "Taiwan"
    }
  },
  "latlng": [
    23.5,
    121
  ],
  "demonym": "Taiwanese",
  "landlocked": false,
  "borders": [],
  "area": 36193,
  "codes": {
    "cca2": "TW",
    "ccn3": "158",
    "cca3": "TWN",
    "cioc": "TPE"
  },
  "provinces": [
    "Chang-hua",
    "Chi-lung",
    "Chia-i",
    "Chia-i",
    "Chung-hsing-hsin-ts'un",
    "Hsin-chu",
    "Hsin-chu",
    "Hua-lien",
    "I-lan",
    "Kao-hsiung",
    "Kao-hsiung",
    "Miao-li",
    "Nan-t'ou",
    "P'eng-hu",
    "P'ing-tung",
    "T'ai-chung",
    "T'ai-chung",
    "T'ai-nan",
    "T'ai-nan",
    "T'ai-pei",
    "T'ai-pei",
    "T'ai-tung",
    "T'ao-yuan",
    "Yun-lin"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TWN",
        "properties": {
          "name": "Taiwan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                121.777818,
                24.394274
              ],
              [
                121.175632,
                22.790857
              ],
              [
                120.74708,
                21.970571
              ],
              [
                120.220083,
                22.814861
              ],
              [
                120.106189,
                23.556263
              ],
              [
                120.69468,
                24.538451
              ],
              [
                121.495044,
                25.295459
              ],
              [
                121.951244,
                24.997596
              ],
              [
                121.777818,
                24.394274
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],218:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tajikistan",
    "official": "Republic of Tajikistan",
    "native": {
      "rus": {
        "official": "Республика Таджикистан",
        "common": "Таджикистан"
      },
      "tgk": {
        "official": "Ҷумҳурии Тоҷикистон",
        "common": "Тоҷикистон"
      }
    }
  },
  "tld": [
    ".tj"
  ],
  "currency": [
    "TJS"
  ],
  "callingCode": [
    "992"
  ],
  "capital": "Dushanbe",
  "altSpellings": [
    "TJ",
    "Toçikiston",
    "Republic of Tajikistan",
    "Ҷумҳурии Тоҷикистон",
    "Çumhuriyi Toçikiston"
  ],
  "region": "Asia",
  "subregion": "Central Asia",
  "languages": {
    "rus": "Russian",
    "tgk": "Tajik"
  },
  "translations": {
    "deu": {
      "official": "Republik Tadschikistan",
      "common": "Tadschikistan"
    },
    "fra": {
      "official": "République du Tadjikistan",
      "common": "Tadjikistan"
    },
    "hrv": {
      "official": "Republika Tadžikistan",
      "common": "Tađikistan"
    },
    "ita": {
      "official": "Repubblica del Tajikistan",
      "common": "Tagikistan"
    },
    "jpn": {
      "official": "タジキスタン共和国",
      "common": "タジキスタン"
    },
    "nld": {
      "official": "Tadzjikistan",
      "common": "Tadzjikistan"
    },
    "por": {
      "official": "República do Tajiquistão",
      "common": "Tajiquistão"
    },
    "rus": {
      "official": "Республика Таджикистан",
      "common": "Таджикистан"
    },
    "spa": {
      "official": "República de Tayikistán",
      "common": "Tayikistán"
    },
    "fin": {
      "official": "Tadžikistanin tasavalta",
      "common": "Tadžikistan"
    }
  },
  "latlng": [
    39,
    71
  ],
  "demonym": "Tadzhik",
  "landlocked": true,
  "borders": [
    "AFG",
    "CHN",
    "KGZ",
    "UZB"
  ],
  "area": 143100,
  "codes": {
    "cca2": "TJ",
    "ccn3": "762",
    "cca3": "TJK",
    "cioc": "TJK"
  },
  "provinces": [
    "Viloyati Khatlon",
    "Viloyati Leninobod",
    "Viloyati Mukhtori Kuhistoni Badakhshon"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TJK",
        "properties": {
          "name": "Tajikistan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                71.014198,
                40.244366
              ],
              [
                70.648019,
                39.935754
              ],
              [
                69.55961,
                40.103211
              ],
              [
                69.464887,
                39.526683
              ],
              [
                70.549162,
                39.604198
              ],
              [
                71.784694,
                39.279463
              ],
              [
                73.675379,
                39.431237
              ],
              [
                73.928852,
                38.505815
              ],
              [
                74.257514,
                38.606507
              ],
              [
                74.864816,
                38.378846
              ],
              [
                74.829986,
                37.990007
              ],
              [
                74.980002,
                37.41999
              ],
              [
                73.948696,
                37.421566
              ],
              [
                73.260056,
                37.495257
              ],
              [
                72.63689,
                37.047558
              ],
              [
                72.193041,
                36.948288
              ],
              [
                71.844638,
                36.738171
              ],
              [
                71.448693,
                37.065645
              ],
              [
                71.541918,
                37.905774
              ],
              [
                71.239404,
                37.953265
              ],
              [
                71.348131,
                38.258905
              ],
              [
                70.806821,
                38.486282
              ],
              [
                70.376304,
                38.138396
              ],
              [
                70.270574,
                37.735165
              ],
              [
                70.116578,
                37.588223
              ],
              [
                69.518785,
                37.608997
              ],
              [
                69.196273,
                37.151144
              ],
              [
                68.859446,
                37.344336
              ],
              [
                68.135562,
                37.023115
              ],
              [
                67.83,
                37.144994
              ],
              [
                68.392033,
                38.157025
              ],
              [
                68.176025,
                38.901553
              ],
              [
                67.44222,
                39.140144
              ],
              [
                67.701429,
                39.580478
              ],
              [
                68.536416,
                39.533453
              ],
              [
                69.011633,
                40.086158
              ],
              [
                69.329495,
                40.727824
              ],
              [
                70.666622,
                40.960213
              ],
              [
                70.45816,
                40.496495
              ],
              [
                70.601407,
                40.218527
              ],
              [
                71.014198,
                40.244366
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],219:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tanzania",
    "official": "United Republic of Tanzania",
    "native": {
      "eng": {
        "official": "United Republic of Tanzania",
        "common": "Tanzania"
      },
      "swa": {
        "official": "Jamhuri ya Muungano wa Tanzania",
        "common": "Tanzania"
      }
    }
  },
  "tld": [
    ".tz"
  ],
  "currency": [
    "TZS"
  ],
  "callingCode": [
    "255"
  ],
  "capital": "Dodoma",
  "altSpellings": [
    "TZ",
    "Tanzania, United Republic of",
    "United Republic of Tanzania",
    "Jamhuri ya Muungano wa Tanzania"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English",
    "swa": "Swahili"
  },
  "translations": {
    "deu": {
      "official": "Vereinigte Republik Tansania",
      "common": "Tansania"
    },
    "fra": {
      "official": "République -Unie de Tanzanie",
      "common": "Tanzanie"
    },
    "hrv": {
      "official": "Ujedinjena Republika Tanzanija",
      "common": "Tanzanija"
    },
    "ita": {
      "official": "Repubblica Unita di Tanzania",
      "common": "Tanzania"
    },
    "jpn": {
      "official": "タンザニア連合共和国",
      "common": "タンザニア"
    },
    "nld": {
      "official": "Verenigde Republiek Tanzania",
      "common": "Tanzania"
    },
    "por": {
      "official": "República Unida da Tanzânia",
      "common": "Tanzânia"
    },
    "rus": {
      "official": "Объединенная Республика Танзания",
      "common": "Танзания"
    },
    "spa": {
      "official": "República Unida de Tanzania",
      "common": "Tanzania"
    },
    "fin": {
      "official": "Tansanian yhdistynyt tasavalta",
      "common": "Tansania"
    }
  },
  "latlng": [
    -6,
    35
  ],
  "demonym": "Tanzanian",
  "landlocked": false,
  "borders": [
    "BDI",
    "COD",
    "KEN",
    "MWI",
    "MOZ",
    "RWA",
    "UGA",
    "ZMB"
  ],
  "area": 945087,
  "codes": {
    "cca2": "TZ",
    "ccn3": "834",
    "cca3": "TZA",
    "cioc": "TAN"
  },
  "provinces": [
    "Arusha",
    "Dar es Salaam",
    "Dodoma",
    "Iringa",
    "Kagera",
    "Kigoma",
    "Kilimanjaro",
    "Lindi",
    "Mara",
    "Mbeya",
    "Morogoro",
    "Mtwara",
    "Mwanza",
    "Pemba North",
    "Pemba South",
    "Pwani",
    "Rukwa",
    "Ruvuma",
    "Shinyanga",
    "Singida",
    "Tabora",
    "Tanga",
    "Zanzibar Central/South",
    "Zanzibar North",
    "Zanzibar Urban/West"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TZA",
        "properties": {
          "name": "United Republic of Tanzania"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                33.903711,
                -0.95
              ],
              [
                34.07262,
                -1.05982
              ],
              [
                37.69869,
                -3.09699
              ],
              [
                37.7669,
                -3.67712
              ],
              [
                39.20222,
                -4.67677
              ],
              [
                38.74054,
                -5.90895
              ],
              [
                38.79977,
                -6.47566
              ],
              [
                39.44,
                -6.84
              ],
              [
                39.47,
                -7.1
              ],
              [
                39.19469,
                -7.7039
              ],
              [
                39.25203,
                -8.00781
              ],
              [
                39.18652,
                -8.48551
              ],
              [
                39.53574,
                -9.11237
              ],
              [
                39.9496,
                -10.0984
              ],
              [
                40.31659,
                -10.3171
              ],
              [
                39.521,
                -10.89688
              ],
              [
                38.427557,
                -11.285202
              ],
              [
                37.82764,
                -11.26879
              ],
              [
                37.47129,
                -11.56876
              ],
              [
                36.775151,
                -11.594537
              ],
              [
                36.514082,
                -11.720938
              ],
              [
                35.312398,
                -11.439146
              ],
              [
                34.559989,
                -11.52002
              ],
              [
                34.28,
                -10.16
              ],
              [
                33.940838,
                -9.693674
              ],
              [
                33.73972,
                -9.41715
              ],
              [
                32.759375,
                -9.230599
              ],
              [
                32.191865,
                -8.930359
              ],
              [
                31.556348,
                -8.762049
              ],
              [
                31.157751,
                -8.594579
              ],
              [
                30.74,
                -8.34
              ],
              [
                30.2,
                -7.08
              ],
              [
                29.62,
                -6.52
              ],
              [
                29.419993,
                -5.939999
              ],
              [
                29.519987,
                -5.419979
              ],
              [
                29.339998,
                -4.499983
              ],
              [
                29.753512,
                -4.452389
              ],
              [
                30.11632,
                -4.09012
              ],
              [
                30.50554,
                -3.56858
              ],
              [
                30.75224,
                -3.35931
              ],
              [
                30.74301,
                -3.03431
              ],
              [
                30.52766,
                -2.80762
              ],
              [
                30.46967,
                -2.41383
              ],
              [
                30.758309,
                -2.28725
              ],
              [
                30.816135,
                -1.698914
              ],
              [
                30.419105,
                -1.134659
              ],
              [
                30.76986,
                -1.01455
              ],
              [
                31.86617,
                -1.02736
              ],
              [
                33.903711,
                -0.95
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],220:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Thailand",
    "official": "Kingdom of Thailand",
    "native": {
      "tha": {
        "official": "ราชอาณาจักรไทย",
        "common": "ประเทศไทย"
      }
    }
  },
  "tld": [
    ".th",
    ".ไทย"
  ],
  "currency": [
    "THB"
  ],
  "callingCode": [
    "66"
  ],
  "capital": "Bangkok",
  "altSpellings": [
    "TH",
    "Prathet",
    "Thai",
    "Kingdom of Thailand",
    "ราชอาณาจักรไทย",
    "Ratcha Anachak Thai"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "tha": "Thai"
  },
  "translations": {
    "deu": {
      "official": "Königreich Thailand",
      "common": "Thailand"
    },
    "fra": {
      "official": "Royaume de Thaïlande",
      "common": "Thaïlande"
    },
    "hrv": {
      "official": "Kraljevina Tajland",
      "common": "Tajland"
    },
    "ita": {
      "official": "Regno di Thailandia",
      "common": "Tailandia"
    },
    "jpn": {
      "official": "タイ王国",
      "common": "タイ"
    },
    "nld": {
      "official": "Koninkrijk Thailand",
      "common": "Thailand"
    },
    "por": {
      "official": "Reino da Tailândia",
      "common": "Tailândia"
    },
    "rus": {
      "official": "Королевство Таиланд",
      "common": "Таиланд"
    },
    "spa": {
      "official": "Reino de Tailandia",
      "common": "Tailandia"
    },
    "fin": {
      "official": "Thaimaan kuningaskunta",
      "common": "Thaimaa"
    }
  },
  "latlng": [
    15,
    100
  ],
  "demonym": "Thai",
  "landlocked": false,
  "borders": [
    "MMR",
    "KHM",
    "LAO",
    "MYS"
  ],
  "area": 513120,
  "codes": {
    "cca2": "TH",
    "ccn3": "764",
    "cca3": "THA",
    "cioc": "THA"
  },
  "provinces": [
    "Amnat Charoen",
    "Ang Thong",
    "Buriram",
    "Chachoengsao",
    "Chai Nat",
    "Chaiyaphum",
    "Chanthaburi",
    "Chiang Mai",
    "Chiang Rai",
    "Chon Buri",
    "Chumphon",
    "Kalasin",
    "Kamphaeng Phet",
    "Kanchanaburi",
    "Khon Kaen",
    "Krabi",
    "Krung Thep Mahanakhon (Bangkok)",
    "Lampang",
    "Lamphun",
    "Loei",
    "Lop Buri",
    "Mae Hong Son",
    "Maha Sarakham",
    "Mukdahan",
    "Nakhon Nayok",
    "Nakhon Pathom",
    "Nakhon Phanom",
    "Nakhon Ratchasima",
    "Nakhon Sawan",
    "Nakhon Si Thammarat",
    "Nan",
    "Narathiwat",
    "Nong Bua Lamphu",
    "Nong Khai",
    "Nonthaburi",
    "Pathum Thani",
    "Pattani",
    "Phangnga",
    "Phatthalung",
    "Phayao",
    "Phetchabun",
    "Phetchaburi",
    "Phichit",
    "Phitsanulok",
    "Phra Nakhon Si Ayutthaya",
    "Phrae",
    "Phuket",
    "Prachin Buri",
    "Prachuap Khiri Khan",
    "Ranong",
    "Ratchaburi",
    "Rayong",
    "Roi Et",
    "Sa Kaeo",
    "Sakon Nakhon",
    "Samut Prakan",
    "Samut Sakhon",
    "Samut Songkhram",
    "Sara Buri",
    "Satun",
    "Sing Buri",
    "Sisaket",
    "Songkhla",
    "Sukhothai",
    "Suphan Buri",
    "Surat Thani",
    "Surin",
    "Tak",
    "Trang",
    "Trat",
    "Ubon Ratchathani",
    "Udon Thani",
    "Uthai Thani",
    "Uttaradit",
    "Yala",
    "Yasothon"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "THA",
        "properties": {
          "name": "Thailand"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                102.584932,
                12.186595
              ],
              [
                101.687158,
                12.64574
              ],
              [
                100.83181,
                12.627085
              ],
              [
                100.978467,
                13.412722
              ],
              [
                100.097797,
                13.406856
              ],
              [
                100.018733,
                12.307001
              ],
              [
                99.478921,
                10.846367
              ],
              [
                99.153772,
                9.963061
              ],
              [
                99.222399,
                9.239255
              ],
              [
                99.873832,
                9.207862
              ],
              [
                100.279647,
                8.295153
              ],
              [
                100.459274,
                7.429573
              ],
              [
                101.017328,
                6.856869
              ],
              [
                101.623079,
                6.740622
              ],
              [
                102.141187,
                6.221636
              ],
              [
                101.814282,
                5.810808
              ],
              [
                101.154219,
                5.691384
              ],
              [
                101.075516,
                6.204867
              ],
              [
                100.259596,
                6.642825
              ],
              [
                100.085757,
                6.464489
              ],
              [
                99.690691,
                6.848213
              ],
              [
                99.519642,
                7.343454
              ],
              [
                98.988253,
                7.907993
              ],
              [
                98.503786,
                8.382305
              ],
              [
                98.339662,
                7.794512
              ],
              [
                98.150009,
                8.350007
              ],
              [
                98.25915,
                8.973923
              ],
              [
                98.553551,
                9.93296
              ],
              [
                99.038121,
                10.960546
              ],
              [
                99.587286,
                11.892763
              ],
              [
                99.196354,
                12.804748
              ],
              [
                99.212012,
                13.269294
              ],
              [
                99.097755,
                13.827503
              ],
              [
                98.430819,
                14.622028
              ],
              [
                98.192074,
                15.123703
              ],
              [
                98.537376,
                15.308497
              ],
              [
                98.903348,
                16.177824
              ],
              [
                98.493761,
                16.837836
              ],
              [
                97.859123,
                17.567946
              ],
              [
                97.375896,
                18.445438
              ],
              [
                97.797783,
                18.62708
              ],
              [
                98.253724,
                19.708203
              ],
              [
                98.959676,
                19.752981
              ],
              [
                99.543309,
                20.186598
              ],
              [
                100.115988,
                20.41785
              ],
              [
                100.548881,
                20.109238
              ],
              [
                100.606294,
                19.508344
              ],
              [
                101.282015,
                19.462585
              ],
              [
                101.035931,
                18.408928
              ],
              [
                101.059548,
                17.512497
              ],
              [
                102.113592,
                18.109102
              ],
              [
                102.413005,
                17.932782
              ],
              [
                102.998706,
                17.961695
              ],
              [
                103.200192,
                18.309632
              ],
              [
                103.956477,
                18.240954
              ],
              [
                104.716947,
                17.428859
              ],
              [
                104.779321,
                16.441865
              ],
              [
                105.589039,
                15.570316
              ],
              [
                105.544338,
                14.723934
              ],
              [
                105.218777,
                14.273212
              ],
              [
                104.281418,
                14.416743
              ],
              [
                102.988422,
                14.225721
              ],
              [
                102.348099,
                13.394247
              ],
              [
                102.584932,
                12.186595
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],221:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Timor-Leste",
    "official": "Democratic Republic of Timor-Leste",
    "native": {
      "por": {
        "official": "República Democrática de Timor-Leste",
        "common": "Timor-Leste"
      },
      "tet": {
        "official": "Repúblika Demokrátika Timór-Leste",
        "common": "Timór-Leste"
      }
    }
  },
  "tld": [
    ".tl"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "670"
  ],
  "capital": "Dili",
  "altSpellings": [
    "TL",
    "East Timor",
    "Democratic Republic of Timor-Leste",
    "República Democrática de Timor-Leste",
    "Repúblika Demokrátika Timór-Leste",
    "Timór Lorosa'e",
    "Timor Lorosae"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "por": "Portuguese",
    "tet": "Tetum"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Republik Timor-Leste",
      "common": "Timor-Leste"
    },
    "fra": {
      "official": "République démocratique du Timor oriental",
      "common": "Timor oriental"
    },
    "hrv": {
      "official": "Demokratska Republika Timor-Leste",
      "common": "Istočni Timor"
    },
    "ita": {
      "official": "Repubblica Democratica di Timor Est",
      "common": "Timor Est"
    },
    "jpn": {
      "official": "東ティモール民主共和国",
      "common": "東ティモール"
    },
    "nld": {
      "official": "Democratische Republiek Oost-Timor",
      "common": "Oost-Timor"
    },
    "por": {
      "official": "República Democrática de Timor-Leste",
      "common": "Timor-Leste"
    },
    "rus": {
      "official": "Демократическая Республика Тимор -Лешти",
      "common": "Восточный Тимор"
    },
    "spa": {
      "official": "República Democrática de Timor-Leste",
      "common": "Timor Oriental"
    },
    "fin": {
      "official": "Itä-Timorin demokraattinen tasavalta",
      "common": "Itä-Timor"
    }
  },
  "latlng": [
    -8.83333333,
    125.91666666
  ],
  "demonym": "East Timorese",
  "landlocked": false,
  "borders": [
    "IDN"
  ],
  "area": 14874,
  "codes": {
    "cca2": "TL",
    "ccn3": "626",
    "cca3": "TLS",
    "cioc": "TLS"
  }
}
},{}],222:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Togo",
    "official": "Togolese Republic",
    "native": {
      "fra": {
        "official": "République togolaise",
        "common": "Togo"
      }
    }
  },
  "tld": [
    ".tg"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "228"
  ],
  "capital": "Lomé",
  "altSpellings": [
    "TG",
    "Togolese",
    "Togolese Republic",
    "République Togolaise"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Togo",
      "common": "Togo"
    },
    "fra": {
      "official": "République togolaise",
      "common": "Togo"
    },
    "hrv": {
      "official": "Togolese Republika",
      "common": "Togo"
    },
    "ita": {
      "official": "Repubblica del Togo",
      "common": "Togo"
    },
    "jpn": {
      "official": "トーゴ共和国",
      "common": "トーゴ"
    },
    "nld": {
      "official": "Republiek Togo",
      "common": "Togo"
    },
    "por": {
      "official": "República do Togo",
      "common": "Togo"
    },
    "rus": {
      "official": "Того Республика",
      "common": "Того"
    },
    "spa": {
      "official": "República de Togo",
      "common": "Togo"
    },
    "fin": {
      "official": "Togon tasavalta",
      "common": "Togo"
    }
  },
  "latlng": [
    8,
    1.16666666
  ],
  "demonym": "Togolese",
  "landlocked": false,
  "borders": [
    "BEN",
    "BFA",
    "GHA"
  ],
  "area": 56785,
  "codes": {
    "cca2": "TG",
    "ccn3": "768",
    "cca3": "TGO",
    "cioc": "TOG"
  }
}
},{}],223:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tokelau",
    "official": "Tokelau",
    "native": {
      "eng": {
        "official": "Tokelau",
        "common": "Tokelau"
      },
      "smo": {
        "official": "Tokelau",
        "common": "Tokelau"
      },
      "tkl": {
        "official": "Tokelau",
        "common": "Tokelau"
      }
    }
  },
  "tld": [
    ".tk"
  ],
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "690"
  ],
  "capital": "Fakaofo",
  "altSpellings": [
    "TK"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "smo": "Samoan",
    "tkl": "Tokelauan"
  },
  "translations": {
    "deu": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "fra": {
      "official": "Îles Tokelau",
      "common": "Tokelau"
    },
    "hrv": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "ita": {
      "official": "Tokelau",
      "common": "Isole Tokelau"
    },
    "jpn": {
      "official": "トケラウ諸島",
      "common": "トケラウ"
    },
    "nld": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "por": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "rus": {
      "official": "Токелау",
      "common": "Токелау"
    },
    "spa": {
      "official": "Tokelau",
      "common": "Islas Tokelau"
    },
    "fin": {
      "official": "Tokelau",
      "common": "Tokelau"
    }
  },
  "latlng": [
    -9,
    -172
  ],
  "demonym": "Tokelauan",
  "landlocked": false,
  "borders": [],
  "area": 12,
  "codes": {
    "cca2": "TK",
    "ccn3": "772",
    "cca3": "TKL",
    "cioc": ""
  },
  "provinces": [
    "Atafu",
    "Fakaofo",
    "Nukunonu"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],224:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tonga",
    "official": "Kingdom of Tonga",
    "native": {
      "eng": {
        "official": "Kingdom of Tonga",
        "common": "Tonga"
      },
      "ton": {
        "official": "Kingdom of Tonga",
        "common": "Tonga"
      }
    }
  },
  "tld": [
    ".to"
  ],
  "currency": [
    "TOP"
  ],
  "callingCode": [
    "676"
  ],
  "capital": "Nuku'alofa",
  "altSpellings": [
    "TO"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "ton": "Tongan"
  },
  "translations": {
    "deu": {
      "official": "Königreich Tonga",
      "common": "Tonga"
    },
    "fra": {
      "official": "Royaume des Tonga",
      "common": "Tonga"
    },
    "hrv": {
      "official": "Kraljevina Tonga",
      "common": "Tonga"
    },
    "ita": {
      "official": "Regno di Tonga",
      "common": "Tonga"
    },
    "jpn": {
      "official": "トンガ王国",
      "common": "トンガ"
    },
    "nld": {
      "official": "Koninkrijk Tonga",
      "common": "Tonga"
    },
    "por": {
      "official": "Reino de Tonga",
      "common": "Tonga"
    },
    "rus": {
      "official": "Королевство Тонга",
      "common": "Тонга"
    },
    "spa": {
      "official": "Reino de Tonga",
      "common": "Tonga"
    },
    "fin": {
      "official": "Tongan kuningaskunta",
      "common": "Tonga"
    }
  },
  "latlng": [
    -20,
    -175
  ],
  "demonym": "Tongan",
  "landlocked": false,
  "borders": [],
  "area": 747,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of Tonga.svg",
  "codes": {
    "cca2": "TO",
    "ccn3": "776",
    "cca3": "TON",
    "cioc": "TGA"
  },
  "provinces": [
    "Ha'apai",
    "Tongatapu",
    "Vava'u"
  ],
  "geoJSON": {}
}
},{}],225:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Trinidad and Tobago",
    "official": "Republic of Trinidad and Tobago",
    "native": {
      "eng": {
        "official": "Republic of Trinidad and Tobago",
        "common": "Trinidad and Tobago"
      }
    }
  },
  "tld": [
    ".tt"
  ],
  "currency": [
    "TTD"
  ],
  "callingCode": [
    "1868"
  ],
  "capital": "Port of Spain",
  "altSpellings": [
    "TT",
    "Republic of Trinidad and Tobago"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Trinidad und Tobago",
      "common": "Trinidad und Tobago"
    },
    "fra": {
      "official": "République de Trinité-et-Tobago",
      "common": "Trinité-et-Tobago"
    },
    "hrv": {
      "official": "Republika Trinidad i Tobago",
      "common": "Trinidad i Tobago"
    },
    "ita": {
      "official": "Repubblica di Trinidad e Tobago",
      "common": "Trinidad e Tobago"
    },
    "jpn": {
      "official": "トリニダード·トバゴ共和国",
      "common": "トリニダード・トバゴ"
    },
    "nld": {
      "official": "Republiek Trinidad en Tobago",
      "common": "Trinidad en Tobago"
    },
    "por": {
      "official": "República de Trinidad e Tobago",
      "common": "Trinidade e Tobago"
    },
    "rus": {
      "official": "Республика Тринидад и Тобаго",
      "common": "Тринидад и Тобаго"
    },
    "spa": {
      "official": "República de Trinidad y Tobago",
      "common": "Trinidad y Tobago"
    },
    "fin": {
      "official": "Trinidadin ja Tobagon tasavalta",
      "common": "Trinidad ja Tobago"
    }
  },
  "latlng": [
    11,
    -61
  ],
  "demonym": "Trinidadian",
  "landlocked": false,
  "borders": [],
  "area": 5130,
  "codes": {
    "cca2": "TT",
    "ccn3": "780",
    "cca3": "TTO",
    "cioc": "TTO"
  }
}
},{}],226:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tunisia",
    "official": "Tunisian Republic",
    "native": {
      "ara": {
        "official": "الجمهورية التونسية",
        "common": "تونس"
      }
    }
  },
  "tld": [
    ".tn"
  ],
  "currency": [
    "TND"
  ],
  "callingCode": [
    "216"
  ],
  "capital": "Tunis",
  "altSpellings": [
    "TN",
    "Republic of Tunisia",
    "al-Jumhūriyyah at-Tūnisiyyah"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Tunesische Republik",
      "common": "Tunesien"
    },
    "fra": {
      "official": "République tunisienne",
      "common": "Tunisie"
    },
    "hrv": {
      "official": "Tuniski Republika",
      "common": "Tunis"
    },
    "ita": {
      "official": "Repubblica tunisina",
      "common": "Tunisia"
    },
    "jpn": {
      "official": "チュニジア共和国",
      "common": "チュニジア"
    },
    "nld": {
      "official": "Republiek Tunesië",
      "common": "Tunesië"
    },
    "por": {
      "official": "República da Tunísia",
      "common": "Tunísia"
    },
    "rus": {
      "official": "Тунисской Республики",
      "common": "Тунис"
    },
    "spa": {
      "official": "República de Túnez",
      "common": "Túnez"
    },
    "fin": {
      "official": "Tunisian tasavalta",
      "common": "Tunisia"
    }
  },
  "latlng": [
    34,
    9
  ],
  "demonym": "Tunisian",
  "landlocked": false,
  "borders": [
    "DZA",
    "LBY"
  ],
  "area": 163610,
  "codes": {
    "cca2": "TN",
    "ccn3": "788",
    "cca3": "TUN",
    "cioc": "TUN"
  },
  "provinces": [
    "Ariana",
    "Beja",
    "Ben Arous",
    "Bizerte",
    "El Kef",
    "Gabes",
    "Gafsa",
    "Jendouba",
    "Kairouan",
    "Kasserine",
    "Kebili",
    "Mahdia",
    "Medenine",
    "Monastir",
    "Nabeul",
    "Sfax",
    "Sidi Bou Zid",
    "Siliana",
    "Sousse",
    "Tataouine",
    "Tozeur",
    "Tunis",
    "Zaghouan"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TUN",
        "properties": {
          "name": "Tunisia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                9.48214,
                30.307556
              ],
              [
                9.055603,
                32.102692
              ],
              [
                8.439103,
                32.506285
              ],
              [
                8.430473,
                32.748337
              ],
              [
                7.612642,
                33.344115
              ],
              [
                7.524482,
                34.097376
              ],
              [
                8.140981,
                34.655146
              ],
              [
                8.376368,
                35.479876
              ],
              [
                8.217824,
                36.433177
              ],
              [
                8.420964,
                36.946427
              ],
              [
                9.509994,
                37.349994
              ],
              [
                10.210002,
                37.230002
              ],
              [
                10.18065,
                36.724038
              ],
              [
                11.028867,
                37.092103
              ],
              [
                11.100026,
                36.899996
              ],
              [
                10.600005,
                36.41
              ],
              [
                10.593287,
                35.947444
              ],
              [
                10.939519,
                35.698984
              ],
              [
                10.807847,
                34.833507
              ],
              [
                10.149593,
                34.330773
              ],
              [
                10.339659,
                33.785742
              ],
              [
                10.856836,
                33.76874
              ],
              [
                11.108501,
                33.293343
              ],
              [
                11.488787,
                33.136996
              ],
              [
                11.432253,
                32.368903
              ],
              [
                10.94479,
                32.081815
              ],
              [
                10.636901,
                31.761421
              ],
              [
                9.950225,
                31.37607
              ],
              [
                10.056575,
                30.961831
              ],
              [
                9.970017,
                30.539325
              ],
              [
                9.48214,
                30.307556
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],227:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Turkey",
    "official": "Republic of Turkey",
    "native": {
      "tur": {
        "official": "Türkiye Cumhuriyeti",
        "common": "Türkiye"
      }
    }
  },
  "tld": [
    ".tr"
  ],
  "currency": [
    "TRY"
  ],
  "callingCode": [
    "90"
  ],
  "capital": "Ankara",
  "altSpellings": [
    "TR",
    "Turkiye",
    "Republic of Turkey",
    "Türkiye Cumhuriyeti"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "tur": "Turkish"
  },
  "translations": {
    "deu": {
      "official": "Republik Türkei",
      "common": "Türkei"
    },
    "fra": {
      "official": "République de Turquie",
      "common": "Turquie"
    },
    "hrv": {
      "official": "Republika Turska",
      "common": "Turska"
    },
    "ita": {
      "official": "Repubblica di Turchia",
      "common": "Turchia"
    },
    "jpn": {
      "official": "トルコ共和国",
      "common": "トルコ"
    },
    "nld": {
      "official": "Republiek Turkije",
      "common": "Turkije"
    },
    "por": {
      "official": "República da Turquia",
      "common": "Turquia"
    },
    "rus": {
      "official": "Республика Турции",
      "common": "Турция"
    },
    "spa": {
      "official": "República de Turquía",
      "common": "Turquía"
    },
    "fin": {
      "official": "Turkin tasavalta",
      "common": "Turkki"
    }
  },
  "latlng": [
    39,
    35
  ],
  "demonym": "Turkish",
  "landlocked": false,
  "borders": [
    "ARM",
    "AZE",
    "BGR",
    "GEO",
    "GRC",
    "IRN",
    "IRQ",
    "SYR"
  ],
  "area": 783562,
  "codes": {
    "cca2": "TR",
    "ccn3": "792",
    "cca3": "TUR",
    "cioc": "TUR"
  },
  "provinces": [
    "Adana",
    "Adiyaman",
    "Afyon",
    "Agri",
    "Aksaray",
    "Amasya",
    "Ankara",
    "Antalya",
    "Ardahan",
    "Artvin",
    "Aydin",
    "Balikesir",
    "Bartin",
    "Batman",
    "Bayburt",
    "Bilecik",
    "Bingol",
    "Bitlis",
    "Bolu",
    "Burdur",
    "Bursa",
    "Canakkale",
    "Cankiri",
    "Corum",
    "Denizli",
    "Diyarbakir",
    "Duzce",
    "Edirne",
    "Elazig",
    "Erzincan",
    "Erzurum",
    "Eskisehir",
    "Gaziantep",
    "Giresun",
    "Gumushane",
    "Hakkari",
    "Hatay",
    "Icel",
    "Igdir",
    "Isparta",
    "Istanbul",
    "Izmir",
    "Kahramanmaras",
    "Karabuk",
    "Karaman",
    "Kars",
    "Kastamonu",
    "Kayseri",
    "Kilis",
    "Kirikkale",
    "Kirklareli",
    "Kirsehir",
    "Kocaeli",
    "Konya",
    "Kutahya",
    "Malatya",
    "Manisa",
    "Mardin",
    "Mugla",
    "Mus",
    "Nevsehir",
    "Nigde",
    "Ordu",
    "Osmaniye",
    "Rize",
    "Sakarya",
    "Samsun",
    "Sanliurfa",
    "Siirt",
    "Sinop",
    "Sirnak",
    "Sivas",
    "Tekirdag",
    "Tokat",
    "Trabzon",
    "Tunceli",
    "Usak",
    "Van",
    "Yalova",
    "Yozgat",
    "Zonguldak"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TUR",
        "properties": {
          "name": "Turkey"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  36.913127,
                  41.335358
                ],
                [
                  38.347665,
                  40.948586
                ],
                [
                  39.512607,
                  41.102763
                ],
                [
                  40.373433,
                  41.013673
                ],
                [
                  41.554084,
                  41.535656
                ],
                [
                  42.619549,
                  41.583173
                ],
                [
                  43.582746,
                  41.092143
                ],
                [
                  43.752658,
                  40.740201
                ],
                [
                  43.656436,
                  40.253564
                ],
                [
                  44.400009,
                  40.005
                ],
                [
                  44.79399,
                  39.713003
                ],
                [
                  44.109225,
                  39.428136
                ],
                [
                  44.421403,
                  38.281281
                ],
                [
                  44.225756,
                  37.971584
                ],
                [
                  44.772699,
                  37.170445
                ],
                [
                  44.293452,
                  37.001514
                ],
                [
                  43.942259,
                  37.256228
                ],
                [
                  42.779126,
                  37.385264
                ],
                [
                  42.349591,
                  37.229873
                ],
                [
                  41.212089,
                  37.074352
                ],
                [
                  40.673259,
                  37.091276
                ],
                [
                  39.52258,
                  36.716054
                ],
                [
                  38.699891,
                  36.712927
                ],
                [
                  38.167727,
                  36.90121
                ],
                [
                  37.066761,
                  36.623036
                ],
                [
                  36.739494,
                  36.81752
                ],
                [
                  36.685389,
                  36.259699
                ],
                [
                  36.41755,
                  36.040617
                ],
                [
                  36.149763,
                  35.821535
                ],
                [
                  35.782085,
                  36.274995
                ],
                [
                  36.160822,
                  36.650606
                ],
                [
                  35.550936,
                  36.565443
                ],
                [
                  34.714553,
                  36.795532
                ],
                [
                  34.026895,
                  36.21996
                ],
                [
                  32.509158,
                  36.107564
                ],
                [
                  31.699595,
                  36.644275
                ],
                [
                  30.621625,
                  36.677865
                ],
                [
                  30.391096,
                  36.262981
                ],
                [
                  29.699976,
                  36.144357
                ],
                [
                  28.732903,
                  36.676831
                ],
                [
                  27.641187,
                  36.658822
                ],
                [
                  27.048768,
                  37.653361
                ],
                [
                  26.318218,
                  38.208133
                ],
                [
                  26.8047,
                  38.98576
                ],
                [
                  26.170785,
                  39.463612
                ],
                [
                  27.28002,
                  40.420014
                ],
                [
                  28.819978,
                  40.460011
                ],
                [
                  29.240004,
                  41.219991
                ],
                [
                  31.145934,
                  41.087622
                ],
                [
                  32.347979,
                  41.736264
                ],
                [
                  33.513283,
                  42.01896
                ],
                [
                  35.167704,
                  42.040225
                ],
                [
                  36.913127,
                  41.335358
                ]
              ]
            ],
            [
              [
                [
                  27.192377,
                  40.690566
                ],
                [
                  26.358009,
                  40.151994
                ],
                [
                  26.043351,
                  40.617754
                ],
                [
                  26.056942,
                  40.824123
                ],
                [
                  26.294602,
                  40.936261
                ],
                [
                  26.604196,
                  41.562115
                ],
                [
                  26.117042,
                  41.826905
                ],
                [
                  27.135739,
                  42.141485
                ],
                [
                  27.99672,
                  42.007359
                ],
                [
                  28.115525,
                  41.622886
                ],
                [
                  28.988443,
                  41.299934
                ],
                [
                  28.806438,
                  41.054962
                ],
                [
                  27.619017,
                  40.999823
                ],
                [
                  27.192377,
                  40.690566
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],228:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Turkmenistan",
    "official": "Turkmenistan",
    "native": {
      "rus": {
        "official": "Туркменистан",
        "common": "Туркмения"
      },
      "tuk": {
        "official": "Türkmenistan",
        "common": "Türkmenistan"
      }
    }
  },
  "tld": [
    ".tm"
  ],
  "currency": [
    "TMT"
  ],
  "callingCode": [
    "993"
  ],
  "capital": "Ashgabat",
  "altSpellings": [
    "TM"
  ],
  "region": "Asia",
  "subregion": "Central Asia",
  "languages": {
    "rus": "Russian",
    "tuk": "Turkmen"
  },
  "translations": {
    "deu": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "fra": {
      "official": "Turkménistan",
      "common": "Turkménistan"
    },
    "hrv": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "ita": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "jpn": {
      "official": "トルクメニスタン",
      "common": "トルクメニスタン"
    },
    "nld": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "por": {
      "official": "Turcomenistão",
      "common": "Turquemenistão"
    },
    "rus": {
      "official": "Туркменистан",
      "common": "Туркмения"
    },
    "spa": {
      "official": "Turkmenistán",
      "common": "Turkmenistán"
    },
    "fin": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    }
  },
  "latlng": [
    40,
    60
  ],
  "demonym": "Turkmen",
  "landlocked": true,
  "borders": [
    "AFG",
    "IRN",
    "KAZ",
    "UZB"
  ],
  "area": 488100,
  "codes": {
    "cca2": "TM",
    "ccn3": "795",
    "cca3": "TKM",
    "cioc": "TKM"
  },
  "provinces": [
    "Ahal Welayaty",
    "Balkan Welayaty",
    "Dashhowuz Welayaty",
    "Lebap Welayaty",
    "Mary Welayaty"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "TKM",
        "properties": {
          "name": "Turkmenistan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                61.210817,
                35.650072
              ],
              [
                61.123071,
                36.491597
              ],
              [
                60.377638,
                36.527383
              ],
              [
                59.234762,
                37.412988
              ],
              [
                58.436154,
                37.522309
              ],
              [
                57.330434,
                38.029229
              ],
              [
                56.619366,
                38.121394
              ],
              [
                56.180375,
                37.935127
              ],
              [
                55.511578,
                37.964117
              ],
              [
                54.800304,
                37.392421
              ],
              [
                53.921598,
                37.198918
              ],
              [
                53.735511,
                37.906136
              ],
              [
                53.880929,
                38.952093
              ],
              [
                53.101028,
                39.290574
              ],
              [
                53.357808,
                39.975286
              ],
              [
                52.693973,
                40.033629
              ],
              [
                52.915251,
                40.876523
              ],
              [
                53.858139,
                40.631034
              ],
              [
                54.736845,
                40.951015
              ],
              [
                54.008311,
                41.551211
              ],
              [
                53.721713,
                42.123191
              ],
              [
                52.91675,
                41.868117
              ],
              [
                52.814689,
                41.135371
              ],
              [
                52.50246,
                41.783316
              ],
              [
                52.944293,
                42.116034
              ],
              [
                54.079418,
                42.324109
              ],
              [
                54.755345,
                42.043971
              ],
              [
                55.455251,
                41.259859
              ],
              [
                55.968191,
                41.308642
              ],
              [
                57.096391,
                41.32231
              ],
              [
                56.932215,
                41.826026
              ],
              [
                57.78653,
                42.170553
              ],
              [
                58.629011,
                42.751551
              ],
              [
                59.976422,
                42.223082
              ],
              [
                60.083341,
                41.425146
              ],
              [
                60.465953,
                41.220327
              ],
              [
                61.547179,
                41.26637
              ],
              [
                61.882714,
                41.084857
              ],
              [
                62.37426,
                40.053886
              ],
              [
                63.518015,
                39.363257
              ],
              [
                64.170223,
                38.892407
              ],
              [
                65.215999,
                38.402695
              ],
              [
                66.54615,
                37.974685
              ],
              [
                66.518607,
                37.362784
              ],
              [
                66.217385,
                37.39379
              ],
              [
                65.745631,
                37.661164
              ],
              [
                65.588948,
                37.305217
              ],
              [
                64.746105,
                37.111818
              ],
              [
                64.546479,
                36.312073
              ],
              [
                63.982896,
                36.007957
              ],
              [
                63.193538,
                35.857166
              ],
              [
                62.984662,
                35.404041
              ],
              [
                62.230651,
                35.270664
              ],
              [
                61.210817,
                35.650072
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],229:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Turks and Caicos Islands",
    "official": "Turks and Caicos Islands",
    "native": {
      "eng": {
        "official": "Turks and Caicos Islands",
        "common": "Turks and Caicos Islands"
      }
    }
  },
  "tld": [
    ".tc"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1649"
  ],
  "capital": "Cockburn Town",
  "altSpellings": [
    "TC"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Turks und Caicos Inseln",
      "common": "Turks-und Caicosinseln"
    },
    "fra": {
      "official": "Îles Turques et Caïques",
      "common": "Îles Turques-et-Caïques"
    },
    "hrv": {
      "official": "Otoci Turks i Caicos",
      "common": "Otoci Turks i Caicos"
    },
    "ita": {
      "official": "Turks e Caicos",
      "common": "Isole Turks e Caicos"
    },
    "jpn": {
      "official": "タークス·カイコス諸島",
      "common": "タークス・カイコス諸島"
    },
    "nld": {
      "official": "Turks-en Caicoseilanden",
      "common": "Turks-en Caicoseilanden"
    },
    "por": {
      "official": "Ilhas Turks e Caicos",
      "common": "Ilhas Turks e Caicos"
    },
    "rus": {
      "official": "Теркс и Кайкос острова",
      "common": "Теркс и Кайкос"
    },
    "spa": {
      "official": "Islas Turcas y Caicos",
      "common": "Islas Turks y Caicos"
    },
    "fin": {
      "official": "Turks-ja Caicossaaret",
      "common": "Turks-ja Caicossaaret"
    }
  },
  "latlng": [
    21.75,
    -71.58333333
  ],
  "demonym": "Turks and Caicos Islander",
  "landlocked": false,
  "borders": [],
  "area": 948,
  "codes": {
    "cca2": "TC",
    "ccn3": "796",
    "cca3": "TCA",
    "cioc": ""
  }
}
},{}],230:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tuvalu",
    "official": "Tuvalu",
    "native": {
      "eng": {
        "official": "Tuvalu",
        "common": "Tuvalu"
      },
      "tvl": {
        "official": "Tuvalu",
        "common": "Tuvalu"
      }
    }
  },
  "tld": [
    ".tv"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "688"
  ],
  "capital": "Funafuti",
  "altSpellings": [
    "TV"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English",
    "tvl": "Tuvaluan"
  },
  "translations": {
    "deu": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "fra": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "hrv": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "ita": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "jpn": {
      "official": "ツバル",
      "common": "ツバル"
    },
    "nld": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "por": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "rus": {
      "official": "Тувалу",
      "common": "Тувалу"
    },
    "spa": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "fin": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    }
  },
  "latlng": [
    -8,
    178
  ],
  "demonym": "Tuvaluan",
  "landlocked": false,
  "borders": [],
  "area": 26,
  "codes": {
    "cca2": "TV",
    "ccn3": "798",
    "cca3": "TUV",
    "cioc": "TUV"
  },
  "provinces": [
    "Tuvalu"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],231:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Uganda",
    "official": "Republic of Uganda",
    "native": {
      "eng": {
        "official": "Republic of Uganda",
        "common": "Uganda"
      },
      "swa": {
        "official": "Republic of Uganda",
        "common": "Uganda"
      }
    }
  },
  "tld": [
    ".ug"
  ],
  "currency": [
    "UGX"
  ],
  "callingCode": [
    "256"
  ],
  "capital": "Kampala",
  "altSpellings": [
    "UG",
    "Republic of Uganda",
    "Jamhuri ya Uganda"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English",
    "swa": "Swahili"
  },
  "translations": {
    "deu": {
      "official": "Republik Uganda",
      "common": "Uganda"
    },
    "fra": {
      "official": "République de l'Ouganda",
      "common": "Ouganda"
    },
    "hrv": {
      "official": "Republika Uganda",
      "common": "Uganda"
    },
    "ita": {
      "official": "Repubblica di Uganda",
      "common": "Uganda"
    },
    "jpn": {
      "official": "ウガンダ共和国",
      "common": "ウガンダ"
    },
    "nld": {
      "official": "Republiek Uganda",
      "common": "Oeganda"
    },
    "por": {
      "official": "República do Uganda",
      "common": "Uganda"
    },
    "rus": {
      "official": "Республика Уганда",
      "common": "Уганда"
    },
    "spa": {
      "official": "República de Uganda",
      "common": "Uganda"
    },
    "fin": {
      "official": "Ugandan tasavalta",
      "common": "Uganda"
    }
  },
  "latlng": [
    1,
    32
  ],
  "demonym": "Ugandan",
  "landlocked": true,
  "borders": [
    "COD",
    "KEN",
    "RWA",
    "SSD",
    "TZA"
  ],
  "area": 241550,
  "codes": {
    "cca2": "UG",
    "ccn3": "800",
    "cca3": "UGA",
    "cioc": "UGA"
  },
  "provinces": [
    "Adjumani",
    "Apac",
    "Arua",
    "Bugiri",
    "Bundibugyo",
    "Bushenyi",
    "Busia",
    "Gulu",
    "Hoima",
    "Iganga",
    "Jinja",
    "Kabale",
    "Kabarole",
    "Kalangala",
    "Kampala",
    "Kamuli",
    "Kapchorwa",
    "Kasese",
    "Katakwi",
    "Kibale",
    "Kiboga",
    "Kisoro",
    "Kitgum",
    "Kotido",
    "Kumi",
    "Lira",
    "Luwero",
    "Masaka",
    "Masindi",
    "Mbale",
    "Mbarara",
    "Moroto",
    "Moyo",
    "Mpigi",
    "Mubende",
    "Mukono",
    "Nakasongola",
    "Nebbi",
    "Ntungamo",
    "Pallisa",
    "Rakai",
    "Rukungiri",
    "Sembabule",
    "Soroti",
    "Tororo"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "UGA",
        "properties": {
          "name": "Uganda"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                31.86617,
                -1.02736
              ],
              [
                30.76986,
                -1.01455
              ],
              [
                30.419105,
                -1.134659
              ],
              [
                29.821519,
                -1.443322
              ],
              [
                29.579466,
                -1.341313
              ],
              [
                29.587838,
                -0.587406
              ],
              [
                29.8195,
                -0.2053
              ],
              [
                29.875779,
                0.59738
              ],
              [
                30.086154,
                1.062313
              ],
              [
                30.468508,
                1.583805
              ],
              [
                30.85267,
                1.849396
              ],
              [
                31.174149,
                2.204465
              ],
              [
                30.77332,
                2.33989
              ],
              [
                30.83385,
                3.50917
              ],
              [
                31.24556,
                3.7819
              ],
              [
                31.88145,
                3.55827
              ],
              [
                32.68642,
                3.79232
              ],
              [
                33.39,
                3.79
              ],
              [
                34.005,
                4.249885
              ],
              [
                34.47913,
                3.5556
              ],
              [
                34.59607,
                3.05374
              ],
              [
                35.03599,
                1.90584
              ],
              [
                34.6721,
                1.17694
              ],
              [
                34.18,
                0.515
              ],
              [
                33.893569,
                0.109814
              ],
              [
                33.903711,
                -0.95
              ],
              [
                31.86617,
                -1.02736
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],232:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ukraine",
    "official": "Ukraine",
    "native": {
      "rus": {
        "official": "Украина",
        "common": "Украина"
      },
      "ukr": {
        "official": "Україна",
        "common": "Україна"
      }
    }
  },
  "tld": [
    ".ua",
    ".укр"
  ],
  "currency": [
    "UAH"
  ],
  "callingCode": [
    "380"
  ],
  "capital": "Kiev",
  "altSpellings": [
    "UA",
    "Ukrayina"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "rus": "Russian",
    "ukr": "Ukrainian"
  },
  "translations": {
    "deu": {
      "official": "Ukraine",
      "common": "Ukraine"
    },
    "fra": {
      "official": "Ukraine",
      "common": "Ukraine"
    },
    "hrv": {
      "official": "Ukrajina",
      "common": "Ukrajina"
    },
    "ita": {
      "official": "Ucraina",
      "common": "Ucraina"
    },
    "jpn": {
      "official": "ウクライナ",
      "common": "ウクライナ"
    },
    "nld": {
      "official": "Oekraïne",
      "common": "Oekraïne"
    },
    "por": {
      "official": "Ucrânia",
      "common": "Ucrânia"
    },
    "rus": {
      "official": "Украина",
      "common": "Украина"
    },
    "spa": {
      "official": "Ucrania",
      "common": "Ucrania"
    },
    "fin": {
      "official": "Ukraina",
      "common": "Ukraina"
    }
  },
  "latlng": [
    49,
    32
  ],
  "demonym": "Ukrainian",
  "landlocked": false,
  "borders": [
    "BLR",
    "HUN",
    "MDA",
    "POL",
    "ROU",
    "RUS",
    "SVK"
  ],
  "area": 603500,
  "codes": {
    "cca2": "UA",
    "ccn3": "804",
    "cca3": "UKR",
    "cioc": "UKR"
  },
  "provinces": [
    "Avtonomna Respublika Krym (Simferopol')",
    "Cherkas'ka (Cherkasy)",
    "Chernihivs'ka (Chernihiv)",
    "Chernivets'ka (Chernivtsi)",
    "Dnipropetrovs'ka (Dnipropetrovs'k)",
    "Donets'ka (Donets'k)",
    "Ivano-Frankivs'ka (Ivano-Frankivs'k)",
    "Kharkivs'ka (Kharkiv)",
    "Khersons'ka (Kherson)",
    "Khmel'nyts'ka (Khmel'nyts'kyy)",
    "Kirovohrads'ka (Kirovohrad)",
    "Kyyiv",
    "Kyyivs'ka (Kiev)",
    "L'vivs'ka (L'viv)",
    "Luhans'ka (Luhans'k)",
    "Mykolayivs'ka (Mykolayiv)",
    "Odes'ka (Odesa)",
    "Poltavs'ka (Poltava)",
    "Rivnens'ka (Rivne)",
    "Sevastopol'",
    "Sums'ka (Sumy)",
    "Ternopil's'ka (Ternopil')",
    "Vinnyts'ka (Vinnytsya)",
    "Volyns'ka (Luts'k)",
    "Zakarpats'ka (Uzhhorod)",
    "Zaporiz'ka (Zaporizhzhya)",
    "Zhytomyrs'ka (Zhytomyr)"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "UKR",
        "properties": {
          "name": "Ukraine"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                31.785998,
                52.101678
              ],
              [
                32.159412,
                52.061267
              ],
              [
                32.412058,
                52.288695
              ],
              [
                32.715761,
                52.238465
              ],
              [
                33.7527,
                52.335075
              ],
              [
                34.391731,
                51.768882
              ],
              [
                34.141978,
                51.566413
              ],
              [
                34.224816,
                51.255993
              ],
              [
                35.022183,
                51.207572
              ],
              [
                35.377924,
                50.773955
              ],
              [
                35.356116,
                50.577197
              ],
              [
                36.626168,
                50.225591
              ],
              [
                37.39346,
                50.383953
              ],
              [
                38.010631,
                49.915662
              ],
              [
                38.594988,
                49.926462
              ],
              [
                40.069058,
                49.601055
              ],
              [
                40.080789,
                49.30743
              ],
              [
                39.674664,
                48.783818
              ],
              [
                39.895632,
                48.232405
              ],
              [
                39.738278,
                47.898937
              ],
              [
                38.770585,
                47.825608
              ],
              [
                38.255112,
                47.5464
              ],
              [
                38.223538,
                47.10219
              ],
              [
                37.425137,
                47.022221
              ],
              [
                36.759855,
                46.6987
              ],
              [
                35.823685,
                46.645964
              ],
              [
                34.962342,
                46.273197
              ],
              [
                35.020788,
                45.651219
              ],
              [
                35.510009,
                45.409993
              ],
              [
                36.529998,
                45.46999
              ],
              [
                36.334713,
                45.113216
              ],
              [
                35.239999,
                44.939996
              ],
              [
                33.882511,
                44.361479
              ],
              [
                33.326421,
                44.564877
              ],
              [
                33.546924,
                45.034771
              ],
              [
                32.454174,
                45.327466
              ],
              [
                32.630804,
                45.519186
              ],
              [
                33.588162,
                45.851569
              ],
              [
                33.298567,
                46.080598
              ],
              [
                31.74414,
                46.333348
              ],
              [
                31.675307,
                46.706245
              ],
              [
                30.748749,
                46.5831
              ],
              [
                30.377609,
                46.03241
              ],
              [
                29.603289,
                45.293308
              ],
              [
                29.149725,
                45.464925
              ],
              [
                28.679779,
                45.304031
              ],
              [
                28.233554,
                45.488283
              ],
              [
                28.485269,
                45.596907
              ],
              [
                28.659987,
                45.939987
              ],
              [
                28.933717,
                46.25883
              ],
              [
                28.862972,
                46.437889
              ],
              [
                29.072107,
                46.517678
              ],
              [
                29.170654,
                46.379262
              ],
              [
                29.759972,
                46.349988
              ],
              [
                30.024659,
                46.423937
              ],
              [
                29.83821,
                46.525326
              ],
              [
                29.908852,
                46.674361
              ],
              [
                29.559674,
                46.928583
              ],
              [
                29.415135,
                47.346645
              ],
              [
                29.050868,
                47.510227
              ],
              [
                29.122698,
                47.849095
              ],
              [
                28.670891,
                48.118149
              ],
              [
                28.259547,
                48.155562
              ],
              [
                27.522537,
                48.467119
              ],
              [
                26.857824,
                48.368211
              ],
              [
                26.619337,
                48.220726
              ],
              [
                26.19745,
                48.220881
              ],
              [
                25.945941,
                47.987149
              ],
              [
                25.207743,
                47.891056
              ],
              [
                24.866317,
                47.737526
              ],
              [
                24.402056,
                47.981878
              ],
              [
                23.760958,
                47.985598
              ],
              [
                23.142236,
                48.096341
              ],
              [
                22.710531,
                47.882194
              ],
              [
                22.64082,
                48.15024
              ],
              [
                22.085608,
                48.422264
              ],
              [
                22.280842,
                48.825392
              ],
              [
                22.558138,
                49.085738
              ],
              [
                22.776419,
                49.027395
              ],
              [
                22.51845,
                49.476774
              ],
              [
                23.426508,
                50.308506
              ],
              [
                23.922757,
                50.424881
              ],
              [
                24.029986,
                50.705407
              ],
              [
                23.527071,
                51.578454
              ],
              [
                24.005078,
                51.617444
              ],
              [
                24.553106,
                51.888461
              ],
              [
                25.327788,
                51.910656
              ],
              [
                26.337959,
                51.832289
              ],
              [
                27.454066,
                51.592303
              ],
              [
                28.241615,
                51.572227
              ],
              [
                28.617613,
                51.427714
              ],
              [
                28.992835,
                51.602044
              ],
              [
                29.254938,
                51.368234
              ],
              [
                30.157364,
                51.416138
              ],
              [
                30.555117,
                51.319503
              ],
              [
                30.619454,
                51.822806
              ],
              [
                30.927549,
                52.042353
              ],
              [
                31.785998,
                52.101678
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],233:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United Arab Emirates",
    "official": "United Arab Emirates",
    "native": {
      "ara": {
        "official": "الإمارات العربية المتحدة",
        "common": "دولة الإمارات العربية المتحدة"
      }
    }
  },
  "tld": [
    ".ae",
    "امارات."
  ],
  "currency": [
    "AED"
  ],
  "callingCode": [
    "971"
  ],
  "capital": "Abu Dhabi",
  "altSpellings": [
    "AE",
    "UAE",
    "Emirates"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Vereinigte Arabische Emirate",
      "common": "Vereinigte Arabische Emirate"
    },
    "fra": {
      "official": "Émirats arabes unis",
      "common": "Émirats arabes unis"
    },
    "hrv": {
      "official": "Ujedinjeni Arapski Emirati",
      "common": "Ujedinjeni Arapski Emirati"
    },
    "ita": {
      "official": "Emirati Arabi Uniti",
      "common": "Emirati Arabi Uniti"
    },
    "jpn": {
      "official": "アラブ首長国連邦",
      "common": "アラブ首長国連邦"
    },
    "nld": {
      "official": "Verenigde Arabische Emiraten",
      "common": "Verenigde Arabische Emiraten"
    },
    "por": {
      "official": "Emirados Árabes Unidos",
      "common": "Emirados Árabes Unidos"
    },
    "rus": {
      "official": "Объединенные Арабские Эмираты",
      "common": "Объединённые Арабские Эмираты"
    },
    "spa": {
      "official": "Emiratos Árabes Unidos",
      "common": "Emiratos Árabes Unidos"
    },
    "fin": {
      "official": "Yhdistyneet arabiemiirikunnat",
      "common": "Arabiemiraatit"
    }
  },
  "latlng": [
    24,
    54
  ],
  "demonym": "Emirati",
  "landlocked": false,
  "borders": [
    "OMN",
    "SAU"
  ],
  "area": 83600,
  "codes": {
    "cca2": "AE",
    "ccn3": "784",
    "cca3": "ARE",
    "cioc": "UAE"
  },
  "provinces": [
    "'Ajman",
    "Abu Zaby (Abu Dhabi)",
    "Al Fujayrah",
    "Ash Shariqah (Sharjah)",
    "Dubayy (Dubai)",
    "Ra's al Khaymah",
    "Umm al Qaywayn"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ARE",
        "properties": {
          "name": "United Arab Emirates"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                51.579519,
                24.245497
              ],
              [
                51.757441,
                24.294073
              ],
              [
                51.794389,
                24.019826
              ],
              [
                52.577081,
                24.177439
              ],
              [
                53.404007,
                24.151317
              ],
              [
                54.008001,
                24.121758
              ],
              [
                54.693024,
                24.797892
              ],
              [
                55.439025,
                25.439145
              ],
              [
                56.070821,
                26.055464
              ],
              [
                56.261042,
                25.714606
              ],
              [
                56.396847,
                24.924732
              ],
              [
                55.886233,
                24.920831
              ],
              [
                55.804119,
                24.269604
              ],
              [
                55.981214,
                24.130543
              ],
              [
                55.528632,
                23.933604
              ],
              [
                55.525841,
                23.524869
              ],
              [
                55.234489,
                23.110993
              ],
              [
                55.208341,
                22.70833
              ],
              [
                55.006803,
                22.496948
              ],
              [
                52.000733,
                23.001154
              ],
              [
                51.617708,
                24.014219
              ],
              [
                51.579519,
                24.245497
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],234:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United Kingdom",
    "official": "United Kingdom of Great Britain and Northern Ireland",
    "native": {
      "eng": {
        "official": "United Kingdom of Great Britain and Northern Ireland",
        "common": "United Kingdom"
      }
    }
  },
  "tld": [
    ".uk"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "capital": "London",
  "altSpellings": [
    "GB",
    "UK",
    "Great Britain"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Vereinigtes Königreich Großbritannien und Nordirland",
      "common": "Vereinigtes Königreich"
    },
    "fra": {
      "official": "Royaume-Uni de Grande-Bretagne et d'Irlande du Nord",
      "common": "Royaume-Uni"
    },
    "hrv": {
      "official": "Ujedinjeno Kraljevstvo Velike Britanije i Sjeverne Irske",
      "common": "Ujedinjeno Kraljevstvo"
    },
    "ita": {
      "official": "Regno Unito di Gran Bretagna e Irlanda del Nord",
      "common": "Regno Unito"
    },
    "jpn": {
      "official": "グレート·ブリテンおよび北アイルランド連合王国",
      "common": "イギリス"
    },
    "nld": {
      "official": "Verenigd Koninkrijk van Groot-Brittannië en Noord-Ierland",
      "common": "Verenigd Koninkrijk"
    },
    "por": {
      "official": "Reino Unido da Grã-Bretanha e Irlanda do Norte",
      "common": "Reino Unido"
    },
    "rus": {
      "official": "Соединенное Королевство Великобритании и Северной Ирландии",
      "common": "Великобритания"
    },
    "spa": {
      "official": "Reino Unido de Gran Bretaña e Irlanda del Norte",
      "common": "Reino Unido"
    },
    "fin": {
      "official": "Ison-Britannian ja Pohjois-Irlannin yhdistynyt kuningaskunta",
      "common": "Yhdistynyt kuningaskunta"
    }
  },
  "latlng": [
    54,
    -2
  ],
  "demonym": "British",
  "landlocked": false,
  "borders": [
    "IRL"
  ],
  "area": 242900,
  "codes": {
    "cca2": "GB",
    "ccn3": "826",
    "cca3": "GBR",
    "cioc": "GBR"
  },
  "provinces": [
    "Barking and Dagenham",
    "Barnet",
    "Barnsley",
    "Bath and North East Somerset",
    "Bedfordshire",
    "Bexley",
    "Birmingham",
    "Blackburn with Darwen",
    "Blackpool",
    "Bolton",
    "Bournemouth",
    "Bracknell Forest",
    "Bradford",
    "Brent",
    "Brighton and Hove",
    "Bromley",
    "Buckinghamshire",
    "Bury",
    "Calderdale",
    "Cambridgeshire",
    "Camden",
    "Cheshire",
    "City of Bristol",
    "City of Kingston upon Hull",
    "City of London",
    "Cornwall",
    "Coventry",
    "Croydon",
    "Cumbria",
    "Darlington",
    "Derby",
    "Derbyshire",
    "Devon",
    "Doncaster",
    "Dorset",
    "Dudley",
    "Durham",
    "Ealing",
    "East Riding of Yorkshire",
    "East Sussex",
    "Enfield",
    "Essex",
    "Gateshead",
    "Gloucestershire",
    "Greenwich",
    "Hackney",
    "Halton",
    "Hammersmith and Fulham",
    "Hampshire",
    "Haringey",
    "Harrow",
    "Hartlepool",
    "Havering",
    "Herefordshire",
    "Hertfordshire",
    "Hillingdon",
    "Hounslow",
    "Isle of Wight",
    "Islington",
    "Kensington and Chelsea",
    "Kent",
    "Kingston upon Thames",
    "Kirklees",
    "Knowsley",
    "Lambeth",
    "Lancashire",
    "Leeds",
    "Leicester",
    "Leicestershire",
    "Lewisham",
    "Lincolnshire",
    "Liverpool",
    "Luton",
    "Manchester",
    "Medway",
    "Merton",
    "Middlesbrough",
    "Milton Keynes",
    "Newcastle upon Tyne",
    "Newham",
    "Norfolk",
    "North East Lincolnshire",
    "North Lincolnshire",
    "North Somerset",
    "North Tyneside",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottingham",
    "Nottinghamshire",
    "Oldham",
    "Oxfordshire",
    "Peterborough",
    "Plymouth",
    "Poole",
    "Portsmouth",
    "Reading",
    "Redbridge",
    "Redcar and Cleveland",
    "Richmond upon Thames",
    "Rochdale",
    "Rotherham",
    "Rutland",
    "Salford",
    "Sandwell",
    "Sefton",
    "Sheffield",
    "Shropshire",
    "Slough",
    "Solihull",
    "Somerset",
    "South Gloucestershire",
    "South Tyneside",
    "Southampton",
    "Southend-on-Sea",
    "Southwark",
    "St. Helens",
    "Staffordshire",
    "Stockport",
    "Stockton-on-Tees",
    "Stoke-on-Trent",
    "Suffolk",
    "Sunderland",
    "Surrey",
    "Sutton",
    "Swindon",
    "Tameside",
    "Telford and Wrekin",
    "Thurrock",
    "Torbay",
    "Tower Hamlets",
    "Trafford",
    "Wakefield",
    "Walsall",
    "Waltham Forest",
    "Wandsworth",
    "Warrington",
    "Warwickshire",
    "West Berkshire",
    "West Sussex",
    "Westminster",
    "Wigan",
    "Wiltshire",
    "Windsor and Maidenhead",
    "Wirral",
    "Wokingham",
    "Wolverhampton",
    "Worcestershire",
    "York"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "GBR",
        "properties": {
          "name": "United Kingdom"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -5.661949,
                  54.554603
                ],
                [
                  -6.197885,
                  53.867565
                ],
                [
                  -6.95373,
                  54.073702
                ],
                [
                  -7.572168,
                  54.059956
                ],
                [
                  -7.366031,
                  54.595841
                ],
                [
                  -7.572168,
                  55.131622
                ],
                [
                  -6.733847,
                  55.17286
                ],
                [
                  -5.661949,
                  54.554603
                ]
              ]
            ],
            [
              [
                [
                  -3.005005,
                  58.635
                ],
                [
                  -4.073828,
                  57.553025
                ],
                [
                  -3.055002,
                  57.690019
                ],
                [
                  -1.959281,
                  57.6848
                ],
                [
                  -2.219988,
                  56.870017
                ],
                [
                  -3.119003,
                  55.973793
                ],
                [
                  -2.085009,
                  55.909998
                ],
                [
                  -2.005676,
                  55.804903
                ],
                [
                  -1.114991,
                  54.624986
                ],
                [
                  -0.430485,
                  54.464376
                ],
                [
                  0.184981,
                  53.325014
                ],
                [
                  0.469977,
                  52.929999
                ],
                [
                  1.681531,
                  52.73952
                ],
                [
                  1.559988,
                  52.099998
                ],
                [
                  1.050562,
                  51.806761
                ],
                [
                  1.449865,
                  51.289428
                ],
                [
                  0.550334,
                  50.765739
                ],
                [
                  -0.787517,
                  50.774989
                ],
                [
                  -2.489998,
                  50.500019
                ],
                [
                  -2.956274,
                  50.69688
                ],
                [
                  -3.617448,
                  50.228356
                ],
                [
                  -4.542508,
                  50.341837
                ],
                [
                  -5.245023,
                  49.96
                ],
                [
                  -5.776567,
                  50.159678
                ],
                [
                  -4.30999,
                  51.210001
                ],
                [
                  -3.414851,
                  51.426009
                ],
                [
                  -3.422719,
                  51.426848
                ],
                [
                  -4.984367,
                  51.593466
                ],
                [
                  -5.267296,
                  51.9914
                ],
                [
                  -4.222347,
                  52.301356
                ],
                [
                  -4.770013,
                  52.840005
                ],
                [
                  -4.579999,
                  53.495004
                ],
                [
                  -3.093831,
                  53.404547
                ],
                [
                  -3.09208,
                  53.404441
                ],
                [
                  -2.945009,
                  53.985
                ],
                [
                  -3.614701,
                  54.600937
                ],
                [
                  -3.630005,
                  54.615013
                ],
                [
                  -4.844169,
                  54.790971
                ],
                [
                  -5.082527,
                  55.061601
                ],
                [
                  -4.719112,
                  55.508473
                ],
                [
                  -5.047981,
                  55.783986
                ],
                [
                  -5.586398,
                  55.311146
                ],
                [
                  -5.644999,
                  56.275015
                ],
                [
                  -6.149981,
                  56.78501
                ],
                [
                  -5.786825,
                  57.818848
                ],
                [
                  -5.009999,
                  58.630013
                ],
                [
                  -4.211495,
                  58.550845
                ],
                [
                  -3.005005,
                  58.635
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],235:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United States",
    "official": "United States of America",
    "native": {
      "eng": {
        "official": "United States of America",
        "common": "United States"
      }
    }
  },
  "tld": [
    ".us"
  ],
  "currency": [
    "USD",
    "USN",
    "USS"
  ],
  "callingCode": [
    "1"
  ],
  "capital": "Washington D.C.",
  "altSpellings": [
    "US",
    "USA",
    "United States of America"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Vereinigte Staaten von Amerika",
      "common": "Vereinigte Staaten von Amerika"
    },
    "fra": {
      "official": "Les états-unis d'Amérique",
      "common": "États-Unis"
    },
    "hrv": {
      "official": "Sjedinjene Države Amerike",
      "common": "Sjedinjene Američke Države"
    },
    "ita": {
      "official": "Stati Uniti d'America",
      "common": "Stati Uniti d'America"
    },
    "jpn": {
      "official": "アメリカ合衆国",
      "common": "アメリカ合衆国"
    },
    "nld": {
      "official": "Verenigde Staten van Amerika",
      "common": "Verenigde Staten"
    },
    "por": {
      "official": "Estados Unidos da América",
      "common": "Estados Unidos"
    },
    "rus": {
      "official": "Соединенные Штаты Америки",
      "common": "Соединённые Штаты Америки"
    },
    "spa": {
      "official": "Estados Unidos de América",
      "common": "Estados Unidos"
    },
    "fin": {
      "official": "Amerikan yhdysvallat",
      "common": "Yhdysvallat"
    }
  },
  "latlng": [
    38,
    -97
  ],
  "demonym": "American",
  "landlocked": false,
  "borders": [
    "CAN",
    "MEX"
  ],
  "area": 9372610,
  "codes": {
    "cca2": "US",
    "ccn3": "840",
    "cca3": "USA",
    "cioc": "USA"
  },
  "provinces": [
    "Alabama",
    "Alaska",
    "Arizona",
    "Arkansas",
    "California",
    "Colorado",
    "Connecticut",
    "Delaware",
    "District of Columbia",
    "Florida",
    "Georgia",
    "Hawaii",
    "Idaho",
    "Illinois",
    "Indiana",
    "Iowa",
    "Kansas",
    "Kentucky",
    "Louisiana",
    "Maine",
    "Maryland",
    "Massachusetts",
    "Michigan",
    "Minnesota",
    "Mississippi",
    "Missouri",
    "Montana",
    "Nebraska",
    "Nevada",
    "New Hampshire",
    "New Jersey",
    "New Mexico",
    "New York",
    "North Carolina",
    "North Dakota",
    "Ohio",
    "Oklahoma",
    "Oregon",
    "Pennsylvania",
    "Rhode Island",
    "South Carolina",
    "South Dakota",
    "Tennessee",
    "Texas",
    "Utah",
    "Vermont",
    "Virginia",
    "Washington",
    "West Virginia",
    "Wisconsin",
    "Wyoming"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "USA",
        "properties": {
          "name": "United States of America"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -155.54211,
                  19.08348
                ],
                [
                  -155.68817,
                  18.91619
                ],
                [
                  -155.93665,
                  19.05939
                ],
                [
                  -155.90806,
                  19.33888
                ],
                [
                  -156.07347,
                  19.70294
                ],
                [
                  -156.02368,
                  19.81422
                ],
                [
                  -155.85008,
                  19.97729
                ],
                [
                  -155.91907,
                  20.17395
                ],
                [
                  -155.86108,
                  20.26721
                ],
                [
                  -155.78505,
                  20.2487
                ],
                [
                  -155.40214,
                  20.07975
                ],
                [
                  -155.22452,
                  19.99302
                ],
                [
                  -155.06226,
                  19.8591
                ],
                [
                  -154.80741,
                  19.50871
                ],
                [
                  -154.83147,
                  19.45328
                ],
                [
                  -155.22217,
                  19.23972
                ],
                [
                  -155.54211,
                  19.08348
                ]
              ]
            ],
            [
              [
                [
                  -156.07926,
                  20.64397
                ],
                [
                  -156.41445,
                  20.57241
                ],
                [
                  -156.58673,
                  20.783
                ],
                [
                  -156.70167,
                  20.8643
                ],
                [
                  -156.71055,
                  20.92676
                ],
                [
                  -156.61258,
                  21.01249
                ],
                [
                  -156.25711,
                  20.91745
                ],
                [
                  -155.99566,
                  20.76404
                ],
                [
                  -156.07926,
                  20.64397
                ]
              ]
            ],
            [
              [
                [
                  -156.75824,
                  21.17684
                ],
                [
                  -156.78933,
                  21.06873
                ],
                [
                  -157.32521,
                  21.09777
                ],
                [
                  -157.25027,
                  21.21958
                ],
                [
                  -156.75824,
                  21.17684
                ]
              ]
            ],
            [
              [
                [
                  -157.65283,
                  21.32217
                ],
                [
                  -157.70703,
                  21.26442
                ],
                [
                  -157.7786,
                  21.27729
                ],
                [
                  -158.12667,
                  21.31244
                ],
                [
                  -158.2538,
                  21.53919
                ],
                [
                  -158.29265,
                  21.57912
                ],
                [
                  -158.0252,
                  21.71696
                ],
                [
                  -157.94161,
                  21.65272
                ],
                [
                  -157.65283,
                  21.32217
                ]
              ]
            ],
            [
              [
                [
                  -159.34512,
                  21.982
                ],
                [
                  -159.46372,
                  21.88299
                ],
                [
                  -159.80051,
                  22.06533
                ],
                [
                  -159.74877,
                  22.1382
                ],
                [
                  -159.5962,
                  22.23618
                ],
                [
                  -159.36569,
                  22.21494
                ],
                [
                  -159.34512,
                  21.982
                ]
              ]
            ],
            [
              [
                [
                  -94.81758,
                  49.38905
                ],
                [
                  -94.64,
                  48.84
                ],
                [
                  -94.32914,
                  48.67074
                ],
                [
                  -93.63087,
                  48.60926
                ],
                [
                  -92.61,
                  48.45
                ],
                [
                  -91.64,
                  48.14
                ],
                [
                  -90.83,
                  48.27
                ],
                [
                  -89.6,
                  48.01
                ],
                [
                  -89.272917,
                  48.019808
                ],
                [
                  -88.378114,
                  48.302918
                ],
                [
                  -87.439793,
                  47.94
                ],
                [
                  -86.461991,
                  47.553338
                ],
                [
                  -85.652363,
                  47.220219
                ],
                [
                  -84.87608,
                  46.900083
                ],
                [
                  -84.779238,
                  46.637102
                ],
                [
                  -84.543749,
                  46.538684
                ],
                [
                  -84.6049,
                  46.4396
                ],
                [
                  -84.3367,
                  46.40877
                ],
                [
                  -84.14212,
                  46.512226
                ],
                [
                  -84.091851,
                  46.275419
                ],
                [
                  -83.890765,
                  46.116927
                ],
                [
                  -83.616131,
                  46.116927
                ],
                [
                  -83.469551,
                  45.994686
                ],
                [
                  -83.592851,
                  45.816894
                ],
                [
                  -82.550925,
                  45.347517
                ],
                [
                  -82.337763,
                  44.44
                ],
                [
                  -82.137642,
                  43.571088
                ],
                [
                  -82.43,
                  42.98
                ],
                [
                  -82.9,
                  42.43
                ],
                [
                  -83.12,
                  42.08
                ],
                [
                  -83.142,
                  41.975681
                ],
                [
                  -83.02981,
                  41.832796
                ],
                [
                  -82.690089,
                  41.675105
                ],
                [
                  -82.439278,
                  41.675105
                ],
                [
                  -81.277747,
                  42.209026
                ],
                [
                  -80.247448,
                  42.3662
                ],
                [
                  -78.939362,
                  42.863611
                ],
                [
                  -78.92,
                  42.965
                ],
                [
                  -79.01,
                  43.27
                ],
                [
                  -79.171674,
                  43.466339
                ],
                [
                  -78.72028,
                  43.625089
                ],
                [
                  -77.737885,
                  43.629056
                ],
                [
                  -76.820034,
                  43.628784
                ],
                [
                  -76.5,
                  44.018459
                ],
                [
                  -76.375,
                  44.09631
                ],
                [
                  -75.31821,
                  44.81645
                ],
                [
                  -74.867,
                  45.00048
                ],
                [
                  -73.34783,
                  45.00738
                ],
                [
                  -71.50506,
                  45.0082
                ],
                [
                  -71.405,
                  45.255
                ],
                [
                  -71.08482,
                  45.30524
                ],
                [
                  -70.66,
                  45.46
                ],
                [
                  -70.305,
                  45.915
                ],
                [
                  -69.99997,
                  46.69307
                ],
                [
                  -69.237216,
                  47.447781
                ],
                [
                  -68.905,
                  47.185
                ],
                [
                  -68.23444,
                  47.35486
                ],
                [
                  -67.79046,
                  47.06636
                ],
                [
                  -67.79134,
                  45.70281
                ],
                [
                  -67.13741,
                  45.13753
                ],
                [
                  -66.96466,
                  44.8097
                ],
                [
                  -68.03252,
                  44.3252
                ],
                [
                  -69.06,
                  43.98
                ],
                [
                  -70.11617,
                  43.68405
                ],
                [
                  -70.645476,
                  43.090238
                ],
                [
                  -70.81489,
                  42.8653
                ],
                [
                  -70.825,
                  42.335
                ],
                [
                  -70.495,
                  41.805
                ],
                [
                  -70.08,
                  41.78
                ],
                [
                  -70.185,
                  42.145
                ],
                [
                  -69.88497,
                  41.92283
                ],
                [
                  -69.96503,
                  41.63717
                ],
                [
                  -70.64,
                  41.475
                ],
                [
                  -71.12039,
                  41.49445
                ],
                [
                  -71.86,
                  41.32
                ],
                [
                  -72.295,
                  41.27
                ],
                [
                  -72.87643,
                  41.22065
                ],
                [
                  -73.71,
                  40.931102
                ],
                [
                  -72.24126,
                  41.11948
                ],
                [
                  -71.945,
                  40.93
                ],
                [
                  -73.345,
                  40.63
                ],
                [
                  -73.982,
                  40.628
                ],
                [
                  -73.952325,
                  40.75075
                ],
                [
                  -74.25671,
                  40.47351
                ],
                [
                  -73.96244,
                  40.42763
                ],
                [
                  -74.17838,
                  39.70926
                ],
                [
                  -74.90604,
                  38.93954
                ],
                [
                  -74.98041,
                  39.1964
                ],
                [
                  -75.20002,
                  39.24845
                ],
                [
                  -75.52805,
                  39.4985
                ],
                [
                  -75.32,
                  38.96
                ],
                [
                  -75.071835,
                  38.782032
                ],
                [
                  -75.05673,
                  38.40412
                ],
                [
                  -75.37747,
                  38.01551
                ],
                [
                  -75.94023,
                  37.21689
                ],
                [
                  -76.03127,
                  37.2566
                ],
                [
                  -75.72205,
                  37.93705
                ],
                [
                  -76.23287,
                  38.319215
                ],
                [
                  -76.35,
                  39.15
                ],
                [
                  -76.542725,
                  38.717615
                ],
                [
                  -76.32933,
                  38.08326
                ],
                [
                  -76.989998,
                  38.239992
                ],
                [
                  -76.30162,
                  37.917945
                ],
                [
                  -76.25874,
                  36.9664
                ],
                [
                  -75.9718,
                  36.89726
                ],
                [
                  -75.86804,
                  36.55125
                ],
                [
                  -75.72749,
                  35.55074
                ],
                [
                  -76.36318,
                  34.80854
                ],
                [
                  -77.397635,
                  34.51201
                ],
                [
                  -78.05496,
                  33.92547
                ],
                [
                  -78.55435,
                  33.86133
                ],
                [
                  -79.06067,
                  33.49395
                ],
                [
                  -79.20357,
                  33.15839
                ],
                [
                  -80.301325,
                  32.509355
                ],
                [
                  -80.86498,
                  32.0333
                ],
                [
                  -81.33629,
                  31.44049
                ],
                [
                  -81.49042,
                  30.72999
                ],
                [
                  -81.31371,
                  30.03552
                ],
                [
                  -80.98,
                  29.18
                ],
                [
                  -80.535585,
                  28.47213
                ],
                [
                  -80.53,
                  28.04
                ],
                [
                  -80.056539,
                  26.88
                ],
                [
                  -80.088015,
                  26.205765
                ],
                [
                  -80.13156,
                  25.816775
                ],
                [
                  -80.38103,
                  25.20616
                ],
                [
                  -80.68,
                  25.08
                ],
                [
                  -81.17213,
                  25.20126
                ],
                [
                  -81.33,
                  25.64
                ],
                [
                  -81.71,
                  25.87
                ],
                [
                  -82.24,
                  26.73
                ],
                [
                  -82.70515,
                  27.49504
                ],
                [
                  -82.85526,
                  27.88624
                ],
                [
                  -82.65,
                  28.55
                ],
                [
                  -82.93,
                  29.1
                ],
                [
                  -83.70959,
                  29.93656
                ],
                [
                  -84.1,
                  30.09
                ],
                [
                  -85.10882,
                  29.63615
                ],
                [
                  -85.28784,
                  29.68612
                ],
                [
                  -85.7731,
                  30.15261
                ],
                [
                  -86.4,
                  30.4
                ],
                [
                  -87.53036,
                  30.27433
                ],
                [
                  -88.41782,
                  30.3849
                ],
                [
                  -89.18049,
                  30.31598
                ],
                [
                  -89.593831,
                  30.159994
                ],
                [
                  -89.413735,
                  29.89419
                ],
                [
                  -89.43,
                  29.48864
                ],
                [
                  -89.21767,
                  29.29108
                ],
                [
                  -89.40823,
                  29.15961
                ],
                [
                  -89.77928,
                  29.30714
                ],
                [
                  -90.15463,
                  29.11743
                ],
                [
                  -90.880225,
                  29.148535
                ],
                [
                  -91.626785,
                  29.677
                ],
                [
                  -92.49906,
                  29.5523
                ],
                [
                  -93.22637,
                  29.78375
                ],
                [
                  -93.84842,
                  29.71363
                ],
                [
                  -94.69,
                  29.48
                ],
                [
                  -95.60026,
                  28.73863
                ],
                [
                  -96.59404,
                  28.30748
                ],
                [
                  -97.14,
                  27.83
                ],
                [
                  -97.37,
                  27.38
                ],
                [
                  -97.38,
                  26.69
                ],
                [
                  -97.33,
                  26.21
                ],
                [
                  -97.14,
                  25.87
                ],
                [
                  -97.53,
                  25.84
                ],
                [
                  -98.24,
                  26.06
                ],
                [
                  -99.02,
                  26.37
                ],
                [
                  -99.3,
                  26.84
                ],
                [
                  -99.52,
                  27.54
                ],
                [
                  -100.11,
                  28.11
                ],
                [
                  -100.45584,
                  28.69612
                ],
                [
                  -100.9576,
                  29.38071
                ],
                [
                  -101.6624,
                  29.7793
                ],
                [
                  -102.48,
                  29.76
                ],
                [
                  -103.11,
                  28.97
                ],
                [
                  -103.94,
                  29.27
                ],
                [
                  -104.45697,
                  29.57196
                ],
                [
                  -104.70575,
                  30.12173
                ],
                [
                  -105.03737,
                  30.64402
                ],
                [
                  -105.63159,
                  31.08383
                ],
                [
                  -106.1429,
                  31.39995
                ],
                [
                  -106.50759,
                  31.75452
                ],
                [
                  -108.24,
                  31.754854
                ],
                [
                  -108.24194,
                  31.34222
                ],
                [
                  -109.035,
                  31.34194
                ],
                [
                  -111.02361,
                  31.33472
                ],
                [
                  -113.30498,
                  32.03914
                ],
                [
                  -114.815,
                  32.52528
                ],
                [
                  -114.72139,
                  32.72083
                ],
                [
                  -115.99135,
                  32.61239
                ],
                [
                  -117.12776,
                  32.53534
                ],
                [
                  -117.295938,
                  33.046225
                ],
                [
                  -117.944,
                  33.621236
                ],
                [
                  -118.410602,
                  33.740909
                ],
                [
                  -118.519895,
                  34.027782
                ],
                [
                  -119.081,
                  34.078
                ],
                [
                  -119.438841,
                  34.348477
                ],
                [
                  -120.36778,
                  34.44711
                ],
                [
                  -120.62286,
                  34.60855
                ],
                [
                  -120.74433,
                  35.15686
                ],
                [
                  -121.71457,
                  36.16153
                ],
                [
                  -122.54747,
                  37.55176
                ],
                [
                  -122.51201,
                  37.78339
                ],
                [
                  -122.95319,
                  38.11371
                ],
                [
                  -123.7272,
                  38.95166
                ],
                [
                  -123.86517,
                  39.76699
                ],
                [
                  -124.39807,
                  40.3132
                ],
                [
                  -124.17886,
                  41.14202
                ],
                [
                  -124.2137,
                  41.99964
                ],
                [
                  -124.53284,
                  42.76599
                ],
                [
                  -124.14214,
                  43.70838
                ],
                [
                  -124.020535,
                  44.615895
                ],
                [
                  -123.89893,
                  45.52341
                ],
                [
                  -124.079635,
                  46.86475
                ],
                [
                  -124.39567,
                  47.72017
                ],
                [
                  -124.68721,
                  48.184433
                ],
                [
                  -124.566101,
                  48.379715
                ],
                [
                  -123.12,
                  48.04
                ],
                [
                  -122.58736,
                  47.096
                ],
                [
                  -122.34,
                  47.36
                ],
                [
                  -122.5,
                  48.18
                ],
                [
                  -122.84,
                  49
                ],
                [
                  -120,
                  49
                ],
                [
                  -117.03121,
                  49
                ],
                [
                  -116.04818,
                  49
                ],
                [
                  -113,
                  49
                ],
                [
                  -110.05,
                  49
                ],
                [
                  -107.05,
                  49
                ],
                [
                  -104.04826,
                  48.99986
                ],
                [
                  -100.65,
                  49
                ],
                [
                  -97.22872,
                  49.0007
                ],
                [
                  -95.15907,
                  49
                ],
                [
                  -95.15609,
                  49.38425
                ],
                [
                  -94.81758,
                  49.38905
                ]
              ]
            ],
            [
              [
                [
                  -153.006314,
                  57.115842
                ],
                [
                  -154.00509,
                  56.734677
                ],
                [
                  -154.516403,
                  56.992749
                ],
                [
                  -154.670993,
                  57.461196
                ],
                [
                  -153.76278,
                  57.816575
                ],
                [
                  -153.228729,
                  57.968968
                ],
                [
                  -152.564791,
                  57.901427
                ],
                [
                  -152.141147,
                  57.591059
                ],
                [
                  -153.006314,
                  57.115842
                ]
              ]
            ],
            [
              [
                [
                  -165.579164,
                  59.909987
                ],
                [
                  -166.19277,
                  59.754441
                ],
                [
                  -166.848337,
                  59.941406
                ],
                [
                  -167.455277,
                  60.213069
                ],
                [
                  -166.467792,
                  60.38417
                ],
                [
                  -165.67443,
                  60.293607
                ],
                [
                  -165.579164,
                  59.909987
                ]
              ]
            ],
            [
              [
                [
                  -171.731657,
                  63.782515
                ],
                [
                  -171.114434,
                  63.592191
                ],
                [
                  -170.491112,
                  63.694975
                ],
                [
                  -169.682505,
                  63.431116
                ],
                [
                  -168.689439,
                  63.297506
                ],
                [
                  -168.771941,
                  63.188598
                ],
                [
                  -169.52944,
                  62.976931
                ],
                [
                  -170.290556,
                  63.194438
                ],
                [
                  -170.671386,
                  63.375822
                ],
                [
                  -171.553063,
                  63.317789
                ],
                [
                  -171.791111,
                  63.405846
                ],
                [
                  -171.731657,
                  63.782515
                ]
              ]
            ],
            [
              [
                [
                  -155.06779,
                  71.147776
                ],
                [
                  -154.344165,
                  70.696409
                ],
                [
                  -153.900006,
                  70.889989
                ],
                [
                  -152.210006,
                  70.829992
                ],
                [
                  -152.270002,
                  70.600006
                ],
                [
                  -150.739992,
                  70.430017
                ],
                [
                  -149.720003,
                  70.53001
                ],
                [
                  -147.613362,
                  70.214035
                ],
                [
                  -145.68999,
                  70.12001
                ],
                [
                  -144.920011,
                  69.989992
                ],
                [
                  -143.589446,
                  70.152514
                ],
                [
                  -142.07251,
                  69.851938
                ],
                [
                  -140.985988,
                  69.711998
                ],
                [
                  -140.992499,
                  66.000029
                ],
                [
                  -140.99777,
                  60.306397
                ],
                [
                  -140.012998,
                  60.276838
                ],
                [
                  -139.039,
                  60.000007
                ],
                [
                  -138.34089,
                  59.56211
                ],
                [
                  -137.4525,
                  58.905
                ],
                [
                  -136.47972,
                  59.46389
                ],
                [
                  -135.47583,
                  59.78778
                ],
                [
                  -134.945,
                  59.27056
                ],
                [
                  -134.27111,
                  58.86111
                ],
                [
                  -133.355549,
                  58.410285
                ],
                [
                  -132.73042,
                  57.69289
                ],
                [
                  -131.70781,
                  56.55212
                ],
                [
                  -130.00778,
                  55.91583
                ],
                [
                  -129.979994,
                  55.284998
                ],
                [
                  -130.53611,
                  54.802753
                ],
                [
                  -131.085818,
                  55.178906
                ],
                [
                  -131.967211,
                  55.497776
                ],
                [
                  -132.250011,
                  56.369996
                ],
                [
                  -133.539181,
                  57.178887
                ],
                [
                  -134.078063,
                  58.123068
                ],
                [
                  -135.038211,
                  58.187715
                ],
                [
                  -136.628062,
                  58.212209
                ],
                [
                  -137.800006,
                  58.499995
                ],
                [
                  -139.867787,
                  59.537762
                ],
                [
                  -140.825274,
                  59.727517
                ],
                [
                  -142.574444,
                  60.084447
                ],
                [
                  -143.958881,
                  59.99918
                ],
                [
                  -145.925557,
                  60.45861
                ],
                [
                  -147.114374,
                  60.884656
                ],
                [
                  -148.224306,
                  60.672989
                ],
                [
                  -148.018066,
                  59.978329
                ],
                [
                  -148.570823,
                  59.914173
                ],
                [
                  -149.727858,
                  59.705658
                ],
                [
                  -150.608243,
                  59.368211
                ],
                [
                  -151.716393,
                  59.155821
                ],
                [
                  -151.859433,
                  59.744984
                ],
                [
                  -151.409719,
                  60.725803
                ],
                [
                  -150.346941,
                  61.033588
                ],
                [
                  -150.621111,
                  61.284425
                ],
                [
                  -151.895839,
                  60.727198
                ],
                [
                  -152.57833,
                  60.061657
                ],
                [
                  -154.019172,
                  59.350279
                ],
                [
                  -153.287511,
                  58.864728
                ],
                [
                  -154.232492,
                  58.146374
                ],
                [
                  -155.307491,
                  57.727795
                ],
                [
                  -156.308335,
                  57.422774
                ],
                [
                  -156.556097,
                  56.979985
                ],
                [
                  -158.117217,
                  56.463608
                ],
                [
                  -158.433321,
                  55.994154
                ],
                [
                  -159.603327,
                  55.566686
                ],
                [
                  -160.28972,
                  55.643581
                ],
                [
                  -161.223048,
                  55.364735
                ],
                [
                  -162.237766,
                  55.024187
                ],
                [
                  -163.069447,
                  54.689737
                ],
                [
                  -164.785569,
                  54.404173
                ],
                [
                  -164.942226,
                  54.572225
                ],
                [
                  -163.84834,
                  55.039431
                ],
                [
                  -162.870001,
                  55.348043
                ],
                [
                  -161.804175,
                  55.894986
                ],
                [
                  -160.563605,
                  56.008055
                ],
                [
                  -160.07056,
                  56.418055
                ],
                [
                  -158.684443,
                  57.016675
                ],
                [
                  -158.461097,
                  57.216921
                ],
                [
                  -157.72277,
                  57.570001
                ],
                [
                  -157.550274,
                  58.328326
                ],
                [
                  -157.041675,
                  58.918885
                ],
                [
                  -158.194731,
                  58.615802
                ],
                [
                  -158.517218,
                  58.787781
                ],
                [
                  -159.058606,
                  58.424186
                ],
                [
                  -159.711667,
                  58.93139
                ],
                [
                  -159.981289,
                  58.572549
                ],
                [
                  -160.355271,
                  59.071123
                ],
                [
                  -161.355003,
                  58.670838
                ],
                [
                  -161.968894,
                  58.671665
                ],
                [
                  -162.054987,
                  59.266925
                ],
                [
                  -161.874171,
                  59.633621
                ],
                [
                  -162.518059,
                  59.989724
                ],
                [
                  -163.818341,
                  59.798056
                ],
                [
                  -164.662218,
                  60.267484
                ],
                [
                  -165.346388,
                  60.507496
                ],
                [
                  -165.350832,
                  61.073895
                ],
                [
                  -166.121379,
                  61.500019
                ],
                [
                  -165.734452,
                  62.074997
                ],
                [
                  -164.919179,
                  62.633076
                ],
                [
                  -164.562508,
                  63.146378
                ],
                [
                  -163.753332,
                  63.219449
                ],
                [
                  -163.067224,
                  63.059459
                ],
                [
                  -162.260555,
                  63.541936
                ],
                [
                  -161.53445,
                  63.455817
                ],
                [
                  -160.772507,
                  63.766108
                ],
                [
                  -160.958335,
                  64.222799
                ],
                [
                  -161.518068,
                  64.402788
                ],
                [
                  -160.777778,
                  64.788604
                ],
                [
                  -161.391926,
                  64.777235
                ],
                [
                  -162.45305,
                  64.559445
                ],
                [
                  -162.757786,
                  64.338605
                ],
                [
                  -163.546394,
                  64.55916
                ],
                [
                  -164.96083,
                  64.446945
                ],
                [
                  -166.425288,
                  64.686672
                ],
                [
                  -166.845004,
                  65.088896
                ],
                [
                  -168.11056,
                  65.669997
                ],
                [
                  -166.705271,
                  66.088318
                ],
                [
                  -164.47471,
                  66.57666
                ],
                [
                  -163.652512,
                  66.57666
                ],
                [
                  -163.788602,
                  66.077207
                ],
                [
                  -161.677774,
                  66.11612
                ],
                [
                  -162.489715,
                  66.735565
                ],
                [
                  -163.719717,
                  67.116395
                ],
                [
                  -164.430991,
                  67.616338
                ],
                [
                  -165.390287,
                  68.042772
                ],
                [
                  -166.764441,
                  68.358877
                ],
                [
                  -166.204707,
                  68.883031
                ],
                [
                  -164.430811,
                  68.915535
                ],
                [
                  -163.168614,
                  69.371115
                ],
                [
                  -162.930566,
                  69.858062
                ],
                [
                  -161.908897,
                  70.33333
                ],
                [
                  -160.934797,
                  70.44769
                ],
                [
                  -159.039176,
                  70.891642
                ],
                [
                  -158.119723,
                  70.824721
                ],
                [
                  -156.580825,
                  71.357764
                ],
                [
                  -155.06779,
                  71.147776
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],236:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United States Minor Outlying Islands",
    "official": "United States Minor Outlying Islands",
    "native": {
      "eng": {
        "official": "United States Minor Outlying Islands",
        "common": "United States Minor Outlying Islands"
      }
    }
  },
  "tld": [
    ".us"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "UM"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "USA, kleinere ausgelagerte Inseln",
      "common": "Kleinere Inselbesitzungen der Vereinigten Staaten"
    },
    "fra": {
      "official": "Îles mineures éloignées des États-Unis",
      "common": "Îles mineures éloignées des États-Unis"
    },
    "hrv": {
      "official": "Mali udaljeni otoci SAD-a",
      "common": "Mali udaljeni otoci SAD-a"
    },
    "ita": {
      "official": "Stati Uniti Isole Minori",
      "common": "Isole minori esterne degli Stati Uniti d'America"
    },
    "jpn": {
      "official": "アメリカ合衆国外諸島",
      "common": "合衆国領有小離島"
    },
    "nld": {
      "official": "Kleine afgelegen eilanden van de Verenigde Staten",
      "common": "Kleine afgelegen eilanden van de Verenigde Staten"
    },
    "por": {
      "official": "Estados Unidos Ilhas Menores Distantes",
      "common": "Ilhas Menores Distantes dos Estados Unidos"
    },
    "rus": {
      "official": "Внешние малые острова США",
      "common": "Внешние малые острова США"
    },
    "spa": {
      "official": "Estados Unidos Islas menores alejadas de",
      "common": "Islas Ultramarinas Menores de Estados Unidos"
    },
    "fin": {
      "official": "Yhdysvaltain asumattomat saaret",
      "common": "Yhdysvaltain asumattomat saaret"
    }
  },
  "latlng": [],
  "demonym": "American",
  "landlocked": false,
  "borders": [],
  "area": 34.2,
  "codes": {
    "cca2": "UM",
    "ccn3": "581",
    "cca3": "UMI",
    "cioc": ""
  }
}
},{}],237:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United States Virgin Islands",
    "official": "Virgin Islands of the United States",
    "native": {
      "eng": {
        "official": "Virgin Islands of the United States",
        "common": "United States Virgin Islands"
      }
    }
  },
  "tld": [
    ".vi"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1340"
  ],
  "capital": "Charlotte Amalie",
  "altSpellings": [
    "VI",
    "Virgin Islands, U.S."
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Jungferninseln der Vereinigten Staaten",
      "common": "Amerikanische Jungferninseln"
    },
    "fra": {
      "official": "Îles Vierges des États-Unis",
      "common": "Îles Vierges des États-Unis"
    },
    "hrv": {
      "official": "Djevičanski Otoci SAD",
      "common": "Američki Djevičanski Otoci"
    },
    "ita": {
      "official": "Isole Vergini degli Stati Uniti",
      "common": "Isole Vergini americane"
    },
    "jpn": {
      "official": "米国のバージン諸島",
      "common": "アメリカ領ヴァージン諸島"
    },
    "nld": {
      "official": "Maagdeneilanden van de Verenigde Staten",
      "common": "Amerikaanse Maagdeneilanden"
    },
    "por": {
      "official": "Ilhas Virgens dos Estados Unidos",
      "common": "Ilhas Virgens dos Estados Unidos"
    },
    "rus": {
      "official": "Виргинские острова Соединенных Штатов",
      "common": "Виргинские Острова"
    },
    "spa": {
      "official": "Islas Vírgenes de los Estados Unidos",
      "common": "Islas Vírgenes de los Estados Unidos"
    },
    "fin": {
      "official": "Yhdysvaltain Neitsytsaaret",
      "common": "Neitsytsaaret"
    }
  },
  "latlng": [
    18.35,
    -64.933333
  ],
  "demonym": "Virgin Islander",
  "landlocked": false,
  "borders": [],
  "area": 347,
  "flag": "https://en.m.wikipedia.org/wiki/File:Flag of the United States Virgin Islands.svg",
  "codes": {
    "cca2": "VI",
    "ccn3": "850",
    "cca3": "VIR",
    "cioc": "ISV"
  }
}
},{}],238:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Uruguay",
    "official": "Oriental Republic of Uruguay",
    "native": {
      "spa": {
        "official": "República Oriental del Uruguay",
        "common": "Uruguay"
      }
    }
  },
  "tld": [
    ".uy"
  ],
  "currency": [
    "UYI",
    "UYU"
  ],
  "callingCode": [
    "598"
  ],
  "capital": "Montevideo",
  "altSpellings": [
    "UY",
    "Oriental Republic of Uruguay",
    "República Oriental del Uruguay"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Republik Östlich des Uruguay",
      "common": "Uruguay"
    },
    "fra": {
      "official": "République orientale de l'Uruguay",
      "common": "Uruguay"
    },
    "hrv": {
      "official": "Orijentalna Republika Urugvaj",
      "common": "Urugvaj"
    },
    "ita": {
      "official": "Repubblica Orientale dell'Uruguay",
      "common": "Uruguay"
    },
    "jpn": {
      "official": "ウルグアイ東方共和国",
      "common": "ウルグアイ"
    },
    "nld": {
      "official": "Oosterse Republiek Uruguay",
      "common": "Uruguay"
    },
    "por": {
      "official": "República Oriental do Uruguai",
      "common": "Uruguai"
    },
    "rus": {
      "official": "Восточной Республики Уругвай",
      "common": "Уругвай"
    },
    "spa": {
      "official": "República Oriental del Uruguay",
      "common": "Uruguay"
    },
    "fin": {
      "official": "Uruguayn itäinen tasavalta",
      "common": "Uruguay"
    }
  },
  "latlng": [
    -33,
    -56
  ],
  "demonym": "Uruguayan",
  "landlocked": false,
  "borders": [
    "ARG",
    "BRA"
  ],
  "area": 181034,
  "codes": {
    "cca2": "UY",
    "ccn3": "858",
    "cca3": "URY",
    "cioc": "URU"
  },
  "provinces": [
    "Artigas",
    "Canelones",
    "Cerro Largo",
    "Colonia",
    "Durazno",
    "Flores",
    "Florida",
    "Lavalleja",
    "Maldonado",
    "Montevideo",
    "Paysandu",
    "Rio Negro",
    "Rivera",
    "Rocha",
    "Salto",
    "San Jose",
    "Soriano",
    "Tacuarembo",
    "Treinta y Tres"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "URY",
        "properties": {
          "name": "Uruguay"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -57.625133,
                -30.216295
              ],
              [
                -56.976026,
                -30.109686
              ],
              [
                -55.973245,
                -30.883076
              ],
              [
                -55.60151,
                -30.853879
              ],
              [
                -54.572452,
                -31.494511
              ],
              [
                -53.787952,
                -32.047243
              ],
              [
                -53.209589,
                -32.727666
              ],
              [
                -53.650544,
                -33.202004
              ],
              [
                -53.373662,
                -33.768378
              ],
              [
                -53.806426,
                -34.396815
              ],
              [
                -54.935866,
                -34.952647
              ],
              [
                -55.67409,
                -34.752659
              ],
              [
                -56.215297,
                -34.859836
              ],
              [
                -57.139685,
                -34.430456
              ],
              [
                -57.817861,
                -34.462547
              ],
              [
                -58.427074,
                -33.909454
              ],
              [
                -58.349611,
                -33.263189
              ],
              [
                -58.132648,
                -33.040567
              ],
              [
                -58.14244,
                -32.044504
              ],
              [
                -57.874937,
                -31.016556
              ],
              [
                -57.625133,
                -30.216295
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],239:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Uzbekistan",
    "official": "Republic of Uzbekistan",
    "native": {
      "rus": {
        "official": "Республика Узбекистан",
        "common": "Узбекистан"
      },
      "uzb": {
        "official": "O'zbekiston Respublikasi",
        "common": "O‘zbekiston"
      }
    }
  },
  "tld": [
    ".uz"
  ],
  "currency": [
    "UZS"
  ],
  "callingCode": [
    "998"
  ],
  "capital": "Tashkent",
  "altSpellings": [
    "UZ",
    "Republic of Uzbekistan",
    "O‘zbekiston Respublikasi",
    "Ўзбекистон Республикаси"
  ],
  "region": "Asia",
  "subregion": "Central Asia",
  "languages": {
    "rus": "Russian",
    "uzb": "Uzbek"
  },
  "translations": {
    "deu": {
      "official": "Republik Usbekistan",
      "common": "Usbekistan"
    },
    "fra": {
      "official": "République d'Ouzbékistan",
      "common": "Ouzbékistan"
    },
    "hrv": {
      "official": "Republika Uzbekistan",
      "common": "Uzbekistan"
    },
    "ita": {
      "official": "Repubblica di Uzbekistan",
      "common": "Uzbekistan"
    },
    "jpn": {
      "official": "ウズベキスタン共和国",
      "common": "ウズベキスタン"
    },
    "nld": {
      "official": "Republiek Oezbekistan",
      "common": "Oezbekistan"
    },
    "por": {
      "official": "República do Usbequistão",
      "common": "Uzbequistão"
    },
    "rus": {
      "official": "Республика Узбекистан",
      "common": "Узбекистан"
    },
    "spa": {
      "official": "República de Uzbekistán",
      "common": "Uzbekistán"
    },
    "fin": {
      "official": "Uzbekistanin tasavalta",
      "common": "Uzbekistan"
    }
  },
  "latlng": [
    41,
    64
  ],
  "demonym": "Uzbekistani",
  "landlocked": true,
  "borders": [
    "AFG",
    "KAZ",
    "KGZ",
    "TJK",
    "TKM"
  ],
  "area": 447400,
  "codes": {
    "cca2": "UZ",
    "ccn3": "860",
    "cca3": "UZB",
    "cioc": "UZB"
  },
  "provinces": [
    "Andijon Wiloyati",
    "Bukhoro Wiloyati",
    "Farghona Wiloyati",
    "Jizzakh Wiloyati",
    "Khorazm Wiloyati (Urganch)",
    "Namangan Wiloyati",
    "Nawoiy Wiloyati",
    "Qashqadaryo Wiloyati (Qarshi)",
    "Qoraqalpoghiston (Nukus)",
    "Samarqand Wiloyati",
    "Sirdaryo Wiloyati (Guliston)",
    "Surkhondaryo Wiloyati (Termiz)",
    "Toshkent Shahri",
    "Toshkent Wiloyati"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "UZB",
        "properties": {
          "name": "Uzbekistan"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                66.518607,
                37.362784
              ],
              [
                66.54615,
                37.974685
              ],
              [
                65.215999,
                38.402695
              ],
              [
                64.170223,
                38.892407
              ],
              [
                63.518015,
                39.363257
              ],
              [
                62.37426,
                40.053886
              ],
              [
                61.882714,
                41.084857
              ],
              [
                61.547179,
                41.26637
              ],
              [
                60.465953,
                41.220327
              ],
              [
                60.083341,
                41.425146
              ],
              [
                59.976422,
                42.223082
              ],
              [
                58.629011,
                42.751551
              ],
              [
                57.78653,
                42.170553
              ],
              [
                56.932215,
                41.826026
              ],
              [
                57.096391,
                41.32231
              ],
              [
                55.968191,
                41.308642
              ],
              [
                55.928917,
                44.995858
              ],
              [
                58.503127,
                45.586804
              ],
              [
                58.689989,
                45.500014
              ],
              [
                60.239972,
                44.784037
              ],
              [
                61.05832,
                44.405817
              ],
              [
                62.0133,
                43.504477
              ],
              [
                63.185787,
                43.650075
              ],
              [
                64.900824,
                43.728081
              ],
              [
                66.098012,
                42.99766
              ],
              [
                66.023392,
                41.994646
              ],
              [
                66.510649,
                41.987644
              ],
              [
                66.714047,
                41.168444
              ],
              [
                67.985856,
                41.135991
              ],
              [
                68.259896,
                40.662325
              ],
              [
                68.632483,
                40.668681
              ],
              [
                69.070027,
                41.384244
              ],
              [
                70.388965,
                42.081308
              ],
              [
                70.962315,
                42.266154
              ],
              [
                71.259248,
                42.167711
              ],
              [
                70.420022,
                41.519998
              ],
              [
                71.157859,
                41.143587
              ],
              [
                71.870115,
                41.3929
              ],
              [
                73.055417,
                40.866033
              ],
              [
                71.774875,
                40.145844
              ],
              [
                71.014198,
                40.244366
              ],
              [
                70.601407,
                40.218527
              ],
              [
                70.45816,
                40.496495
              ],
              [
                70.666622,
                40.960213
              ],
              [
                69.329495,
                40.727824
              ],
              [
                69.011633,
                40.086158
              ],
              [
                68.536416,
                39.533453
              ],
              [
                67.701429,
                39.580478
              ],
              [
                67.44222,
                39.140144
              ],
              [
                68.176025,
                38.901553
              ],
              [
                68.392033,
                38.157025
              ],
              [
                67.83,
                37.144994
              ],
              [
                67.075782,
                37.356144
              ],
              [
                66.518607,
                37.362784
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],240:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Vanuatu",
    "official": "Republic of Vanuatu",
    "native": {
      "bis": {
        "official": "Ripablik blong Vanuatu",
        "common": "Vanuatu"
      },
      "eng": {
        "official": "Republic of Vanuatu",
        "common": "Vanuatu"
      },
      "fra": {
        "official": "République de Vanuatu",
        "common": "Vanuatu"
      }
    }
  },
  "tld": [
    ".vu"
  ],
  "currency": [
    "VUV"
  ],
  "callingCode": [
    "678"
  ],
  "capital": "Port Vila",
  "altSpellings": [
    "VU",
    "Republic of Vanuatu",
    "Ripablik blong Vanuatu",
    "République de Vanuatu"
  ],
  "region": "Oceania",
  "subregion": "Melanesia",
  "languages": {
    "bis": "Bislama",
    "eng": "English",
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Vanuatu",
      "common": "Vanuatu"
    },
    "fra": {
      "official": "République de Vanuatu",
      "common": "Vanuatu"
    },
    "hrv": {
      "official": "Republika Vanuatu",
      "common": "Vanuatu"
    },
    "ita": {
      "official": "Repubblica di Vanuatu",
      "common": "Vanuatu"
    },
    "jpn": {
      "official": "バヌアツ共和国",
      "common": "バヌアツ"
    },
    "nld": {
      "official": "Republiek Vanuatu",
      "common": "Vanuatu"
    },
    "por": {
      "official": "República de Vanuatu",
      "common": "Vanuatu"
    },
    "rus": {
      "official": "Республика Вануату",
      "common": "Вануату"
    },
    "spa": {
      "official": "República de Vanuatu",
      "common": "Vanuatu"
    },
    "fin": {
      "official": "Vanuatun tasavalta",
      "common": "Vanuatu"
    }
  },
  "latlng": [
    -16,
    167
  ],
  "demonym": "Ni-Vanuatu",
  "landlocked": false,
  "borders": [],
  "area": 12189,
  "codes": {
    "cca2": "VU",
    "ccn3": "548",
    "cca3": "VUT",
    "cioc": "VAN"
  },
  "provinces": [
    "Malampa",
    "Penama",
    "Sanma",
    "Shefa",
    "Tafea",
    "Torba"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "VUT",
        "properties": {
          "name": "Vanuatu"
        },
        "geometry": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  167.844877,
                  -16.466333
                ],
                [
                  167.515181,
                  -16.59785
                ],
                [
                  167.180008,
                  -16.159995
                ],
                [
                  167.216801,
                  -15.891846
                ],
                [
                  167.844877,
                  -16.466333
                ]
              ]
            ],
            [
              [
                [
                  167.107712,
                  -14.93392
                ],
                [
                  167.270028,
                  -15.740021
                ],
                [
                  167.001207,
                  -15.614602
                ],
                [
                  166.793158,
                  -15.668811
                ],
                [
                  166.649859,
                  -15.392704
                ],
                [
                  166.629137,
                  -14.626497
                ],
                [
                  167.107712,
                  -14.93392
                ]
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],241:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Vatican City",
    "official": "Vatican City State",
    "native": {
      "ita": {
        "official": "Stato della Città del Vaticano",
        "common": "Vaticano"
      },
      "lat": {
        "official": "Status Civitatis Vaticanæ",
        "common": "Vaticanæ"
      }
    }
  },
  "tld": [
    ".va"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "3906698",
    "379"
  ],
  "capital": "Vatican City",
  "altSpellings": [
    "VA",
    "Holy See (Vatican City State)",
    "Vatican City State",
    "Stato della Città del Vaticano"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "ita": "Italian",
    "lat": "Latin"
  },
  "translations": {
    "deu": {
      "official": "Staat Vatikanstadt",
      "common": "Vatikanstadt"
    },
    "fra": {
      "official": "Cité du Vatican",
      "common": "Cité du Vatican"
    },
    "hrv": {
      "official": "Vatikan",
      "common": "Vatikan"
    },
    "ita": {
      "official": "Città del Vaticano",
      "common": "Città del Vaticano"
    },
    "jpn": {
      "official": "バチカン市国の状態",
      "common": "バチカン市国"
    },
    "nld": {
      "official": "Vaticaanstad",
      "common": "Vaticaanstad"
    },
    "por": {
      "official": "Cidade do Vaticano",
      "common": "Cidade do Vaticano"
    },
    "rus": {
      "official": "Город-государство Ватикан",
      "common": "Ватикан"
    },
    "spa": {
      "official": "Ciudad del Vaticano",
      "common": "Ciudad del Vaticano"
    },
    "fin": {
      "official": "Vatikaanin kaupunkivaltio",
      "common": "Vatikaani"
    }
  },
  "latlng": [
    41.9,
    12.45
  ],
  "demonym": "Italian",
  "landlocked": true,
  "borders": [
    "ITA"
  ],
  "area": 0.44,
  "codes": {
    "cca2": "VA",
    "ccn3": "336",
    "cca3": "VAT",
    "cioc": ""
  }
}
},{}],242:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Venezuela",
    "official": "Bolivarian Republic of Venezuela",
    "native": {
      "spa": {
        "official": "República Bolivariana de Venezuela",
        "common": "Venezuela"
      }
    }
  },
  "tld": [
    ".ve"
  ],
  "currency": [
    "VEF"
  ],
  "callingCode": [
    "58"
  ],
  "capital": "Caracas",
  "altSpellings": [
    "VE",
    "Bolivarian Republic of Venezuela",
    "Venezuela, Bolivarian Republic of",
    "República Bolivariana de Venezuela"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Bolivarische Republik Venezuela",
      "common": "Venezuela"
    },
    "fra": {
      "official": "République bolivarienne du Venezuela",
      "common": "Venezuela"
    },
    "hrv": {
      "official": "BOLIVARIJANSKA Republika Venezuela",
      "common": "Venezuela"
    },
    "ita": {
      "official": "Repubblica Bolivariana del Venezuela",
      "common": "Venezuela"
    },
    "jpn": {
      "official": "ベネズエラ·ボリバル共和国",
      "common": "ベネズエラ・ボリバル共和国"
    },
    "nld": {
      "official": "Bolivariaanse Republiek Venezuela",
      "common": "Venezuela"
    },
    "por": {
      "official": "República Bolivariana da Venezuela",
      "common": "Venezuela"
    },
    "rus": {
      "official": "Боливарианская Республика Венесуэла",
      "common": "Венесуэла"
    },
    "spa": {
      "official": "República Bolivariana de Venezuela",
      "common": "Venezuela"
    },
    "fin": {
      "official": "Venezuelan bolivariaainen tasavalta",
      "common": "Venezuela"
    }
  },
  "latlng": [
    8,
    -66
  ],
  "demonym": "Venezuelan",
  "landlocked": false,
  "borders": [
    "BRA",
    "COL",
    "GUY"
  ],
  "area": 916445,
  "codes": {
    "cca2": "VE",
    "ccn3": "862",
    "cca3": "VEN",
    "cioc": "VEN"
  },
  "provinces": [
    "Amazonas",
    "Anzoategui",
    "Apure",
    "Aragua",
    "Barinas",
    "Bolivar",
    "Carabobo",
    "Cojedes",
    "Delta Amacuro",
    "Dependencias Federales",
    "Distrito Federal",
    "Falcon",
    "Guarico",
    "Lara",
    "Merida",
    "Miranda",
    "Monagas",
    "Nueva Esparta",
    "Portuguesa",
    "Sucre",
    "Tachira",
    "Trujillo",
    "Vargas",
    "Yaracuy",
    "Zulia"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "VEN",
        "properties": {
          "name": "Venezuela"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -71.331584,
                11.776284
              ],
              [
                -71.360006,
                11.539994
              ],
              [
                -71.94705,
                11.423282
              ],
              [
                -71.620868,
                10.96946
              ],
              [
                -71.633064,
                10.446494
              ],
              [
                -72.074174,
                9.865651
              ],
              [
                -71.695644,
                9.072263
              ],
              [
                -71.264559,
                9.137195
              ],
              [
                -71.039999,
                9.859993
              ],
              [
                -71.350084,
                10.211935
              ],
              [
                -71.400623,
                10.968969
              ],
              [
                -70.155299,
                11.375482
              ],
              [
                -70.293843,
                11.846822
              ],
              [
                -69.943245,
                12.162307
              ],
              [
                -69.5843,
                11.459611
              ],
              [
                -68.882999,
                11.443385
              ],
              [
                -68.233271,
                10.885744
              ],
              [
                -68.194127,
                10.554653
              ],
              [
                -67.296249,
                10.545868
              ],
              [
                -66.227864,
                10.648627
              ],
              [
                -65.655238,
                10.200799
              ],
              [
                -64.890452,
                10.077215
              ],
              [
                -64.329479,
                10.389599
              ],
              [
                -64.318007,
                10.641418
              ],
              [
                -63.079322,
                10.701724
              ],
              [
                -61.880946,
                10.715625
              ],
              [
                -62.730119,
                10.420269
              ],
              [
                -62.388512,
                9.948204
              ],
              [
                -61.588767,
                9.873067
              ],
              [
                -60.830597,
                9.38134
              ],
              [
                -60.671252,
                8.580174
              ],
              [
                -60.150096,
                8.602757
              ],
              [
                -59.758285,
                8.367035
              ],
              [
                -60.550588,
                7.779603
              ],
              [
                -60.637973,
                7.415
              ],
              [
                -60.295668,
                7.043911
              ],
              [
                -60.543999,
                6.856584
              ],
              [
                -61.159336,
                6.696077
              ],
              [
                -61.139415,
                6.234297
              ],
              [
                -61.410303,
                5.959068
              ],
              [
                -60.733574,
                5.200277
              ],
              [
                -60.601179,
                4.918098
              ],
              [
                -60.966893,
                4.536468
              ],
              [
                -62.08543,
                4.162124
              ],
              [
                -62.804533,
                4.006965
              ],
              [
                -63.093198,
                3.770571
              ],
              [
                -63.888343,
                4.02053
              ],
              [
                -64.628659,
                4.148481
              ],
              [
                -64.816064,
                4.056445
              ],
              [
                -64.368494,
                3.79721
              ],
              [
                -64.408828,
                3.126786
              ],
              [
                -64.269999,
                2.497006
              ],
              [
                -63.422867,
                2.411068
              ],
              [
                -63.368788,
                2.2009
              ],
              [
                -64.083085,
                1.916369
              ],
              [
                -64.199306,
                1.492855
              ],
              [
                -64.611012,
                1.328731
              ],
              [
                -65.354713,
                1.095282
              ],
              [
                -65.548267,
                0.789254
              ],
              [
                -66.325765,
                0.724452
              ],
              [
                -66.876326,
                1.253361
              ],
              [
                -67.181294,
                2.250638
              ],
              [
                -67.447092,
                2.600281
              ],
              [
                -67.809938,
                2.820655
              ],
              [
                -67.303173,
                3.318454
              ],
              [
                -67.337564,
                3.542342
              ],
              [
                -67.621836,
                3.839482
              ],
              [
                -67.823012,
                4.503937
              ],
              [
                -67.744697,
                5.221129
              ],
              [
                -67.521532,
                5.55687
              ],
              [
                -67.34144,
                6.095468
              ],
              [
                -67.695087,
                6.267318
              ],
              [
                -68.265052,
                6.153268
              ],
              [
                -68.985319,
                6.206805
              ],
              [
                -69.38948,
                6.099861
              ],
              [
                -70.093313,
                6.960376
              ],
              [
                -70.674234,
                7.087785
              ],
              [
                -71.960176,
                6.991615
              ],
              [
                -72.198352,
                7.340431
              ],
              [
                -72.444487,
                7.423785
              ],
              [
                -72.479679,
                7.632506
              ],
              [
                -72.360901,
                8.002638
              ],
              [
                -72.439862,
                8.405275
              ],
              [
                -72.660495,
                8.625288
              ],
              [
                -72.78873,
                9.085027
              ],
              [
                -73.304952,
                9.152
              ],
              [
                -73.027604,
                9.73677
              ],
              [
                -72.905286,
                10.450344
              ],
              [
                -72.614658,
                10.821975
              ],
              [
                -72.227575,
                11.108702
              ],
              [
                -71.973922,
                11.608672
              ],
              [
                -71.331584,
                11.776284
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],243:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Vietnam",
    "official": "Socialist Republic of Vietnam",
    "native": {
      "vie": {
        "official": "Cộng hòa xã hội chủ nghĩa Việt Nam",
        "common": "Việt Nam"
      }
    }
  },
  "tld": [
    ".vn"
  ],
  "currency": [
    "VND"
  ],
  "callingCode": [
    "84"
  ],
  "capital": "Hanoi",
  "altSpellings": [
    "VN",
    "Socialist Republic of Vietnam",
    "Cộng hòa Xã hội chủ nghĩa Việt Nam",
    "Viet Nam"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "vie": "Vietnamese"
  },
  "translations": {
    "deu": {
      "official": "Sozialistische Republik Vietnam",
      "common": "Vietnam"
    },
    "fra": {
      "official": "République socialiste du Viêt Nam",
      "common": "Viêt Nam"
    },
    "hrv": {
      "official": "Socijalistička Republika Vijetnam",
      "common": "Vijetnam"
    },
    "ita": {
      "official": "Repubblica socialista del Vietnam",
      "common": "Vietnam"
    },
    "jpn": {
      "official": "ベトナム社会主義共和国",
      "common": "ベトナム"
    },
    "nld": {
      "official": "Socialistische Republiek Vietnam",
      "common": "Vietnam"
    },
    "por": {
      "official": "República Socialista do Vietname",
      "common": "Vietname"
    },
    "rus": {
      "official": "Социалистическая Республика Вьетнам",
      "common": "Вьетнам"
    },
    "spa": {
      "official": "República Socialista de Vietnam",
      "common": "Vietnam"
    },
    "fin": {
      "official": "Vietnamin sosialistinen tasavalta",
      "common": "Vietnam"
    }
  },
  "latlng": [
    16.16666666,
    107.83333333
  ],
  "demonym": "Vietnamese",
  "landlocked": false,
  "borders": [
    "KHM",
    "CHN",
    "LAO"
  ],
  "area": 331212,
  "codes": {
    "cca2": "VN",
    "ccn3": "704",
    "cca3": "VNM",
    "cioc": "VIE"
  },
  "provinces": [
    "An Giang",
    "Ba Ria-Vung Tau",
    "Bac Giang",
    "Bac Kan",
    "Bac Lieu",
    "Bac Ninh",
    "Ben Tre",
    "Binh Dinh",
    "Binh Duong",
    "Binh Phuoc",
    "Binh Thuan",
    "Ca Mau",
    "Can Tho",
    "Cao Bang",
    "Da Nang",
    "Dac Lak",
    "Dong Nai",
    "Dong Thap",
    "Gia Lai",
    "Ha Giang",
    "Ha Nam",
    "Ha Noi",
    "Ha Tay",
    "Ha Tinh",
    "Hai Duong",
    "Hai Phong",
    "Ho Chi Minh",
    "Hoa Binh",
    "Hung Yen",
    "Khanh Hoa",
    "Kien Giang",
    "Kon Tum",
    "Lai Chau",
    "Lam Dong",
    "Lang Son",
    "Lao Cai",
    "Long An",
    "Nam Dinh",
    "Nghe An",
    "Ninh Binh",
    "Ninh Thuan",
    "Phu Tho",
    "Phu Yen",
    "Quang Binh",
    "Quang Nam",
    "Quang Ngai",
    "Quang Ninh",
    "Quang Tri",
    "Soc Trang",
    "Son La",
    "Tay Ninh",
    "Thai Binh",
    "Thai Nguyen",
    "Thanh Hoa",
    "Thua Thien-Hue",
    "Tien Giang",
    "Tra Vinh",
    "Tuyen Quang",
    "Vinh Long",
    "Vinh Phuc",
    "Yen Bai"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "VNM",
        "properties": {
          "name": "Vietnam"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                108.05018,
                21.55238
              ],
              [
                106.715068,
                20.696851
              ],
              [
                105.881682,
                19.75205
              ],
              [
                105.662006,
                19.058165
              ],
              [
                106.426817,
                18.004121
              ],
              [
                107.361954,
                16.697457
              ],
              [
                108.269495,
                16.079742
              ],
              [
                108.877107,
                15.276691
              ],
              [
                109.33527,
                13.426028
              ],
              [
                109.200136,
                11.666859
              ],
              [
                108.36613,
                11.008321
              ],
              [
                107.220929,
                10.364484
              ],
              [
                106.405113,
                9.53084
              ],
              [
                105.158264,
                8.59976
              ],
              [
                104.795185,
                9.241038
              ],
              [
                105.076202,
                9.918491
              ],
              [
                104.334335,
                10.486544
              ],
              [
                105.199915,
                10.88931
              ],
              [
                106.24967,
                10.961812
              ],
              [
                105.810524,
                11.567615
              ],
              [
                107.491403,
                12.337206
              ],
              [
                107.614548,
                13.535531
              ],
              [
                107.382727,
                14.202441
              ],
              [
                107.564525,
                15.202173
              ],
              [
                107.312706,
                15.908538
              ],
              [
                106.556008,
                16.604284
              ],
              [
                105.925762,
                17.485315
              ],
              [
                105.094598,
                18.666975
              ],
              [
                103.896532,
                19.265181
              ],
              [
                104.183388,
                19.624668
              ],
              [
                104.822574,
                19.886642
              ],
              [
                104.435,
                20.758733
              ],
              [
                103.203861,
                20.766562
              ],
              [
                102.754896,
                21.675137
              ],
              [
                102.170436,
                22.464753
              ],
              [
                102.706992,
                22.708795
              ],
              [
                103.504515,
                22.703757
              ],
              [
                104.476858,
                22.81915
              ],
              [
                105.329209,
                23.352063
              ],
              [
                105.811247,
                22.976892
              ],
              [
                106.725403,
                22.794268
              ],
              [
                106.567273,
                22.218205
              ],
              [
                107.04342,
                21.811899
              ],
              [
                108.05018,
                21.55238
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],244:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Wallis and Futuna",
    "official": "Territory of the Wallis and Futuna Islands",
    "native": {
      "fra": {
        "official": "Territoire des îles Wallis et Futuna",
        "common": "Wallis et Futuna"
      }
    }
  },
  "tld": [
    ".wf"
  ],
  "currency": [
    "XPF"
  ],
  "callingCode": [
    "681"
  ],
  "capital": "Mata-Utu",
  "altSpellings": [
    "WF",
    "Territory of the Wallis and Futuna Islands",
    "Territoire des îles Wallis et Futuna"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Gebiet der Wallis und Futuna",
      "common": "Wallis und Futuna"
    },
    "fra": {
      "official": "Territoire des îles Wallis et Futuna",
      "common": "Wallis-et-Futuna"
    },
    "hrv": {
      "official": "Teritoriju Wallis i Futuna",
      "common": "Wallis i Fortuna"
    },
    "ita": {
      "official": "Territorio delle Isole Wallis e Futuna",
      "common": "Wallis e Futuna"
    },
    "jpn": {
      "official": "ウォリス·フツナ諸島の領土",
      "common": "ウォリス・フツナ"
    },
    "nld": {
      "official": "Grondgebied van de Wallis en Futuna",
      "common": "Wallis en Futuna"
    },
    "por": {
      "official": "Território das Ilhas Wallis e Futuna",
      "common": "Wallis e Futuna"
    },
    "rus": {
      "official": "Территория Уоллис и Футуна острова",
      "common": "Уоллис и Футуна"
    },
    "spa": {
      "official": "Territorio de las Islas Wallis y Futuna",
      "common": "Wallis y Futuna"
    },
    "fin": {
      "official": "Wallisin ja Futunan yhteisö",
      "common": "Wallis ja Futuna"
    }
  },
  "latlng": [
    -13.3,
    -176.2
  ],
  "demonym": "Wallis and Futuna Islander",
  "landlocked": false,
  "borders": [],
  "area": 142,
  "codes": {
    "cca2": "WF",
    "ccn3": "876",
    "cca3": "WLF",
    "cioc": ""
  },
  "provinces": [
    "Alo",
    "Sigave",
    "Wallis"
  ],
  "geoJSON": {},
  "flag": ""
}
},{}],245:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Western Sahara",
    "official": "Sahrawi Arab Democratic Republic",
    "native": {
      "ber": {
        "official": "Sahrawi Arab Democratic Republic",
        "common": "Western Sahara"
      },
      "mey": {
        "official": "الجمهورية العربية الصحراوية الديمقراطية",
        "common": "الصحراء الغربية"
      },
      "spa": {
        "official": "República Árabe Saharaui Democrática",
        "common": "Sahara Occidental"
      }
    }
  },
  "tld": [
    ".eh"
  ],
  "currency": [
    "MAD",
    "DZD",
    "MRO"
  ],
  "callingCode": [
    "212"
  ],
  "capital": "El Aaiún",
  "altSpellings": [
    "EH",
    "Taneẓroft Tutrimt"
  ],
  "region": "Africa",
  "subregion": "Northern Africa",
  "languages": {
    "ber": "Berber",
    "mey": "Hassaniya",
    "spa": "Spanish"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Arabische Republik Sahara",
      "common": "Westsahara"
    },
    "fra": {
      "official": "République arabe sahraouie démocratique",
      "common": "Sahara Occidental"
    },
    "hrv": {
      "official": "Sahrawi Arab Demokratska Republika",
      "common": "Zapadna Sahara"
    },
    "ita": {
      "official": "Repubblica Araba Saharawi Democratica",
      "common": "Sahara Occidentale"
    },
    "jpn": {
      "official": "サハラアラブ民主共和国",
      "common": "西サハラ"
    },
    "nld": {
      "official": "Sahrawi Arabische Democratische Republiek",
      "common": "Westelijke Sahara"
    },
    "por": {
      "official": "República Árabe Saharaui Democrática",
      "common": "Saara Ocidental"
    },
    "rus": {
      "official": "Sahrawi Арабская Демократическая Республика",
      "common": "Западная Сахара"
    },
    "spa": {
      "official": "República Árabe Saharaui Democrática",
      "common": "Sahara Occidental"
    },
    "fin": {
      "official": "Länsi-Sahara",
      "common": "Länsi-Sahara"
    }
  },
  "latlng": [
    24.5,
    -13
  ],
  "demonym": "Sahrawi",
  "landlocked": false,
  "borders": [
    "DZA",
    "MRT",
    "MAR"
  ],
  "area": 266000,
  "codes": {
    "cca2": "EH",
    "ccn3": "732",
    "cca3": "ESH",
    "cioc": ""
  },
  "provinces": [
    "Western Sahara"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ESH",
        "properties": {
          "name": "Western Sahara"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -8.794884,
                27.120696
              ],
              [
                -8.817828,
                27.656426
              ],
              [
                -8.66559,
                27.656426
              ],
              [
                -8.665124,
                27.589479
              ],
              [
                -8.6844,
                27.395744
              ],
              [
                -8.687294,
                25.881056
              ],
              [
                -11.969419,
                25.933353
              ],
              [
                -11.937224,
                23.374594
              ],
              [
                -12.874222,
                23.284832
              ],
              [
                -13.118754,
                22.77122
              ],
              [
                -12.929102,
                21.327071
              ],
              [
                -16.845194,
                21.333323
              ],
              [
                -17.063423,
                20.999752
              ],
              [
                -17.020428,
                21.42231
              ],
              [
                -17.002962,
                21.420734
              ],
              [
                -14.750955,
                21.5006
              ],
              [
                -14.630833,
                21.86094
              ],
              [
                -14.221168,
                22.310163
              ],
              [
                -13.89111,
                23.691009
              ],
              [
                -12.500963,
                24.770116
              ],
              [
                -12.030759,
                26.030866
              ],
              [
                -11.71822,
                26.104092
              ],
              [
                -11.392555,
                26.883424
              ],
              [
                -10.551263,
                26.990808
              ],
              [
                -10.189424,
                26.860945
              ],
              [
                -9.735343,
                26.860945
              ],
              [
                -9.413037,
                27.088476
              ],
              [
                -8.794884,
                27.120696
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],246:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Yemen",
    "official": "Republic of Yemen",
    "native": {
      "ara": {
        "official": "الجمهورية اليمنية",
        "common": "اليَمَن"
      }
    }
  },
  "tld": [
    ".ye"
  ],
  "currency": [
    "YER"
  ],
  "callingCode": [
    "967"
  ],
  "capital": "Sana'a",
  "altSpellings": [
    "YE",
    "Yemeni Republic",
    "al-Jumhūriyyah al-Yamaniyyah"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Republik Jemen",
      "common": "Jemen"
    },
    "fra": {
      "official": "République du Yémen",
      "common": "Yémen"
    },
    "hrv": {
      "official": "Republika Jemen",
      "common": "Jemen"
    },
    "ita": {
      "official": "Repubblica dello Yemen",
      "common": "Yemen"
    },
    "jpn": {
      "official": "イエメン共和国",
      "common": "イエメン"
    },
    "nld": {
      "official": "Republiek Jemen",
      "common": "Jemen"
    },
    "por": {
      "official": "República do Iêmen",
      "common": "Iémen"
    },
    "rus": {
      "official": "Йеменская Республика",
      "common": "Йемен"
    },
    "spa": {
      "official": "República de Yemen",
      "common": "Yemen"
    },
    "fin": {
      "official": "Jemenin tasavalta",
      "common": "Jemen"
    }
  },
  "latlng": [
    15,
    48
  ],
  "demonym": "Yemeni",
  "landlocked": false,
  "borders": [
    "OMN",
    "SAU"
  ],
  "area": 527968,
  "codes": {
    "cca2": "YE",
    "ccn3": "887",
    "cca3": "YEM",
    "cioc": "YEM"
  },
  "provinces": [
    "'Adan",
    "'Ataq",
    "Abyan",
    "Al Bayda'",
    "Al Hudaydah",
    "Al Jawf",
    "Al Mahrah",
    "Al Mahwit",
    "Dhamar",
    "Hadhramawt",
    "Hajjah",
    "Ibb",
    "Lahij",
    "Ma'rib",
    "Sa'dah",
    "San'a'",
    "Ta'izz"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "YEM",
        "properties": {
          "name": "Yemen"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.108573,
                16.651051
              ],
              [
                52.385206,
                16.382411
              ],
              [
                52.191729,
                15.938433
              ],
              [
                52.168165,
                15.59742
              ],
              [
                51.172515,
                15.17525
              ],
              [
                49.574576,
                14.708767
              ],
              [
                48.679231,
                14.003202
              ],
              [
                48.238947,
                13.94809
              ],
              [
                47.938914,
                14.007233
              ],
              [
                47.354454,
                13.59222
              ],
              [
                46.717076,
                13.399699
              ],
              [
                45.877593,
                13.347764
              ],
              [
                45.62505,
                13.290946
              ],
              [
                45.406459,
                13.026905
              ],
              [
                45.144356,
                12.953938
              ],
              [
                44.989533,
                12.699587
              ],
              [
                44.494576,
                12.721653
              ],
              [
                44.175113,
                12.58595
              ],
              [
                43.482959,
                12.6368
              ],
              [
                43.222871,
                13.22095
              ],
              [
                43.251448,
                13.767584
              ],
              [
                43.087944,
                14.06263
              ],
              [
                42.892245,
                14.802249
              ],
              [
                42.604873,
                15.213335
              ],
              [
                42.805015,
                15.261963
              ],
              [
                42.702438,
                15.718886
              ],
              [
                42.823671,
                15.911742
              ],
              [
                42.779332,
                16.347891
              ],
              [
                43.218375,
                16.66689
              ],
              [
                43.115798,
                17.08844
              ],
              [
                43.380794,
                17.579987
              ],
              [
                43.791519,
                17.319977
              ],
              [
                44.062613,
                17.410359
              ],
              [
                45.216651,
                17.433329
              ],
              [
                45.399999,
                17.333335
              ],
              [
                46.366659,
                17.233315
              ],
              [
                46.749994,
                17.283338
              ],
              [
                47.000005,
                16.949999
              ],
              [
                47.466695,
                17.116682
              ],
              [
                48.183344,
                18.166669
              ],
              [
                49.116672,
                18.616668
              ],
              [
                52.00001,
                19.000003
              ],
              [
                52.782184,
                17.349742
              ],
              [
                53.108573,
                16.651051
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],247:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Zambia",
    "official": "Republic of Zambia",
    "native": {
      "eng": {
        "official": "Republic of Zambia",
        "common": "Zambia"
      }
    }
  },
  "tld": [
    ".zm"
  ],
  "currency": [
    "ZMW"
  ],
  "callingCode": [
    "260"
  ],
  "capital": "Lusaka",
  "altSpellings": [
    "ZM",
    "Republic of Zambia"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Sambia",
      "common": "Sambia"
    },
    "fra": {
      "official": "République de Zambie",
      "common": "Zambie"
    },
    "hrv": {
      "official": "Republika Zambija",
      "common": "Zambija"
    },
    "ita": {
      "official": "Repubblica di Zambia",
      "common": "Zambia"
    },
    "jpn": {
      "official": "ザンビア共和国",
      "common": "ザンビア"
    },
    "nld": {
      "official": "Republiek Zambia",
      "common": "Zambia"
    },
    "por": {
      "official": "República da Zâmbia",
      "common": "Zâmbia"
    },
    "rus": {
      "official": "Республика Замбия",
      "common": "Замбия"
    },
    "spa": {
      "official": "República de Zambia",
      "common": "Zambia"
    },
    "fin": {
      "official": "Sambian tasavalta",
      "common": "Sambia"
    }
  },
  "latlng": [
    -15,
    30
  ],
  "demonym": "Zambian",
  "landlocked": true,
  "borders": [
    "AGO",
    "BWA",
    "COD",
    "MWI",
    "MOZ",
    "NAM",
    "TZA",
    "ZWE"
  ],
  "area": 752612,
  "codes": {
    "cca2": "ZM",
    "ccn3": "894",
    "cca3": "ZMB",
    "cioc": "ZAM"
  },
  "provinces": [
    "Central",
    "Copperbelt",
    "Eastern",
    "Luapula",
    "Lusaka",
    "North-Western",
    "Northern",
    "Southern",
    "Western"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ZMB",
        "properties": {
          "name": "Zambia"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                32.759375,
                -9.230599
              ],
              [
                33.231388,
                -9.676722
              ],
              [
                33.485688,
                -10.525559
              ],
              [
                33.31531,
                -10.79655
              ],
              [
                33.114289,
                -11.607198
              ],
              [
                33.306422,
                -12.435778
              ],
              [
                32.991764,
                -12.783871
              ],
              [
                32.688165,
                -13.712858
              ],
              [
                33.214025,
                -13.97186
              ],
              [
                30.179481,
                -14.796099
              ],
              [
                30.274256,
                -15.507787
              ],
              [
                29.516834,
                -15.644678
              ],
              [
                28.947463,
                -16.043051
              ],
              [
                28.825869,
                -16.389749
              ],
              [
                28.467906,
                -16.4684
              ],
              [
                27.598243,
                -17.290831
              ],
              [
                27.044427,
                -17.938026
              ],
              [
                26.706773,
                -17.961229
              ],
              [
                26.381935,
                -17.846042
              ],
              [
                25.264226,
                -17.73654
              ],
              [
                25.084443,
                -17.661816
              ],
              [
                25.07695,
                -17.578823
              ],
              [
                24.682349,
                -17.353411
              ],
              [
                24.033862,
                -17.295843
              ],
              [
                23.215048,
                -17.523116
              ],
              [
                22.562478,
                -16.898451
              ],
              [
                21.887843,
                -16.08031
              ],
              [
                21.933886,
                -12.898437
              ],
              [
                24.016137,
                -12.911046
              ],
              [
                23.930922,
                -12.565848
              ],
              [
                24.079905,
                -12.191297
              ],
              [
                23.904154,
                -11.722282
              ],
              [
                24.017894,
                -11.237298
              ],
              [
                23.912215,
                -10.926826
              ],
              [
                24.257155,
                -10.951993
              ],
              [
                24.314516,
                -11.262826
              ],
              [
                24.78317,
                -11.238694
              ],
              [
                25.418118,
                -11.330936
              ],
              [
                25.75231,
                -11.784965
              ],
              [
                26.553088,
                -11.92444
              ],
              [
                27.16442,
                -11.608748
              ],
              [
                27.388799,
                -12.132747
              ],
              [
                28.155109,
                -12.272481
              ],
              [
                28.523562,
                -12.698604
              ],
              [
                28.934286,
                -13.248958
              ],
              [
                29.699614,
                -13.257227
              ],
              [
                29.616001,
                -12.178895
              ],
              [
                29.341548,
                -12.360744
              ],
              [
                28.642417,
                -11.971569
              ],
              [
                28.372253,
                -11.793647
              ],
              [
                28.49607,
                -10.789884
              ],
              [
                28.673682,
                -9.605925
              ],
              [
                28.449871,
                -9.164918
              ],
              [
                28.734867,
                -8.526559
              ],
              [
                29.002912,
                -8.407032
              ],
              [
                30.346086,
                -8.238257
              ],
              [
                30.740015,
                -8.340007
              ],
              [
                31.157751,
                -8.594579
              ],
              [
                31.556348,
                -8.762049
              ],
              [
                32.191865,
                -8.930359
              ],
              [
                32.759375,
                -9.230599
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],248:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Zimbabwe",
    "official": "Republic of Zimbabwe",
    "native": {
      "bwg": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "eng": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "kck": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "khi": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "ndc": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "nde": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "nya": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "sna": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "sot": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "toi": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "tsn": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "tso": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "ven": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "xho": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "zib": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      }
    }
  },
  "tld": [
    ".zw"
  ],
  "currency": [
    "ZWL"
  ],
  "callingCode": [
    "263"
  ],
  "capital": "Harare",
  "altSpellings": [
    "ZW",
    "Republic of Zimbabwe"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "bwg": "Chibarwe",
    "eng": "English",
    "kck": "Kalanga",
    "khi": "Khoisan",
    "ndc": "Ndau",
    "nde": "Northern Ndebele",
    "nya": "Chewa",
    "sna": "Shona",
    "sot": "Sotho",
    "toi": "Tonga",
    "tsn": "Tswana",
    "tso": "Tsonga",
    "ven": "Venda",
    "xho": "Xhosa",
    "zib": "Zimbabwean Sign Language"
  },
  "translations": {
    "deu": {
      "official": "Republik Simbabwe",
      "common": "Simbabwe"
    },
    "fra": {
      "official": "République du Zimbabwe",
      "common": "Zimbabwe"
    },
    "hrv": {
      "official": "Republika Zimbabve",
      "common": "Zimbabve"
    },
    "ita": {
      "official": "Repubblica dello Zimbabwe",
      "common": "Zimbabwe"
    },
    "jpn": {
      "official": "ジンバブエ共和国",
      "common": "ジンバブエ"
    },
    "nld": {
      "official": "Republiek Zimbabwe",
      "common": "Zimbabwe"
    },
    "por": {
      "official": "República do Zimbabwe",
      "common": "Zimbabwe"
    },
    "rus": {
      "official": "Республика Зимбабве",
      "common": "Зимбабве"
    },
    "spa": {
      "official": "República de Zimbabue",
      "common": "Zimbabue"
    },
    "fin": {
      "official": "Zimbabwen tasavalta",
      "common": "Zimbabwe"
    }
  },
  "latlng": [
    -20,
    30
  ],
  "demonym": "Zimbabwean",
  "landlocked": true,
  "borders": [
    "BWA",
    "MOZ",
    "ZAF",
    "ZMB"
  ],
  "area": 390757,
  "codes": {
    "cca2": "ZW",
    "ccn3": "716",
    "cca3": "ZWE",
    "cioc": "ZIM"
  },
  "provinces": [
    "Bulawayo",
    "Harare",
    "ManicalandMashonaland Central",
    "Mashonaland East",
    "Mashonaland"
  ],
  "geoJSON": {
    "type": "FeatureCollection",
    "features": [
      {
        "type": "Feature",
        "id": "ZWE",
        "properties": {
          "name": "Zimbabwe"
        },
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                31.191409,
                -22.25151
              ],
              [
                30.659865,
                -22.151567
              ],
              [
                30.322883,
                -22.271612
              ],
              [
                29.839037,
                -22.102216
              ],
              [
                29.432188,
                -22.091313
              ],
              [
                28.794656,
                -21.639454
              ],
              [
                28.02137,
                -21.485975
              ],
              [
                27.727228,
                -20.851802
              ],
              [
                27.724747,
                -20.499059
              ],
              [
                27.296505,
                -20.39152
              ],
              [
                26.164791,
                -19.293086
              ],
              [
                25.850391,
                -18.714413
              ],
              [
                25.649163,
                -18.536026
              ],
              [
                25.264226,
                -17.73654
              ],
              [
                26.381935,
                -17.846042
              ],
              [
                26.706773,
                -17.961229
              ],
              [
                27.044427,
                -17.938026
              ],
              [
                27.598243,
                -17.290831
              ],
              [
                28.467906,
                -16.4684
              ],
              [
                28.825869,
                -16.389749
              ],
              [
                28.947463,
                -16.043051
              ],
              [
                29.516834,
                -15.644678
              ],
              [
                30.274256,
                -15.507787
              ],
              [
                30.338955,
                -15.880839
              ],
              [
                31.173064,
                -15.860944
              ],
              [
                31.636498,
                -16.07199
              ],
              [
                31.852041,
                -16.319417
              ],
              [
                32.328239,
                -16.392074
              ],
              [
                32.847639,
                -16.713398
              ],
              [
                32.849861,
                -17.979057
              ],
              [
                32.654886,
                -18.67209
              ],
              [
                32.611994,
                -19.419383
              ],
              [
                32.772708,
                -19.715592
              ],
              [
                32.659743,
                -20.30429
              ],
              [
                32.508693,
                -20.395292
              ],
              [
                32.244988,
                -21.116489
              ],
              [
                31.191409,
                -22.25151
              ]
            ]
          ]
        }
      }
    ]
  },
  "flag": ""
}
},{}],249:[function(require,module,exports){
// Copyright (c) 2015, Trent Oswald <trentoswald@therebelrobot.com
//
// Permission to use, copy, modify, and/or distribute this software for any purpose
// with or without fee is hereby granted, provided that the above copyright notice
// and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,
// OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
// ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

module.exports = require('./lib/countryjs')

},{"./lib/countryjs":250}],250:[function(require,module,exports){
'use strict'

/* Debugging utilities */
const debug = require('debug')
const fnDebug = debug('function')
const blockDebug = debug('block')
// const miscDebug = debug('misc')

/* External dependencies */
const _ = require('lodash')


/* Internal dependencies */
const _countryList = _.values(({"..":({"data":({"_land_islands":require("../data/_land_islands.json"),"afghanistan":require("../data/afghanistan.json"),"albania":require("../data/albania.json"),"algeria":require("../data/algeria.json"),"american_samoa":require("../data/american_samoa.json"),"andorra":require("../data/andorra.json"),"angola":require("../data/angola.json"),"anguilla":require("../data/anguilla.json"),"antarctica":require("../data/antarctica.json"),"antigua_and_barbuda":require("../data/antigua_and_barbuda.json"),"argentina":require("../data/argentina.json"),"armenia":require("../data/armenia.json"),"aruba":require("../data/aruba.json"),"australia":require("../data/australia.json"),"austria":require("../data/austria.json"),"azerbaijan":require("../data/azerbaijan.json"),"bahamas":require("../data/bahamas.json"),"bahrain":require("../data/bahrain.json"),"bangladesh":require("../data/bangladesh.json"),"barbados":require("../data/barbados.json"),"belarus":require("../data/belarus.json"),"belgium":require("../data/belgium.json"),"belize":require("../data/belize.json"),"benin":require("../data/benin.json"),"bermuda":require("../data/bermuda.json"),"bhutan":require("../data/bhutan.json"),"bolivia":require("../data/bolivia.json"),"bosnia_and_herzegovina":require("../data/bosnia_and_herzegovina.json"),"botswana":require("../data/botswana.json"),"bouvet_island":require("../data/bouvet_island.json"),"brazil":require("../data/brazil.json"),"british_indian_ocean_territory":require("../data/british_indian_ocean_territory.json"),"british_virgin_islands":require("../data/british_virgin_islands.json"),"brunei":require("../data/brunei.json"),"bulgaria":require("../data/bulgaria.json"),"burkina_faso":require("../data/burkina_faso.json"),"burundi":require("../data/burundi.json"),"cambodia":require("../data/cambodia.json"),"cameroon":require("../data/cameroon.json"),"canada":require("../data/canada.json"),"cape_verde":require("../data/cape_verde.json"),"cayman_islands":require("../data/cayman_islands.json"),"central_african_republic":require("../data/central_african_republic.json"),"chad":require("../data/chad.json"),"chile":require("../data/chile.json"),"china":require("../data/china.json"),"christmas_island":require("../data/christmas_island.json"),"cocos_keeling_islands":require("../data/cocos_keeling_islands.json"),"colombia":require("../data/colombia.json"),"comoros":require("../data/comoros.json"),"cook_islands":require("../data/cook_islands.json"),"costa_rica":require("../data/costa_rica.json"),"croatia":require("../data/croatia.json"),"cuba":require("../data/cuba.json"),"cura_ao":require("../data/cura_ao.json"),"cyprus":require("../data/cyprus.json"),"czech_republic":require("../data/czech_republic.json"),"denmark":require("../data/denmark.json"),"djibouti":require("../data/djibouti.json"),"dominica":require("../data/dominica.json"),"dominican_republic":require("../data/dominican_republic.json"),"dr_congo":require("../data/dr_congo.json"),"ecuador":require("../data/ecuador.json"),"egypt":require("../data/egypt.json"),"el_salvador":require("../data/el_salvador.json"),"equatorial_guinea":require("../data/equatorial_guinea.json"),"eritrea":require("../data/eritrea.json"),"estonia":require("../data/estonia.json"),"ethiopia":require("../data/ethiopia.json"),"falkland_islands":require("../data/falkland_islands.json"),"faroe_islands":require("../data/faroe_islands.json"),"fiji":require("../data/fiji.json"),"finland":require("../data/finland.json"),"france":require("../data/france.json"),"french_guiana":require("../data/french_guiana.json"),"french_polynesia":require("../data/french_polynesia.json"),"french_southern_and_antarctic_lands":require("../data/french_southern_and_antarctic_lands.json"),"gabon":require("../data/gabon.json"),"gambia":require("../data/gambia.json"),"georgia":require("../data/georgia.json"),"germany":require("../data/germany.json"),"ghana":require("../data/ghana.json"),"gibraltar":require("../data/gibraltar.json"),"greece":require("../data/greece.json"),"greenland":require("../data/greenland.json"),"grenada":require("../data/grenada.json"),"guadeloupe":require("../data/guadeloupe.json"),"guam":require("../data/guam.json"),"guatemala":require("../data/guatemala.json"),"guernsey":require("../data/guernsey.json"),"guinea":require("../data/guinea.json"),"guinea_bissau":require("../data/guinea_bissau.json"),"guyana":require("../data/guyana.json"),"haiti":require("../data/haiti.json"),"heard_island_and_mcdonald_islands":require("../data/heard_island_and_mcdonald_islands.json"),"honduras":require("../data/honduras.json"),"hong_kong":require("../data/hong_kong.json"),"hungary":require("../data/hungary.json"),"iceland":require("../data/iceland.json"),"india":require("../data/india.json"),"indonesia":require("../data/indonesia.json"),"iran":require("../data/iran.json"),"iraq":require("../data/iraq.json"),"ireland":require("../data/ireland.json"),"isle_of_man":require("../data/isle_of_man.json"),"israel":require("../data/israel.json"),"italy":require("../data/italy.json"),"ivory_coast":require("../data/ivory_coast.json"),"jamaica":require("../data/jamaica.json"),"japan":require("../data/japan.json"),"jersey":require("../data/jersey.json"),"jordan":require("../data/jordan.json"),"kazakhstan":require("../data/kazakhstan.json"),"kenya":require("../data/kenya.json"),"kiribati":require("../data/kiribati.json"),"kosovo":require("../data/kosovo.json"),"kuwait":require("../data/kuwait.json"),"kyrgyzstan":require("../data/kyrgyzstan.json"),"laos":require("../data/laos.json"),"latvia":require("../data/latvia.json"),"lebanon":require("../data/lebanon.json"),"lesotho":require("../data/lesotho.json"),"liberia":require("../data/liberia.json"),"libya":require("../data/libya.json"),"liechtenstein":require("../data/liechtenstein.json"),"lithuania":require("../data/lithuania.json"),"luxembourg":require("../data/luxembourg.json"),"macau":require("../data/macau.json"),"macedonia":require("../data/macedonia.json"),"madagascar":require("../data/madagascar.json"),"malawi":require("../data/malawi.json"),"malaysia":require("../data/malaysia.json"),"maldives":require("../data/maldives.json"),"mali":require("../data/mali.json"),"malta":require("../data/malta.json"),"marshall_islands":require("../data/marshall_islands.json"),"martinique":require("../data/martinique.json"),"mauritania":require("../data/mauritania.json"),"mauritius":require("../data/mauritius.json"),"mayotte":require("../data/mayotte.json"),"mexico":require("../data/mexico.json"),"micronesia":require("../data/micronesia.json"),"moldova":require("../data/moldova.json"),"monaco":require("../data/monaco.json"),"mongolia":require("../data/mongolia.json"),"montenegro":require("../data/montenegro.json"),"montserrat":require("../data/montserrat.json"),"morocco":require("../data/morocco.json"),"mozambique":require("../data/mozambique.json"),"myanmar":require("../data/myanmar.json"),"namibia":require("../data/namibia.json"),"nauru":require("../data/nauru.json"),"nepal":require("../data/nepal.json"),"netherlands":require("../data/netherlands.json"),"new_caledonia":require("../data/new_caledonia.json"),"new_zealand":require("../data/new_zealand.json"),"nicaragua":require("../data/nicaragua.json"),"niger":require("../data/niger.json"),"nigeria":require("../data/nigeria.json"),"niue":require("../data/niue.json"),"norfolk_island":require("../data/norfolk_island.json"),"north_korea":require("../data/north_korea.json"),"northern_mariana_islands":require("../data/northern_mariana_islands.json"),"norway":require("../data/norway.json"),"oman":require("../data/oman.json"),"pakistan":require("../data/pakistan.json"),"palau":require("../data/palau.json"),"palestine":require("../data/palestine.json"),"panama":require("../data/panama.json"),"papua_new_guinea":require("../data/papua_new_guinea.json"),"paraguay":require("../data/paraguay.json"),"peru":require("../data/peru.json"),"philippines":require("../data/philippines.json"),"pitcairn_islands":require("../data/pitcairn_islands.json"),"poland":require("../data/poland.json"),"portugal":require("../data/portugal.json"),"puerto_rico":require("../data/puerto_rico.json"),"qatar":require("../data/qatar.json"),"r_union":require("../data/r_union.json"),"republic_of_the_congo":require("../data/republic_of_the_congo.json"),"romania":require("../data/romania.json"),"russia":require("../data/russia.json"),"rwanda":require("../data/rwanda.json"),"s_o_tom_and_pr_ncipe":require("../data/s_o_tom_and_pr_ncipe.json"),"saint_barth_lemy":require("../data/saint_barth_lemy.json"),"saint_kitts_and_nevis":require("../data/saint_kitts_and_nevis.json"),"saint_lucia":require("../data/saint_lucia.json"),"saint_martin":require("../data/saint_martin.json"),"saint_pierre_and_miquelon":require("../data/saint_pierre_and_miquelon.json"),"saint_vincent_and_the_grenadines":require("../data/saint_vincent_and_the_grenadines.json"),"samoa":require("../data/samoa.json"),"san_marino":require("../data/san_marino.json"),"saudi_arabia":require("../data/saudi_arabia.json"),"senegal":require("../data/senegal.json"),"serbia":require("../data/serbia.json"),"seychelles":require("../data/seychelles.json"),"sierra_leone":require("../data/sierra_leone.json"),"singapore":require("../data/singapore.json"),"sint_maarten":require("../data/sint_maarten.json"),"slovakia":require("../data/slovakia.json"),"slovenia":require("../data/slovenia.json"),"solomon_islands":require("../data/solomon_islands.json"),"somalia":require("../data/somalia.json"),"south_africa":require("../data/south_africa.json"),"south_georgia":require("../data/south_georgia.json"),"south_korea":require("../data/south_korea.json"),"south_sudan":require("../data/south_sudan.json"),"spain":require("../data/spain.json"),"sri_lanka":require("../data/sri_lanka.json"),"sudan":require("../data/sudan.json"),"suriname":require("../data/suriname.json"),"svalbard_and_jan_mayen":require("../data/svalbard_and_jan_mayen.json"),"swaziland":require("../data/swaziland.json"),"sweden":require("../data/sweden.json"),"switzerland":require("../data/switzerland.json"),"syria":require("../data/syria.json"),"taiwan":require("../data/taiwan.json"),"tajikistan":require("../data/tajikistan.json"),"tanzania":require("../data/tanzania.json"),"thailand":require("../data/thailand.json"),"timor_leste":require("../data/timor_leste.json"),"togo":require("../data/togo.json"),"tokelau":require("../data/tokelau.json"),"tonga":require("../data/tonga.json"),"trinidad_and_tobago":require("../data/trinidad_and_tobago.json"),"tunisia":require("../data/tunisia.json"),"turkey":require("../data/turkey.json"),"turkmenistan":require("../data/turkmenistan.json"),"turks_and_caicos_islands":require("../data/turks_and_caicos_islands.json"),"tuvalu":require("../data/tuvalu.json"),"uganda":require("../data/uganda.json"),"ukraine":require("../data/ukraine.json"),"united_arab_emirates":require("../data/united_arab_emirates.json"),"united_kingdom":require("../data/united_kingdom.json"),"united_states":require("../data/united_states.json"),"united_states_minor_outlying_islands":require("../data/united_states_minor_outlying_islands.json"),"united_states_virgin_islands":require("../data/united_states_virgin_islands.json"),"uruguay":require("../data/uruguay.json"),"uzbekistan":require("../data/uzbekistan.json"),"vanuatu":require("../data/vanuatu.json"),"vatican_city":require("../data/vatican_city.json"),"venezuela":require("../data/venezuela.json"),"vietnam":require("../data/vietnam.json"),"wallis_and_futuna":require("../data/wallis_and_futuna.json"),"western_sahara":require("../data/western_sahara.json"),"yemen":require("../data/yemen.json"),"zambia":require("../data/zambia.json"),"zimbabwe":require("../data/zimbabwe.json")})})})['..'].data)

/* Internal functions */
const normalizeName = function (name) {
  fnDebug('[i] normalizeName', name)
  return _.deburr(name)
    .toLowerCase()
    .replace(/\-/g, ' ')
    .replace(/(\.|\b(the|and|of|de|des|du|di|del|y|da|und|die) \b)/g, '')
    .trim()
}
const findIndex = _.transform(_countryList, function (index, country, key) {
  fnDebug('[i] findIndex transform', index, country, key)

  let addToIndex = (name) => {
    fnDebug('[i] findIndex addToIndex', name)

    if (name) {
      blockDebug('"name" is present', name)

      index[normalizeName(name)] = key
    }
    blockDebug('"name" is not present')
  }
  addToIndex(country.name.common)
  addToIndex(country.name.official)
  _.forEach(_.map(country.name.native, 'official'), addToIndex)
  _.forEach(_.map(country.name.native, 'common'), addToIndex)
  _.forEach(country.altSpellings, addToIndex)
  _.forEach(_.map(country.translations, 'official'), addToIndex)
  _.forEach(_.map(country.translations, 'common'), addToIndex)
})

/* Exposed functions */
const Country = function () {
  fnDebug('Country')

  let _returnCountry = (country, type) => {
    fnDebug('[i] _returnCountry', country, type)

    if (type === 'name') {
      blockDebug('type is "name"')
      let normalizedName = normalizeName(country)
      let key = findIndex[normalizedName]

      // this is kind of hacky, need to figure out multiple key names
      return [_countryList[key]]
    } else if (type === 'cca3') {
      blockDebug('type is "cca3"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.cca3 === country
      })
    } else if (type === 'ccn3') {
      blockDebug('type is "ccn3"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.ccn3 === country
      })
    } else if (type === 'cioc') {
      blockDebug('type is "cioc"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.cioc === country
      })
    } else {
      blockDebug('type isn\'nt "name", "cca3", "cioc", or "ccn3", defaulting to "cca2" ' + country)

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.cca2 === country
      })
    }
  }
  this.all = () => {
    fnDebug('all')

    return _countryList
  }
  let methods = {
    info: null,
    name: 'name',
    altSpellings: 'altSpellings',
    area: 'area',
    borders: 'borders',
    capital: 'capital',
    demonym: 'demonym',
    flag: 'flag',
    geoJSON: 'geoJSON',
    languages: 'languages',
    latlng: 'latlng',
    nativeName: 'nativeName',
    population: 'population',
    states: 'provinces',
    provinces: 'provinces',
    region: 'region',
    subregion: 'subregion',
    timezones: 'timezones',
    tld: 'tld',
    translations: 'translations',
    wiki: 'wiki',
    currency: 'currency',
    callingCode: 'callingCode',
    landlocked: 'landlocked',
    codes: 'codes'
  }
  _.forEach(methods, (property, method) => {
    fnDebug('_.forEach', property, method)

    this[method] = (country, type) => {
      fnDebug(method, 'property:', property, country, type)

      let _returnData = _returnCountry(country, type)
      if (_returnData.length && _returnData[0]) {
        blockDebug('"_returnData" is present', _returnData)

        if (property) {
          blockDebug('"property" is present', property)

          return _.map(_returnData, property)
        }
        blockDebug('"property" is not present')

        return _returnData
      }
      blockDebug('"_returnData" is not present')

    }
  })
  return this
}
module.exports = new Country()

},{"../data/_land_islands.json":1,"../data/afghanistan.json":2,"../data/albania.json":3,"../data/algeria.json":4,"../data/american_samoa.json":5,"../data/andorra.json":6,"../data/angola.json":7,"../data/anguilla.json":8,"../data/antarctica.json":9,"../data/antigua_and_barbuda.json":10,"../data/argentina.json":11,"../data/armenia.json":12,"../data/aruba.json":13,"../data/australia.json":14,"../data/austria.json":15,"../data/azerbaijan.json":16,"../data/bahamas.json":17,"../data/bahrain.json":18,"../data/bangladesh.json":19,"../data/barbados.json":20,"../data/belarus.json":21,"../data/belgium.json":22,"../data/belize.json":23,"../data/benin.json":24,"../data/bermuda.json":25,"../data/bhutan.json":26,"../data/bolivia.json":27,"../data/bosnia_and_herzegovina.json":28,"../data/botswana.json":29,"../data/bouvet_island.json":30,"../data/brazil.json":31,"../data/british_indian_ocean_territory.json":32,"../data/british_virgin_islands.json":33,"../data/brunei.json":34,"../data/bulgaria.json":35,"../data/burkina_faso.json":36,"../data/burundi.json":37,"../data/cambodia.json":38,"../data/cameroon.json":39,"../data/canada.json":40,"../data/cape_verde.json":41,"../data/cayman_islands.json":42,"../data/central_african_republic.json":43,"../data/chad.json":44,"../data/chile.json":45,"../data/china.json":46,"../data/christmas_island.json":47,"../data/cocos_keeling_islands.json":48,"../data/colombia.json":49,"../data/comoros.json":50,"../data/cook_islands.json":51,"../data/costa_rica.json":52,"../data/croatia.json":53,"../data/cuba.json":54,"../data/cura_ao.json":55,"../data/cyprus.json":56,"../data/czech_republic.json":57,"../data/denmark.json":58,"../data/djibouti.json":59,"../data/dominica.json":60,"../data/dominican_republic.json":61,"../data/dr_congo.json":62,"../data/ecuador.json":63,"../data/egypt.json":64,"../data/el_salvador.json":65,"../data/equatorial_guinea.json":66,"../data/eritrea.json":67,"../data/estonia.json":68,"../data/ethiopia.json":69,"../data/falkland_islands.json":70,"../data/faroe_islands.json":71,"../data/fiji.json":72,"../data/finland.json":73,"../data/france.json":74,"../data/french_guiana.json":75,"../data/french_polynesia.json":76,"../data/french_southern_and_antarctic_lands.json":77,"../data/gabon.json":78,"../data/gambia.json":79,"../data/georgia.json":80,"../data/germany.json":81,"../data/ghana.json":82,"../data/gibraltar.json":83,"../data/greece.json":84,"../data/greenland.json":85,"../data/grenada.json":86,"../data/guadeloupe.json":87,"../data/guam.json":88,"../data/guatemala.json":89,"../data/guernsey.json":90,"../data/guinea.json":91,"../data/guinea_bissau.json":92,"../data/guyana.json":93,"../data/haiti.json":94,"../data/heard_island_and_mcdonald_islands.json":95,"../data/honduras.json":96,"../data/hong_kong.json":97,"../data/hungary.json":98,"../data/iceland.json":99,"../data/india.json":100,"../data/indonesia.json":101,"../data/iran.json":102,"../data/iraq.json":103,"../data/ireland.json":104,"../data/isle_of_man.json":105,"../data/israel.json":106,"../data/italy.json":107,"../data/ivory_coast.json":108,"../data/jamaica.json":109,"../data/japan.json":110,"../data/jersey.json":111,"../data/jordan.json":112,"../data/kazakhstan.json":113,"../data/kenya.json":114,"../data/kiribati.json":115,"../data/kosovo.json":116,"../data/kuwait.json":117,"../data/kyrgyzstan.json":118,"../data/laos.json":119,"../data/latvia.json":120,"../data/lebanon.json":121,"../data/lesotho.json":122,"../data/liberia.json":123,"../data/libya.json":124,"../data/liechtenstein.json":125,"../data/lithuania.json":126,"../data/luxembourg.json":127,"../data/macau.json":128,"../data/macedonia.json":129,"../data/madagascar.json":130,"../data/malawi.json":131,"../data/malaysia.json":132,"../data/maldives.json":133,"../data/mali.json":134,"../data/malta.json":135,"../data/marshall_islands.json":136,"../data/martinique.json":137,"../data/mauritania.json":138,"../data/mauritius.json":139,"../data/mayotte.json":140,"../data/mexico.json":141,"../data/micronesia.json":142,"../data/moldova.json":143,"../data/monaco.json":144,"../data/mongolia.json":145,"../data/montenegro.json":146,"../data/montserrat.json":147,"../data/morocco.json":148,"../data/mozambique.json":149,"../data/myanmar.json":150,"../data/namibia.json":151,"../data/nauru.json":152,"../data/nepal.json":153,"../data/netherlands.json":154,"../data/new_caledonia.json":155,"../data/new_zealand.json":156,"../data/nicaragua.json":157,"../data/niger.json":158,"../data/nigeria.json":159,"../data/niue.json":160,"../data/norfolk_island.json":161,"../data/north_korea.json":162,"../data/northern_mariana_islands.json":163,"../data/norway.json":164,"../data/oman.json":165,"../data/pakistan.json":166,"../data/palau.json":167,"../data/palestine.json":168,"../data/panama.json":169,"../data/papua_new_guinea.json":170,"../data/paraguay.json":171,"../data/peru.json":172,"../data/philippines.json":173,"../data/pitcairn_islands.json":174,"../data/poland.json":175,"../data/portugal.json":176,"../data/puerto_rico.json":177,"../data/qatar.json":178,"../data/r_union.json":179,"../data/republic_of_the_congo.json":180,"../data/romania.json":181,"../data/russia.json":182,"../data/rwanda.json":183,"../data/s_o_tom_and_pr_ncipe.json":184,"../data/saint_barth_lemy.json":185,"../data/saint_kitts_and_nevis.json":186,"../data/saint_lucia.json":187,"../data/saint_martin.json":188,"../data/saint_pierre_and_miquelon.json":189,"../data/saint_vincent_and_the_grenadines.json":190,"../data/samoa.json":191,"../data/san_marino.json":192,"../data/saudi_arabia.json":193,"../data/senegal.json":194,"../data/serbia.json":195,"../data/seychelles.json":196,"../data/sierra_leone.json":197,"../data/singapore.json":198,"../data/sint_maarten.json":199,"../data/slovakia.json":200,"../data/slovenia.json":201,"../data/solomon_islands.json":202,"../data/somalia.json":203,"../data/south_africa.json":204,"../data/south_georgia.json":205,"../data/south_korea.json":206,"../data/south_sudan.json":207,"../data/spain.json":208,"../data/sri_lanka.json":209,"../data/sudan.json":210,"../data/suriname.json":211,"../data/svalbard_and_jan_mayen.json":212,"../data/swaziland.json":213,"../data/sweden.json":214,"../data/switzerland.json":215,"../data/syria.json":216,"../data/taiwan.json":217,"../data/tajikistan.json":218,"../data/tanzania.json":219,"../data/thailand.json":220,"../data/timor_leste.json":221,"../data/togo.json":222,"../data/tokelau.json":223,"../data/tonga.json":224,"../data/trinidad_and_tobago.json":225,"../data/tunisia.json":226,"../data/turkey.json":227,"../data/turkmenistan.json":228,"../data/turks_and_caicos_islands.json":229,"../data/tuvalu.json":230,"../data/uganda.json":231,"../data/ukraine.json":232,"../data/united_arab_emirates.json":233,"../data/united_kingdom.json":234,"../data/united_states.json":235,"../data/united_states_minor_outlying_islands.json":236,"../data/united_states_virgin_islands.json":237,"../data/uruguay.json":238,"../data/uzbekistan.json":239,"../data/vanuatu.json":240,"../data/vatican_city.json":241,"../data/venezuela.json":242,"../data/vietnam.json":243,"../data/wallis_and_futuna.json":244,"../data/western_sahara.json":245,"../data/yemen.json":246,"../data/zambia.json":247,"../data/zimbabwe.json":248,"debug":251,"lodash":253}],251:[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":252}],252:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":254}],253:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 4.6.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./foo/lodash.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.6.1';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+',
    rsUpper + '+',
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[mapTag] = cloneableTags[numberTag] =
  cloneableTags[objectTag] = cloneableTags[regexpTag] =
  cloneableTags[setTag] = cloneableTags[stringTag] =
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
  cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
    ? exports
    : undefined;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
    ? module
    : undefined;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports)
    ? freeExports
    : undefined;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal ||
    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
      freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the new array of key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to an array.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the converted array.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the converted array.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Use `context` to mock `Date#getTime` use in `_.now`.
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getPrototypeOf = Object.getPrototypeOf,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var Map = getNative(context, 'Map'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var mapCtorString = Map ? funcToString.call(Map) : '',
        setCtorString = Set ? funcToString.call(Set) : '',
        weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chaining. Methods that operate on and return arrays, collections, and
     * functions can be chained together. Methods that retrieve a single value or
     * may return a primitive value will automatically end the chain sequence and
     * return the unwrapped value. Otherwise, the value must be unwrapped with
     * `_#value`.
     *
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
     * may be enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization to merge iteratee calls; this avoids the creation
     * of intermediate arrays and can greatly reduce the number of iteratee executions.
     * Sections of a chain sequence qualify for shortcut fusion if the section is
     * applied to an array of at least two hundred elements and any iteratees
     * accept only one argument. The heuristic for whether a section qualifies
     * for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatten`, `flattenDeep`, `flattenDepth`, `flip`, `flow`, `flowRight`,
     * `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`, `intersection`,
     * `intersectionBy`, `intersectionWith`, `invert`, `invertBy`, `invokeMap`,
     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
     * `pullAll`, `pullAllBy`, `pullAllWith`, `pullAt`, `push`, `range`,
     * `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`, `sampleSize`,
     * `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
     * `thru`, `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`,
     * `transform`, `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`,
     * `uniqWith`, `unset`, `unshift`, `unzip`, `unzipWith`, `update`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`,
     * `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `each`, `eachRight`,
     * `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`, `floor`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`, `includes`,
     * `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`, `isArrayBuffer`,
     * `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`, `isDate`,
     * `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`, `isFinite`,
     * `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`, `isMatchWith`,
     * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
     * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isSet`, `isString`,
     * `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`,
     * `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toInteger`, `toJSON`, `toLength`, `toLower`,
     * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,
     * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,
     * `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an hash object.
     *
     * @private
     * @constructor
     * @returns {Object} Returns the new hash object.
     */
    function Hash() {}

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function hashSet(hash, key, value) {
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': Map ? new Map : [],
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache object.
     */
    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a set cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.push(values[index]);
      }
    }

    /**
     * Checks if `value` is in `cache`.
     *
     * @private
     * @param {Object} cache The set cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    /**
     * Adds `value` to the set cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      }
      else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache object.
     */
    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Removes `key` and its value from the associative array.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    /**
     * Gets the associative array value for `key`.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    /**
     * Checks if an associative array value for `key` exists.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    /**
     * Gets the index at which the first occurrence of `key` is found in `array`
     * of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Sets the associative array `key` to `value`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the array-like object.
     */
    function baseCastArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the array-like object.
     */
    function baseCastFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function baseCastPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            result = baseAssign(result, value);
            return isFull ? copySymbols(value, result) : result;
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return (isFull && !isArr) ? copySymbols(value, result) : result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments to provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support for
     * excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && isArrayLikeObject(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return object == null ? object : baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path + ''] : baseCastPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = baseCastPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          stack || (stack = new Stack);
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack,
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      var type = typeof value;
      if (type == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (type == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value &&
            (value !== undefined || (key in Object(object)));
        };
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      var props = (isArray(source) || isTypedArray(source))
        ? undefined
        : keysIn(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            isCommon = false;
            newValue = baseClone(srcValue, !customizer);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue, !customizer);
          }
          else {
            newValue = objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      stack['delete'](srcValue);
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), getIteratee());

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property names.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key) {
        if (predicate(value, key)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (lastIndex == length || index != previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = baseCastPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[last(path)];
            }
          }
          else {
            delete array[index];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the new array of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path + ''] : baseCastPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null
                ? (isIndex(path[index + 1]) ? [] : {})
                : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array) {
      return baseSortedUniqBy(array);
    }

    /**
     * The base implementation of `_.sortedUniqBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniqBy(array, iteratee) {
      var index = 0,
          length = array.length,
          value = array[0],
          computed = iteratee ? iteratee(value) : value,
          seen = computed,
          resIndex = 1,
          result = [value];

      while (++index < length) {
        value = array[index],
        computed = iteratee ? iteratee(value) : value;

        if (!eq(computed, seen)) {
          seen = computed;
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path + ''] : baseCastPath(path);
      object = parent(object, path);
      var key = last(path);
      return (object != null && has(object, key)) ? delete object[key] : true;
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property names.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        assignFunc(result, props[index], index < valsLength ? values[index] : undefined);
      }
      return result;
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map) {
      return arrayReduce(mapToArray(map), addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set) {
      return arrayReduce(setToArray(set), addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object) {
      return copyObjectWith(source, props, object);
    }

    /**
     * This function is like `copyObject` except that it accepts a function to
     * customize copied values.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObjectWith(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function'
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0),
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string)), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getPlaceholder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurryWrapper(
            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs, 1);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getPlaceholder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurryWrapper(
            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new invoker function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(string, length, chars) {
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars === undefined ? ' ' : (chars + '');

      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? stringToArray(result).slice(0, padLength).join('')
        : result.slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newArgPos = argPos ? copyArray(argPos) : undefined,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, newArgPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isUnordered) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
              })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          // Recursively compare objects (susceptible to call stack limits).
          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask | UNORDERED_COMPARE_FLAG, stack.set(object, other));

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
     * customized this function returns the custom method, otherwise it returns
     * `baseIteratee`. If arguments are provided the chosen function is invoked
     * with them and its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getPlaceholder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Creates an array of the own symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = getOwnPropertySymbols || function() {
      return [];
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
    if ((Map && getTag(new Map) != mapTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : null,
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case mapCtorString: return mapTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      if (object == null) {
        return false;
      }
      var result = hasFunc(object, path);
      if (!result && !isKey(path)) {
        path = baseCastPath(path);
        object = parent(object, path);
        if (object != null) {
          path = last(path);
          result = hasFunc(object, path);
        }
      }
      var length = object ? object.length : undefined;
      return result || (
        !!length && isLength(length) && isIndex(path, length) &&
        (isArray(object) || isString(object) || isArguments(object))
      );
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototypeOf(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (typeof value == 'number') {
        return true;
      }
      return !isArray(value) &&
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object)));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'number' || type == 'boolean' ||
        (type == 'string' && value != '__proto__') || value == null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * modify function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = copyArray(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    function stringToPath(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=0] The length of each chunk.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size) {
      size = nativeMax(toInteger(size), 0);

      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var concat = rest(function(array, values) {
      if (!isArray(array)) {
        array = array == null ? [] : [Object(array)];
      }
      values = baseFlatten(values, 1);
      return arrayConcat(array, values);
    });

    /**
     * Creates an array of unique `array` values not included in the other
     * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([3, 2, 1], [4, 2]);
     * // => [3, 1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
     * // => [3.1, 1.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. Result values
     * are chosen from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3))
        : -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3), true)
        : -1;
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
     * from the end of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [4, 2], [1, 2]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, baseCastArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, baseCastArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. Result values are chosen
     * from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, baseCastArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pullAll(array, [2, 3]);
     * console.log(array);
     * // => [1, 1]
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = rest(function(array, indexes) {
      indexes = arrayMap(baseFlatten(indexes, 1), String);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(compareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @category Array
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
     * to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 5], 4);
     * // => 0
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
     *
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([1, 1, 2, 2], 2);
     * // => 2
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5], 4);
     * // => 1
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniqBy(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with three
     * arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2, 1], [4, 2], [1, 2]);
     * // => [2, 1, 4]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1, 1.2, 4.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([2, 1], [4, 2]);
     * // => [1, 4]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [1.2, 4.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
     * The result of such method chaining must be unwrapped with `_#value`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     *
     * _(['a', 'b', 'c']).at(0, 2).value();
     * // => ['a', 'c']
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * This method is the wrapper version of `_.flatMap`.
     *
     * @name flatMap
     * @memberOf _
     * @category Seq
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _([1, 2]).flatMap(duplicate).value();
     * // => [1, 1, 2, 2]
     */
    function wrapperFlatMap(iteratee) {
      return this.map(iteratee).flatten();
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Creates an array of flattened values by running each element in `collection`
     * through `iteratee` and concating its result to the other mapped values.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
     * for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => logs `1` then `2`
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, baseCastFunction(iteratee));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => logs `2` then `1`
     */
    function forEachRight(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, baseCastFunction(iteratee));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of elements responsible for generating the key.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string it's checked
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it's
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
     * and `words`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=0] The number of elements to sample.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = baseClamp(toInteger(n), 0, length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
     *  The iteratees to sort by, specified individually or in arrays.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees.length = 1;
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @type {Function}
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = Date.now;

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getPlaceholder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getPlaceholder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          leading = false,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function flush() {
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
          result = func.apply(thisArg, args);
        }
        cancel();
        return result;
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!lastCalled && !maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled);

          var isCalled = (remaining <= 0 || remaining > maxWait) &&
            (leading || maxTimeoutId);

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => logs 'deferred' after one or more milliseconds
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, getPlaceholder(partial));
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, getPlaceholder(partialRight));
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return rest(function(args) {
        var array = args[start],
            otherArgs = args.slice(0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, false, true);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }

    /**
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @type {Function}
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    function isArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = !Buffer ? constant(false) : function(value) {
      return value instanceof Buffer;
    };

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty collection or object. A value is considered
     * empty if it's an `arguments` object, array, string, or jQuery-like collection
     * with a length of `0` or has no own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) &&
          (isArray(value) || isString(value) ||
            isFunction(value.splice) || isArguments(value))) {
        return !value.length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) ||
        (typeof value.message == 'string' && typeof value.name == 'string');
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MAX_VALUE);
     * // => true
     *
     * _.isFinite(3.14);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array and weak map constructors,
      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    function isMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values. This method is
     * equivalent to a `_.matches` function when `source` is partially applied.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(funcToString.call(value));
      }
      return isObjectLike(value) &&
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) ||
          objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototypeOf(value);
      if (proto === null) {
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    function isSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3');
     * // => 3
     */
    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? (remainder ? value - remainder : value) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3);
     * // => 3
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3');
     * // => 3
     */
    function toNumber(value) {
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (value == null) {
        return '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source objects to the destination
     * object. Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     *
     * _.at(['a', 'b', 'c'], 0, 2);
     * // => ['a', 'c']
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a `properties`
     * object is given its own enumerable properties are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable properties of source objects to the
     * destination object for all destination properties that resolve to `undefined`.
     * Source objects are applied from left to right. Once a property is set,
     * additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, baseCastFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, baseCastFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, baseCastFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, baseCastFunction(iteratee));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b.c');
     * // => true
     *
     * _.hasIn(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` through `iteratee`.
     * The corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`. The iteratee is invoked with
     * three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee is invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable properties of source objects into the destination
     * object. Source properties that resolve to `undefined` are skipped if a
     * destination value exists. Array and plain object properties are merged
     * recursively.Other objects and value types are overridden by assignment.
     * Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined` merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to omit, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), String);
      return basePick(object, baseDifference(keysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable properties of `object` that `predicate`
     * doesn't return truthy for. The predicate is invoked with two arguments:
     * (value, key).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to pick, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, baseFlatten(props, 1));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it's invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      if (!isKey(path, object)) {
        path = baseCastPath(path);
        var result = get(object, path);
        object = parent(object, path);
      } else {
        result = object == null ? undefined : object[path];
      }
      if (result === undefined) {
        result = defaultValue;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable key-value pairs for `object` which
     * can be consumed by `_.fromPairs`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    /**
     * Creates an array of own and inherited enumerable key-value pairs for
     * `object` which can be consumed by `_.fromPairs`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
     */
    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The iteratee is invoked with four arguments:
     * (accumulator, value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototypeOf(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
     * a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = typeof target == 'string' ? target : (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      return string + createPadding(string, length, chars);
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      return createPadding(string, length, chars) + string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      string = toString(string);
      n = toInteger(n);

      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the new array of string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      return toString(string).split(separator, limit);
    }

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + capitalize(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar');
     * // => '--foo-bar'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar');
     * // => '--FOO-BAR'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrim, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars);

      return strSymbols
        .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)
        .join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimEnd, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols
        .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)
        .join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimStart, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols
        .slice(charsStartIndex(strSymbols, stringToArray(chars)))
        .join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options=({})] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? toString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? strSymbols.slice(0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind,
     *  specified individually or in arrays.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, 'onClick');
     * jQuery(element).on('click', view.onClick);
     * // => logs 'clicked docs' when clicked
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function(key) {
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` invoking the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument given to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name the created callback returns the
     * property value for a given element. If `func` is an object the created
     * callback returns `true` for elements that contain the equivalent object
     * properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
     *   return !p ? callback(func) : function(object) {
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
     *   };
     * });
     *
     * _.filter(users, 'age > 36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`. The created function is equivalent to
     * `_.isMatch` with a `source` partially applied.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Util
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns its nth argument.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.nthArg(1);
     *
     * func('a', 'b', 'c');
     * // => 'b'
     */
    function nthArg(n) {
      n = toInteger(n);
      return function() {
        return arguments[n];
      };
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments provided
     * to the created function and returns their results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over(Math.max, Math.min);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(true));
     * // => [true, true, true, true]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = baseCastFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     *
     * var path = ['a', 'b', 'c'],
     *     newPath = _.toPath(path);
     *
     * console.log(newPath);
     * // => ['a', 'b', 'c']
     *
     * console.log(path === newPath);
     * // => false
     */
    function toPath(value) {
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
    }

    /**
     * Generates a unique ID. If `prefix` is given the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      var result;
      if (augend === undefined && addend === undefined) {
        return 0;
      }
      if (augend !== undefined) {
        result = augend;
      }
      if (addend !== undefined) {
        result = result === undefined ? addend : (result + addend);
      }
      return result;
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, gt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), gt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return sum(array) / (array ? array.length : 0);
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, lt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), lt)
        : undefined;
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    function subtract(minuend, subtrahend) {
      var result;
      if (minuend === undefined && subtrahend === undefined) {
        return 0;
      }
      if (minuend !== undefined) {
        result = minuend;
      }
      if (subtrahend !== undefined) {
        result = result === undefined ? subtrahend : (result - subtrahend);
      }
      return result;
    }

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Avoid inheriting from `Object.prototype` when possible.
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    // Add functions to the `MapCache`.
    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `SetCache`.
    SetCache.prototype.push = cachePush;

    // Add functions to the `Stack` cache.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.flatMap = wrapperFlatMap;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],254:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}]},{},[249])(249)
});